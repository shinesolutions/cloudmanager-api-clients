<?php
/**
 * VariablesApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VariablesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VariablesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEnvironmentVariables
     *
     * List User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VariableList
     */
    public function getEnvironmentVariables($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        list($response) = $this->getEnvironmentVariablesWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);
        return $response;
    }

    /**
     * Operation getEnvironmentVariablesWithHttpInfo
     *
     * List User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VariableList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentVariablesWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        $request = $this->getEnvironmentVariablesRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VariableList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VariableList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VariableList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VariableList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentVariablesAsync
     *
     * List User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentVariablesAsync($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        return $this->getEnvironmentVariablesAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentVariablesAsyncWithHttpInfo
     *
     * List User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentVariablesAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        $returnType = '\OpenAPI\Client\Model\VariableList';
        $request = $this->getEnvironmentVariablesRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentVariables'
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvironmentVariablesRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling getEnvironmentVariables'
            );
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentVariables'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling getEnvironmentVariables'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getEnvironmentVariables'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getEnvironmentVariables'
            );
        }

        $resourcePath = '/api/program/{programId}/environment/{environmentId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchEnvironmentVariables
     *
     * Patch User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $content_type Must always be application/json (required)
     * @param  \OpenAPI\Client\Model\Variable[] $body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VariableList
     */
    public function patchEnvironmentVariables($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body)
    {
        list($response) = $this->patchEnvironmentVariablesWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body);
        return $response;
    }

    /**
     * Operation patchEnvironmentVariablesWithHttpInfo
     *
     * Patch User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $content_type Must always be application/json (required)
     * @param  \OpenAPI\Client\Model\Variable[] $body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VariableList, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchEnvironmentVariablesWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body)
    {
        $request = $this->patchEnvironmentVariablesRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VariableList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VariableList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VariableList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VariableList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchEnvironmentVariablesAsync
     *
     * Patch User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $content_type Must always be application/json (required)
     * @param  \OpenAPI\Client\Model\Variable[] $body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEnvironmentVariablesAsync($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body)
    {
        return $this->patchEnvironmentVariablesAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchEnvironmentVariablesAsyncWithHttpInfo
     *
     * Patch User Environment Variables
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $content_type Must always be application/json (required)
     * @param  \OpenAPI\Client\Model\Variable[] $body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEnvironmentVariablesAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body)
    {
        $returnType = '\OpenAPI\Client\Model\VariableList';
        $request = $this->patchEnvironmentVariablesRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchEnvironmentVariables'
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $content_type Must always be application/json (required)
     * @param  \OpenAPI\Client\Model\Variable[] $body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchEnvironmentVariablesRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key, $content_type, $body)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling patchEnvironmentVariables'
            );
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling patchEnvironmentVariables'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling patchEnvironmentVariables'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling patchEnvironmentVariables'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling patchEnvironmentVariables'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling patchEnvironmentVariables'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchEnvironmentVariables'
            );
        }

        $resourcePath = '/api/program/{programId}/environment/{environmentId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
