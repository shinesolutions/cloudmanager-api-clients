<?php
/**
 * EnvironmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * EnvironmentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvironmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteEnvironment
     *
     * DeleteEnvironment
     *
     * @param  string $program_id Identifier of the application (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Environment|\OpenAPI\Client\Model\BadRequestError
     */
    public function deleteEnvironment($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        list($response) = $this->deleteEnvironmentWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);
        return $response;
    }

    /**
     * Operation deleteEnvironmentWithHttpInfo
     *
     * DeleteEnvironment
     *
     * @param  string $program_id Identifier of the application (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Environment|\OpenAPI\Client\Model\BadRequestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvironmentWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        $request = $this->deleteEnvironmentRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Environment' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Environment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Environment';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Environment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvironmentAsync
     *
     * DeleteEnvironment
     *
     * @param  string $program_id Identifier of the application (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentAsync($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        return $this->deleteEnvironmentAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvironmentAsyncWithHttpInfo
     *
     * DeleteEnvironment
     *
     * @param  string $program_id Identifier of the application (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvironmentAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        $returnType = '\OpenAPI\Client\Model\Environment';
        $request = $this->deleteEnvironmentRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvironment'
     *
     * @param  string $program_id Identifier of the application (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnvironmentRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling deleteEnvironment'
            );
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling deleteEnvironment'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling deleteEnvironment'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteEnvironment'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling deleteEnvironment'
            );
        }

        $resourcePath = '/api/program/{programId}/environment/{environmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadLogs
     *
     * Download Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $service Name of service (required)
     * @param  string $name Name of log (required)
     * @param  string $date date for which log is required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadLogs($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept = null)
    {
        $this->downloadLogsWithHttpInfo($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept);
    }

    /**
     * Operation downloadLogsWithHttpInfo
     *
     * Download Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $service Name of service (required)
     * @param  string $name Name of log (required)
     * @param  string $date date for which log is required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadLogsWithHttpInfo($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept = null)
    {
        $request = $this->downloadLogsRequest($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadLogsAsync
     *
     * Download Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $service Name of service (required)
     * @param  string $name Name of log (required)
     * @param  string $date date for which log is required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadLogsAsync($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept = null)
    {
        return $this->downloadLogsAsyncWithHttpInfo($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadLogsAsyncWithHttpInfo
     *
     * Download Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $service Name of service (required)
     * @param  string $name Name of log (required)
     * @param  string $date date for which log is required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadLogsAsyncWithHttpInfo($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept = null)
    {
        $returnType = '';
        $request = $this->downloadLogsRequest($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadLogs'
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $service Name of service (required)
     * @param  string $name Name of log (required)
     * @param  string $date date for which log is required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadLogsRequest($program_id, $environment_id, $service, $name, $date, $x_gw_ims_org_id, $authorization, $x_api_key, $accept = null)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling downloadLogs'
            );
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling downloadLogs'
            );
        }
        // verify the required parameter 'service' is set
        if ($service === null || (is_array($service) && count($service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service when calling downloadLogs'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling downloadLogs'
            );
        }
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling downloadLogs'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling downloadLogs'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling downloadLogs'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling downloadLogs'
            );
        }

        $resourcePath = '/api/program/{programId}/environment/{environmentId}/logs/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service !== null) {
            if('form' === 'form' && is_array($service)) {
                foreach($service as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service'] = $service;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($date !== null) {
            if('form' === 'form' && is_array($date)) {
                foreach($date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['date'] = $date;
            }
        }

        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironment
     *
     * Get Environment
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Environment
     */
    public function getEnvironment($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        list($response) = $this->getEnvironmentWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);
        return $response;
    }

    /**
     * Operation getEnvironmentWithHttpInfo
     *
     * Get Environment
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Environment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        $request = $this->getEnvironmentRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Environment' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Environment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Environment';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Environment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentAsync
     *
     * Get Environment
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentAsync($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        return $this->getEnvironmentAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentAsyncWithHttpInfo
     *
     * Get Environment
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentAsyncWithHttpInfo($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        $returnType = '\OpenAPI\Client\Model\Environment';
        $request = $this->getEnvironmentRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironment'
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvironmentRequest($program_id, $environment_id, $x_gw_ims_org_id, $authorization, $x_api_key)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling getEnvironment'
            );
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironment'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling getEnvironment'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getEnvironment'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getEnvironment'
            );
        }

        $resourcePath = '/api/program/{programId}/environment/{environmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironmentLogs
     *
     * Get Environment Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  int $days number of days for which logs are required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string[] $service Names of services (optional)
     * @param  string[] $name Names of log (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EnvironmentLogs|\OpenAPI\Client\Model\BadRequestError
     */
    public function getEnvironmentLogs($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service = null, $name = null)
    {
        list($response) = $this->getEnvironmentLogsWithHttpInfo($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service, $name);
        return $response;
    }

    /**
     * Operation getEnvironmentLogsWithHttpInfo
     *
     * Get Environment Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  int $days number of days for which logs are required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string[] $service Names of services (optional)
     * @param  string[] $name Names of log (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EnvironmentLogs|\OpenAPI\Client\Model\BadRequestError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentLogsWithHttpInfo($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service = null, $name = null)
    {
        $request = $this->getEnvironmentLogsRequest($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EnvironmentLogs' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EnvironmentLogs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EnvironmentLogs';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EnvironmentLogs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentLogsAsync
     *
     * Get Environment Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  int $days number of days for which logs are required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string[] $service Names of services (optional)
     * @param  string[] $name Names of log (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentLogsAsync($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service = null, $name = null)
    {
        return $this->getEnvironmentLogsAsyncWithHttpInfo($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentLogsAsyncWithHttpInfo
     *
     * Get Environment Logs
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  int $days number of days for which logs are required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string[] $service Names of services (optional)
     * @param  string[] $name Names of log (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentLogsAsyncWithHttpInfo($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service = null, $name = null)
    {
        $returnType = '\OpenAPI\Client\Model\EnvironmentLogs';
        $request = $this->getEnvironmentLogsRequest($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironmentLogs'
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $environment_id Identifier of the environment (required)
     * @param  int $days number of days for which logs are required (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string[] $service Names of services (optional)
     * @param  string[] $name Names of log (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvironmentLogsRequest($program_id, $environment_id, $days, $x_gw_ims_org_id, $authorization, $x_api_key, $service = null, $name = null)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling getEnvironmentLogs'
            );
        }
        // verify the required parameter 'environment_id' is set
        if ($environment_id === null || (is_array($environment_id) && count($environment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $environment_id when calling getEnvironmentLogs'
            );
        }
        // verify the required parameter 'days' is set
        if ($days === null || (is_array($days) && count($days) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $days when calling getEnvironmentLogs'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling getEnvironmentLogs'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getEnvironmentLogs'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getEnvironmentLogs'
            );
        }

        $resourcePath = '/api/program/{programId}/environment/{environmentId}/logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service !== null) {
            if('form' === 'form' && is_array($service)) {
                foreach($service as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['service'] = $service;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($days !== null) {
            if('form' === 'form' && is_array($days)) {
                foreach($days as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['days'] = $days;
            }
        }

        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }
        // path params
        if ($environment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'environmentId' . '}',
                ObjectSerializer::toPathValue($environment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvironments
     *
     * List Environments
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $type Type of the environment (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EnvironmentList
     */
    public function getEnvironments($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type = null)
    {
        list($response) = $this->getEnvironmentsWithHttpInfo($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type);
        return $response;
    }

    /**
     * Operation getEnvironmentsWithHttpInfo
     *
     * List Environments
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $type Type of the environment (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EnvironmentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvironmentsWithHttpInfo($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type = null)
    {
        $request = $this->getEnvironmentsRequest($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EnvironmentList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EnvironmentList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EnvironmentList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EnvironmentList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvironmentsAsync
     *
     * List Environments
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $type Type of the environment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsAsync($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type = null)
    {
        return $this->getEnvironmentsAsyncWithHttpInfo($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvironmentsAsyncWithHttpInfo
     *
     * List Environments
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $type Type of the environment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvironmentsAsyncWithHttpInfo($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type = null)
    {
        $returnType = '\OpenAPI\Client\Model\EnvironmentList';
        $request = $this->getEnvironmentsRequest($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvironments'
     *
     * @param  string $program_id Identifier of the program (required)
     * @param  string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
     * @param  string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param  string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param  string $type Type of the environment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvironmentsRequest($program_id, $x_gw_ims_org_id, $authorization, $x_api_key, $type = null)
    {
        // verify the required parameter 'program_id' is set
        if ($program_id === null || (is_array($program_id) && count($program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $program_id when calling getEnvironments'
            );
        }
        // verify the required parameter 'x_gw_ims_org_id' is set
        if ($x_gw_ims_org_id === null || (is_array($x_gw_ims_org_id) && count($x_gw_ims_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_gw_ims_org_id when calling getEnvironments'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getEnvironments'
            );
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getEnvironments'
            );
        }

        $resourcePath = '/api/program/{programId}/environments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }

        // header params
        if ($x_gw_ims_org_id !== null) {
            $headerParams['x-gw-ims-org-id'] = ObjectSerializer::toHeaderValue($x_gw_ims_org_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'programId' . '}',
                ObjectSerializer::toPathValue($program_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
