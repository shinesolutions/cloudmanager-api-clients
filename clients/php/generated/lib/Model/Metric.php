<?php
/**
 * Metric
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Metric Class Doc Comment
 *
 * @category Class
 * @description Describes a __Metric__
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Metric implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Metric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'severity' => 'string',
        'passed' => 'bool',
        'override' => 'bool',
        'actual_value' => 'string',
        'expected_value' => 'string',
        'comparator' => 'string',
        'kpi' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'severity' => null,
        'passed' => null,
        'override' => null,
        'actual_value' => null,
        'expected_value' => null,
        'comparator' => null,
        'kpi' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'severity' => 'severity',
        'passed' => 'passed',
        'override' => 'override',
        'actual_value' => 'actualValue',
        'expected_value' => 'expectedValue',
        'comparator' => 'comparator',
        'kpi' => 'kpi'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'severity' => 'setSeverity',
        'passed' => 'setPassed',
        'override' => 'setOverride',
        'actual_value' => 'setActualValue',
        'expected_value' => 'setExpectedValue',
        'comparator' => 'setComparator',
        'kpi' => 'setKpi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'severity' => 'getSeverity',
        'passed' => 'getPassed',
        'override' => 'getOverride',
        'actual_value' => 'getActualValue',
        'expected_value' => 'getExpectedValue',
        'comparator' => 'getComparator',
        'kpi' => 'getKpi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SEVERITY_CRITICAL = 'critical';
    const SEVERITY_IMPORTANT = 'important';
    const SEVERITY_INFORMATIONAL = 'informational';
    const COMPARATOR_GT = 'GT';
    const COMPARATOR_GTE = 'GTE';
    const COMPARATOR_LT = 'LT';
    const COMPARATOR_LTE = 'LTE';
    const COMPARATOR_EQ = 'EQ';
    const COMPARATOR_NEQ = 'NEQ';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_CRITICAL,
            self::SEVERITY_IMPORTANT,
            self::SEVERITY_INFORMATIONAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComparatorAllowableValues()
    {
        return [
            self::COMPARATOR_GT,
            self::COMPARATOR_GTE,
            self::COMPARATOR_LT,
            self::COMPARATOR_LTE,
            self::COMPARATOR_EQ,
            self::COMPARATOR_NEQ,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['passed'] = isset($data['passed']) ? $data['passed'] : false;
        $this->container['override'] = isset($data['override']) ? $data['override'] : false;
        $this->container['actual_value'] = isset($data['actual_value']) ? $data['actual_value'] : null;
        $this->container['expected_value'] = isset($data['expected_value']) ? $data['expected_value'] : null;
        $this->container['comparator'] = isset($data['comparator']) ? $data['comparator'] : null;
        $this->container['kpi'] = isset($data['kpi']) ? $data['kpi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'severity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getComparatorAllowableValues();
        if (!is_null($this->container['comparator']) && !in_array($this->container['comparator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'comparator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id KPI result identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string|null $severity Severity of the metric
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'severity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets passed
     *
     * @return bool|null
     */
    public function getPassed()
    {
        return $this->container['passed'];
    }

    /**
     * Sets passed
     *
     * @param bool|null $passed Whether metric is considered passed
     *
     * @return $this
     */
    public function setPassed($passed)
    {
        $this->container['passed'] = $passed;

        return $this;
    }

    /**
     * Gets override
     *
     * @return bool|null
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param bool|null $override Whether user override the failed metric
     *
     * @return $this
     */
    public function setOverride($override)
    {
        $this->container['override'] = $override;

        return $this;
    }

    /**
     * Gets actual_value
     *
     * @return string|null
     */
    public function getActualValue()
    {
        return $this->container['actual_value'];
    }

    /**
     * Sets actual_value
     *
     * @param string|null $actual_value Expected value for the metric
     *
     * @return $this
     */
    public function setActualValue($actual_value)
    {
        $this->container['actual_value'] = $actual_value;

        return $this;
    }

    /**
     * Gets expected_value
     *
     * @return string|null
     */
    public function getExpectedValue()
    {
        return $this->container['expected_value'];
    }

    /**
     * Sets expected_value
     *
     * @param string|null $expected_value Expected value for the metric
     *
     * @return $this
     */
    public function setExpectedValue($expected_value)
    {
        $this->container['expected_value'] = $expected_value;

        return $this;
    }

    /**
     * Gets comparator
     *
     * @return string|null
     */
    public function getComparator()
    {
        return $this->container['comparator'];
    }

    /**
     * Sets comparator
     *
     * @param string|null $comparator Comparator used for the metric
     *
     * @return $this
     */
    public function setComparator($comparator)
    {
        $allowedValues = $this->getComparatorAllowableValues();
        if (!is_null($comparator) && !in_array($comparator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'comparator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['comparator'] = $comparator;

        return $this;
    }

    /**
     * Gets kpi
     *
     * @return string|null
     */
    public function getKpi()
    {
        return $this->container['kpi'];
    }

    /**
     * Sets kpi
     *
     * @param string|null $kpi KPI identifier
     *
     * @return $this
     */
    public function setKpi($kpi)
    {
        $this->container['kpi'] = $kpi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


