/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Describes a phase of a pipeline
    /// </summary>
    [DataContract]
    public partial class PipelinePhase :  IEquatable<PipelinePhase>, IValidatableObject
    {
        /// <summary>
        /// Type of the phase
        /// </summary>
        /// <value>Type of the phase</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum VALIDATE for value: VALIDATE
            /// </summary>
            [EnumMember(Value = "VALIDATE")]
            VALIDATE = 1,

            /// <summary>
            /// Enum BUILD for value: BUILD
            /// </summary>
            [EnumMember(Value = "BUILD")]
            BUILD = 2,

            /// <summary>
            /// Enum DEPLOY for value: DEPLOY
            /// </summary>
            [EnumMember(Value = "DEPLOY")]
            DEPLOY = 3

        }

        /// <summary>
        /// Type of the phase
        /// </summary>
        /// <value>Type of the phase</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinePhase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PipelinePhase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinePhase" /> class.
        /// </summary>
        /// <param name="name">Name of the phase.</param>
        /// <param name="type">Type of the phase (required).</param>
        /// <param name="repositoryId">Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD.</param>
        /// <param name="branch">Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing..</param>
        /// <param name="environmentId">Identifier of the target environment. Mandatory if type&#x3D;DEPLOY.</param>
        public PipelinePhase(string name = default(string), TypeEnum type = default(TypeEnum), string repositoryId = default(string), string branch = default(string), string environmentId = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PipelinePhase and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
            this.Name = name;
            this.RepositoryId = repositoryId;
            this.Branch = branch;
            this.EnvironmentId = environmentId;
        }
        
        /// <summary>
        /// Name of the phase
        /// </summary>
        /// <value>Name of the phase</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD
        /// </summary>
        /// <value>Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD</value>
        [DataMember(Name="repositoryId", EmitDefaultValue=false)]
        public string RepositoryId { get; set; }

        /// <summary>
        /// Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing.
        /// </summary>
        /// <value>Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing.</value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Identifier of the target environment. Mandatory if type&#x3D;DEPLOY
        /// </summary>
        /// <value>Identifier of the target environment. Mandatory if type&#x3D;DEPLOY</value>
        [DataMember(Name="environmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipelinePhase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RepositoryId: ").Append(RepositoryId).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipelinePhase);
        }

        /// <summary>
        /// Returns true if PipelinePhase instances are equal
        /// </summary>
        /// <param name="input">Instance of PipelinePhase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelinePhase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RepositoryId == input.RepositoryId ||
                    (this.RepositoryId != null &&
                    this.RepositoryId.Equals(input.RepositoryId))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RepositoryId != null)
                    hashCode = hashCode * 59 + this.RepositoryId.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.EnvironmentId != null)
                    hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
