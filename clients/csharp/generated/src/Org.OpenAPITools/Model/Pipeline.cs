/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Describes a __CI/CD Pipeline__
    /// </summary>
    [DataContract]
    public partial class Pipeline :  IEquatable<Pipeline>, IValidatableObject
    {
        /// <summary>
        /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
        /// </summary>
        /// <value>How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerEnum
        {
            /// <summary>
            /// Enum ONCOMMIT for value: ON_COMMIT
            /// </summary>
            [EnumMember(Value = "ON_COMMIT")]
            ONCOMMIT = 1,

            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 2,

            /// <summary>
            /// Enum SCHEDULE for value: SCHEDULE
            /// </summary>
            [EnumMember(Value = "SCHEDULE")]
            SCHEDULE = 3

        }

        /// <summary>
        /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
        /// </summary>
        /// <value>How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public TriggerEnum? Trigger { get; set; }
        /// <summary>
        /// Pipeline status
        /// </summary>
        /// <value>Pipeline status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum IDLE for value: IDLE
            /// </summary>
            [EnumMember(Value = "IDLE")]
            IDLE = 1,

            /// <summary>
            /// Enum BUSY for value: BUSY
            /// </summary>
            [EnumMember(Value = "BUSY")]
            BUSY = 2,

            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 3

        }

        /// <summary>
        /// Pipeline status
        /// </summary>
        /// <value>Pipeline status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pipeline" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Pipeline() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pipeline" /> class.
        /// </summary>
        /// <param name="id">Identifier of the pipeline. Unique within the program..</param>
        /// <param name="programId">Identifier of the program. Unique within the space..</param>
        /// <param name="name">Name of the pipeline (required).</param>
        /// <param name="trigger">How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}.</param>
        /// <param name="status">Pipeline status.</param>
        /// <param name="phases">Pipeline phases in execution order (required).</param>
        /// <param name="links">links.</param>
        public Pipeline(string id = default(string), string programId = default(string), string name = default(string), TriggerEnum? trigger = default(TriggerEnum?), StatusEnum? status = default(StatusEnum?), List<PipelinePhase> phases = default(List<PipelinePhase>), PipelineLinks links = default(PipelineLinks))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Pipeline and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "phases" is required (not null)
            if (phases == null)
            {
                throw new InvalidDataException("phases is a required property for Pipeline and cannot be null");
            }
            else
            {
                this.Phases = phases;
            }
            
            this.Id = id;
            this.ProgramId = programId;
            this.Trigger = trigger;
            this.Status = status;
            this.Links = links;
        }
        
        /// <summary>
        /// Identifier of the pipeline. Unique within the program.
        /// </summary>
        /// <value>Identifier of the pipeline. Unique within the program.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the program. Unique within the space.
        /// </summary>
        /// <value>Identifier of the program. Unique within the space.</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Name of the pipeline
        /// </summary>
        /// <value>Name of the pipeline</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// Create date
        /// </summary>
        /// <value>Create date</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Update date
        /// </summary>
        /// <value>Update date</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Last pipeline execution start
        /// </summary>
        /// <value>Last pipeline execution start</value>
        [DataMember(Name="lastStartedAt", EmitDefaultValue=false)]
        public DateTime LastStartedAt { get; private set; }

        /// <summary>
        /// Last pipeline execution end
        /// </summary>
        /// <value>Last pipeline execution end</value>
        [DataMember(Name="lastFinishedAt", EmitDefaultValue=false)]
        public DateTime LastFinishedAt { get; private set; }

        /// <summary>
        /// Pipeline phases in execution order
        /// </summary>
        /// <value>Pipeline phases in execution order</value>
        [DataMember(Name="phases", EmitDefaultValue=false)]
        public List<PipelinePhase> Phases { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public PipelineLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pipeline {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LastStartedAt: ").Append(LastStartedAt).Append("\n");
            sb.Append("  LastFinishedAt: ").Append(LastFinishedAt).Append("\n");
            sb.Append("  Phases: ").Append(Phases).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pipeline);
        }

        /// <summary>
        /// Returns true if Pipeline instances are equal
        /// </summary>
        /// <param name="input">Instance of Pipeline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pipeline input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.LastStartedAt == input.LastStartedAt ||
                    (this.LastStartedAt != null &&
                    this.LastStartedAt.Equals(input.LastStartedAt))
                ) && 
                (
                    this.LastFinishedAt == input.LastFinishedAt ||
                    (this.LastFinishedAt != null &&
                    this.LastFinishedAt.Equals(input.LastFinishedAt))
                ) && 
                (
                    this.Phases == input.Phases ||
                    this.Phases != null &&
                    input.Phases != null &&
                    this.Phases.SequenceEqual(input.Phases)
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.LastStartedAt != null)
                    hashCode = hashCode * 59 + this.LastStartedAt.GetHashCode();
                if (this.LastFinishedAt != null)
                    hashCode = hashCode * 59 + this.LastFinishedAt.GetHashCode();
                if (this.Phases != null)
                    hashCode = hashCode * 59 + this.Phases.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
