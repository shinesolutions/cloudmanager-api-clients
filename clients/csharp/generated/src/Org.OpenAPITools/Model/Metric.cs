/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Describes a __Metric__
    /// </summary>
    [DataContract]
    public partial class Metric :  IEquatable<Metric>, IValidatableObject
    {
        /// <summary>
        /// Severity of the metric
        /// </summary>
        /// <value>Severity of the metric</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 1,

            /// <summary>
            /// Enum Important for value: important
            /// </summary>
            [EnumMember(Value = "important")]
            Important = 2,

            /// <summary>
            /// Enum Informational for value: informational
            /// </summary>
            [EnumMember(Value = "informational")]
            Informational = 3

        }

        /// <summary>
        /// Severity of the metric
        /// </summary>
        /// <value>Severity of the metric</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Comparator used for the metric
        /// </summary>
        /// <value>Comparator used for the metric</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComparatorEnum
        {
            /// <summary>
            /// Enum GT for value: GT
            /// </summary>
            [EnumMember(Value = "GT")]
            GT = 1,

            /// <summary>
            /// Enum GTE for value: GTE
            /// </summary>
            [EnumMember(Value = "GTE")]
            GTE = 2,

            /// <summary>
            /// Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LT = 3,

            /// <summary>
            /// Enum LTE for value: LTE
            /// </summary>
            [EnumMember(Value = "LTE")]
            LTE = 4,

            /// <summary>
            /// Enum EQ for value: EQ
            /// </summary>
            [EnumMember(Value = "EQ")]
            EQ = 5,

            /// <summary>
            /// Enum NEQ for value: NEQ
            /// </summary>
            [EnumMember(Value = "NEQ")]
            NEQ = 6

        }

        /// <summary>
        /// Comparator used for the metric
        /// </summary>
        /// <value>Comparator used for the metric</value>
        [DataMember(Name="comparator", EmitDefaultValue=false)]
        public ComparatorEnum? Comparator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metric" /> class.
        /// </summary>
        /// <param name="id">KPI result identifier.</param>
        /// <param name="severity">Severity of the metric.</param>
        /// <param name="passed">Whether metric is considered passed (default to false).</param>
        /// <param name="_override">Whether user override the failed metric (default to false).</param>
        /// <param name="actualValue">Expected value for the metric.</param>
        /// <param name="expectedValue">Expected value for the metric.</param>
        /// <param name="comparator">Comparator used for the metric.</param>
        /// <param name="kpi">KPI identifier.</param>
        public Metric(string id = default(string), SeverityEnum? severity = default(SeverityEnum?), bool passed = false, bool _override = false, string actualValue = default(string), string expectedValue = default(string), ComparatorEnum? comparator = default(ComparatorEnum?), string kpi = default(string))
        {
            this.Id = id;
            this.Severity = severity;
            // use default value if no "passed" provided
            if (passed == null)
            {
                this.Passed = false;
            }
            else
            {
                this.Passed = passed;
            }
            // use default value if no "_override" provided
            if (_override == null)
            {
                this.Override = false;
            }
            else
            {
                this.Override = _override;
            }
            this.ActualValue = actualValue;
            this.ExpectedValue = expectedValue;
            this.Comparator = comparator;
            this.Kpi = kpi;
        }
        
        /// <summary>
        /// KPI result identifier
        /// </summary>
        /// <value>KPI result identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Whether metric is considered passed
        /// </summary>
        /// <value>Whether metric is considered passed</value>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public bool Passed { get; set; }

        /// <summary>
        /// Whether user override the failed metric
        /// </summary>
        /// <value>Whether user override the failed metric</value>
        [DataMember(Name="override", EmitDefaultValue=false)]
        public bool Override { get; set; }

        /// <summary>
        /// Expected value for the metric
        /// </summary>
        /// <value>Expected value for the metric</value>
        [DataMember(Name="actualValue", EmitDefaultValue=false)]
        public string ActualValue { get; set; }

        /// <summary>
        /// Expected value for the metric
        /// </summary>
        /// <value>Expected value for the metric</value>
        [DataMember(Name="expectedValue", EmitDefaultValue=false)]
        public string ExpectedValue { get; set; }


        /// <summary>
        /// KPI identifier
        /// </summary>
        /// <value>KPI identifier</value>
        [DataMember(Name="kpi", EmitDefaultValue=false)]
        public string Kpi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metric {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Override: ").Append(Override).Append("\n");
            sb.Append("  ActualValue: ").Append(ActualValue).Append("\n");
            sb.Append("  ExpectedValue: ").Append(ExpectedValue).Append("\n");
            sb.Append("  Comparator: ").Append(Comparator).Append("\n");
            sb.Append("  Kpi: ").Append(Kpi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metric);
        }

        /// <summary>
        /// Returns true if Metric instances are equal
        /// </summary>
        /// <param name="input">Instance of Metric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metric input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Passed == input.Passed ||
                    (this.Passed != null &&
                    this.Passed.Equals(input.Passed))
                ) && 
                (
                    this.Override == input.Override ||
                    (this.Override != null &&
                    this.Override.Equals(input.Override))
                ) && 
                (
                    this.ActualValue == input.ActualValue ||
                    (this.ActualValue != null &&
                    this.ActualValue.Equals(input.ActualValue))
                ) && 
                (
                    this.ExpectedValue == input.ExpectedValue ||
                    (this.ExpectedValue != null &&
                    this.ExpectedValue.Equals(input.ExpectedValue))
                ) && 
                (
                    this.Comparator == input.Comparator ||
                    (this.Comparator != null &&
                    this.Comparator.Equals(input.Comparator))
                ) && 
                (
                    this.Kpi == input.Kpi ||
                    (this.Kpi != null &&
                    this.Kpi.Equals(input.Kpi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Passed != null)
                    hashCode = hashCode * 59 + this.Passed.GetHashCode();
                if (this.Override != null)
                    hashCode = hashCode * 59 + this.Override.GetHashCode();
                if (this.ActualValue != null)
                    hashCode = hashCode * 59 + this.ActualValue.GetHashCode();
                if (this.ExpectedValue != null)
                    hashCode = hashCode * 59 + this.ExpectedValue.GetHashCode();
                if (this.Comparator != null)
                    hashCode = hashCode * 59 + this.Comparator.GetHashCode();
                if (this.Kpi != null)
                    hashCode = hashCode * 59 + this.Kpi.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
