/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Describes the status of a particular pipeline execution step for display purposes
    /// </summary>
    [DataContract]
    public partial class PipelineExecutionStepState :  IEquatable<PipelineExecutionStepState>, IValidatableObject
    {
        /// <summary>
        /// Action status
        /// </summary>
        /// <value>Action status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NOTSTARTED for value: NOT_STARTED
            /// </summary>
            [EnumMember(Value = "NOT_STARTED")]
            NOTSTARTED = 1,

            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 2,

            /// <summary>
            /// Enum FINISHED for value: FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED = 3,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 4,

            /// <summary>
            /// Enum ROLLINGBACK for value: ROLLING_BACK
            /// </summary>
            [EnumMember(Value = "ROLLING_BACK")]
            ROLLINGBACK = 5,

            /// <summary>
            /// Enum ROLLEDBACK for value: ROLLED_BACK
            /// </summary>
            [EnumMember(Value = "ROLLED_BACK")]
            ROLLEDBACK = 6,

            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 7,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 8,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 9

        }

        /// <summary>
        /// Action status
        /// </summary>
        /// <value>Action status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineExecutionStepState" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="stepId">stepId.</param>
        /// <param name="phaseId">phaseId.</param>
        /// <param name="action">Name of the action.</param>
        /// <param name="repository">Target repository.</param>
        /// <param name="branch">Target branch.</param>
        /// <param name="environment">Target environment.</param>
        /// <param name="environmentType">Target environment type.</param>
        /// <param name="startedAt">Start time.</param>
        /// <param name="finishedAt">Date the execution reached a final state.</param>
        /// <param name="details">Information about step result.</param>
        /// <param name="status">Action status.</param>
        /// <param name="links">links.</param>
        public PipelineExecutionStepState(string id = default(string), string stepId = default(string), string phaseId = default(string), string action = default(string), string repository = default(string), string branch = default(string), string environment = default(string), string environmentType = default(string), DateTime startedAt = default(DateTime), DateTime finishedAt = default(DateTime), Dictionary<string, Object> details = default(Dictionary<string, Object>), StatusEnum? status = default(StatusEnum?), PipelineExecutionStepStateLinks links = default(PipelineExecutionStepStateLinks))
        {
            this.Id = id;
            this.StepId = stepId;
            this.PhaseId = phaseId;
            this.Action = action;
            this.Repository = repository;
            this.Branch = branch;
            this.Environment = environment;
            this.EnvironmentType = environmentType;
            this.StartedAt = startedAt;
            this.FinishedAt = finishedAt;
            this.Details = details;
            this.Status = status;
            this.Links = links;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name="stepId", EmitDefaultValue=false)]
        public string StepId { get; set; }

        /// <summary>
        /// Gets or Sets PhaseId
        /// </summary>
        [DataMember(Name="phaseId", EmitDefaultValue=false)]
        public string PhaseId { get; set; }

        /// <summary>
        /// Name of the action
        /// </summary>
        /// <value>Name of the action</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Target repository
        /// </summary>
        /// <value>Target repository</value>
        [DataMember(Name="repository", EmitDefaultValue=false)]
        public string Repository { get; set; }

        /// <summary>
        /// Target branch
        /// </summary>
        /// <value>Target branch</value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Target environment
        /// </summary>
        /// <value>Target environment</value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string Environment { get; set; }

        /// <summary>
        /// Target environment type
        /// </summary>
        /// <value>Target environment type</value>
        [DataMember(Name="environmentType", EmitDefaultValue=false)]
        public string EnvironmentType { get; set; }

        /// <summary>
        /// Start time
        /// </summary>
        /// <value>Start time</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Date the execution reached a final state
        /// </summary>
        /// <value>Date the execution reached a final state</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTime FinishedAt { get; set; }

        /// <summary>
        /// Information about step result
        /// </summary>
        /// <value>Information about step result</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Dictionary<string, Object> Details { get; set; }


        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public PipelineExecutionStepStateLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipelineExecutionStepState {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("  PhaseId: ").Append(PhaseId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  EnvironmentType: ").Append(EnvironmentType).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipelineExecutionStepState);
        }

        /// <summary>
        /// Returns true if PipelineExecutionStepState instances are equal
        /// </summary>
        /// <param name="input">Instance of PipelineExecutionStepState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelineExecutionStepState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StepId == input.StepId ||
                    (this.StepId != null &&
                    this.StepId.Equals(input.StepId))
                ) && 
                (
                    this.PhaseId == input.PhaseId ||
                    (this.PhaseId != null &&
                    this.PhaseId.Equals(input.PhaseId))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Repository == input.Repository ||
                    (this.Repository != null &&
                    this.Repository.Equals(input.Repository))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.EnvironmentType == input.EnvironmentType ||
                    (this.EnvironmentType != null &&
                    this.EnvironmentType.Equals(input.EnvironmentType))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StepId != null)
                    hashCode = hashCode * 59 + this.StepId.GetHashCode();
                if (this.PhaseId != null)
                    hashCode = hashCode * 59 + this.PhaseId.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Repository != null)
                    hashCode = hashCode * 59 + this.Repository.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.EnvironmentType != null)
                    hashCode = hashCode * 59 + this.EnvironmentType.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
