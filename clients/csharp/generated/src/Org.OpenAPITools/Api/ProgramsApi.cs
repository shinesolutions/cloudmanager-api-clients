/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProgramsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Program
        /// </summary>
        /// <remarks>
        /// Delete an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Program</returns>
        Program DeleteProgram (string programId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Delete Program
        /// </summary>
        /// <remarks>
        /// Delete an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Program</returns>
        ApiResponse<Program> DeleteProgramWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get Program
        /// </summary>
        /// <remarks>
        /// Returns a program by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Program</returns>
        Program GetProgram (string programId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get Program
        /// </summary>
        /// <remarks>
        /// Returns a program by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Program</returns>
        ApiResponse<Program> GetProgramWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Lists Programs
        /// </summary>
        /// <remarks>
        /// Returns all programs that the requesting user has access to
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ProgramList</returns>
        ProgramList GetPrograms (string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Lists Programs
        /// </summary>
        /// <remarks>
        /// Returns all programs that the requesting user has access to
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of ProgramList</returns>
        ApiResponse<ProgramList> GetProgramsWithHttpInfo (string xGwImsOrgId, string authorization, string xApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Program
        /// </summary>
        /// <remarks>
        /// Delete an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Program</returns>
        System.Threading.Tasks.Task<Program> DeleteProgramAsync (string programId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Delete Program
        /// </summary>
        /// <remarks>
        /// Delete an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Program)</returns>
        System.Threading.Tasks.Task<ApiResponse<Program>> DeleteProgramAsyncWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get Program
        /// </summary>
        /// <remarks>
        /// Returns a program by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Program</returns>
        System.Threading.Tasks.Task<Program> GetProgramAsync (string programId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get Program
        /// </summary>
        /// <remarks>
        /// Returns a program by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Program)</returns>
        System.Threading.Tasks.Task<ApiResponse<Program>> GetProgramAsyncWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Lists Programs
        /// </summary>
        /// <remarks>
        /// Returns all programs that the requesting user has access to
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ProgramList</returns>
        System.Threading.Tasks.Task<ProgramList> GetProgramsAsync (string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Lists Programs
        /// </summary>
        /// <remarks>
        /// Returns all programs that the requesting user has access to
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (ProgramList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProgramList>> GetProgramsAsyncWithHttpInfo (string xGwImsOrgId, string authorization, string xApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProgramsApi : IProgramsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProgramsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ProgramsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProgramsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Program Delete an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Program</returns>
        public Program DeleteProgram (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Program> localVarResponse = DeleteProgramWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Program Delete an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Program</returns>
        public ApiResponse<Program> DeleteProgramWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling ProgramsApi->DeleteProgram");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling ProgramsApi->DeleteProgram");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProgramsApi->DeleteProgram");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProgramsApi->DeleteProgram");

            var localVarPath = "/api/program/{programId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Program>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Program) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Program)));
        }

        /// <summary>
        /// Delete Program Delete an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Program</returns>
        public async System.Threading.Tasks.Task<Program> DeleteProgramAsync (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Program> localVarResponse = await DeleteProgramAsyncWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Program Delete an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Program)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Program>> DeleteProgramAsyncWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling ProgramsApi->DeleteProgram");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling ProgramsApi->DeleteProgram");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProgramsApi->DeleteProgram");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProgramsApi->DeleteProgram");

            var localVarPath = "/api/program/{programId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Program>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Program) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Program)));
        }

        /// <summary>
        /// Get Program Returns a program by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Program</returns>
        public Program GetProgram (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Program> localVarResponse = GetProgramWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Program Returns a program by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Program</returns>
        public ApiResponse<Program> GetProgramWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling ProgramsApi->GetProgram");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling ProgramsApi->GetProgram");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProgramsApi->GetProgram");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProgramsApi->GetProgram");

            var localVarPath = "/api/program/{programId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Program>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Program) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Program)));
        }

        /// <summary>
        /// Get Program Returns a program by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Program</returns>
        public async System.Threading.Tasks.Task<Program> GetProgramAsync (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Program> localVarResponse = await GetProgramAsyncWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Program Returns a program by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Program)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Program>> GetProgramAsyncWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling ProgramsApi->GetProgram");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling ProgramsApi->GetProgram");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProgramsApi->GetProgram");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProgramsApi->GetProgram");

            var localVarPath = "/api/program/{programId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Program>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Program) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Program)));
        }

        /// <summary>
        /// Lists Programs Returns all programs that the requesting user has access to
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ProgramList</returns>
        public ProgramList GetPrograms (string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<ProgramList> localVarResponse = GetProgramsWithHttpInfo(xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists Programs Returns all programs that the requesting user has access to
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of ProgramList</returns>
        public ApiResponse<ProgramList> GetProgramsWithHttpInfo (string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling ProgramsApi->GetPrograms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProgramsApi->GetPrograms");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProgramsApi->GetPrograms");

            var localVarPath = "/api/programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProgramList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProgramList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProgramList)));
        }

        /// <summary>
        /// Lists Programs Returns all programs that the requesting user has access to
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ProgramList</returns>
        public async System.Threading.Tasks.Task<ProgramList> GetProgramsAsync (string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<ProgramList> localVarResponse = await GetProgramsAsyncWithHttpInfo(xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists Programs Returns all programs that the requesting user has access to
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (ProgramList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProgramList>> GetProgramsAsyncWithHttpInfo (string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling ProgramsApi->GetPrograms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProgramsApi->GetPrograms");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling ProgramsApi->GetPrograms");

            var localVarPath = "/api/programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProgramList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProgramList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProgramList)));
        }

    }
}
