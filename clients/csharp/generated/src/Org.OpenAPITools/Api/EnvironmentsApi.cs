/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnvironmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// DeleteEnvironment
        /// </summary>
        /// <remarks>
        /// Delete environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Environment</returns>
        Environment DeleteEnvironment (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// DeleteEnvironment
        /// </summary>
        /// <remarks>
        /// Delete environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Environment</returns>
        ApiResponse<Environment> DeleteEnvironmentWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Download Logs
        /// </summary>
        /// <remarks>
        /// Download environment logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns></returns>
        void DownloadLogs (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string));

        /// <summary>
        /// Download Logs
        /// </summary>
        /// <remarks>
        /// Download environment logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadLogsWithHttpInfo (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string));
        /// <summary>
        /// Get Environment
        /// </summary>
        /// <remarks>
        /// Returns an environment by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Environment</returns>
        Environment GetEnvironment (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get Environment
        /// </summary>
        /// <remarks>
        /// Returns an environment by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Environment</returns>
        ApiResponse<Environment> GetEnvironmentWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get Environment Logs
        /// </summary>
        /// <remarks>
        /// List all logs available in environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>EnvironmentLogs</returns>
        EnvironmentLogs GetEnvironmentLogs (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>));

        /// <summary>
        /// Get Environment Logs
        /// </summary>
        /// <remarks>
        /// List all logs available in environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>ApiResponse of EnvironmentLogs</returns>
        ApiResponse<EnvironmentLogs> GetEnvironmentLogsWithHttpInfo (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>));
        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// Lists all environments in an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>EnvironmentList</returns>
        EnvironmentList GetEnvironments (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string));

        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// Lists all environments in an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>ApiResponse of EnvironmentList</returns>
        ApiResponse<EnvironmentList> GetEnvironmentsWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// DeleteEnvironment
        /// </summary>
        /// <remarks>
        /// Delete environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Environment</returns>
        System.Threading.Tasks.Task<Environment> DeleteEnvironmentAsync (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// DeleteEnvironment
        /// </summary>
        /// <remarks>
        /// Delete environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Environment>> DeleteEnvironmentAsyncWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Download Logs
        /// </summary>
        /// <remarks>
        /// Download environment logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadLogsAsync (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string));

        /// <summary>
        /// Download Logs
        /// </summary>
        /// <remarks>
        /// Download environment logs
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadLogsAsyncWithHttpInfo (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string));
        /// <summary>
        /// Get Environment
        /// </summary>
        /// <remarks>
        /// Returns an environment by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Environment</returns>
        System.Threading.Tasks.Task<Environment> GetEnvironmentAsync (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get Environment
        /// </summary>
        /// <remarks>
        /// Returns an environment by its id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Environment>> GetEnvironmentAsyncWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get Environment Logs
        /// </summary>
        /// <remarks>
        /// List all logs available in environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>Task of EnvironmentLogs</returns>
        System.Threading.Tasks.Task<EnvironmentLogs> GetEnvironmentLogsAsync (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>));

        /// <summary>
        /// Get Environment Logs
        /// </summary>
        /// <remarks>
        /// List all logs available in environment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>Task of ApiResponse (EnvironmentLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentLogs>> GetEnvironmentLogsAsyncWithHttpInfo (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>));
        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// Lists all environments in an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>Task of EnvironmentList</returns>
        System.Threading.Tasks.Task<EnvironmentList> GetEnvironmentsAsync (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string));

        /// <summary>
        /// List Environments
        /// </summary>
        /// <remarks>
        /// Lists all environments in an program
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>Task of ApiResponse (EnvironmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvironmentList>> GetEnvironmentsAsyncWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnvironmentsApi : IEnvironmentsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnvironmentsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public EnvironmentsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnvironmentsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// DeleteEnvironment Delete environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Environment</returns>
        public Environment DeleteEnvironment (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Environment> localVarResponse = DeleteEnvironmentWithHttpInfo(programId, environmentId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DeleteEnvironment Delete environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Environment</returns>
        public ApiResponse<Environment> DeleteEnvironmentWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->DeleteEnvironment");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// DeleteEnvironment Delete environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Environment</returns>
        public async System.Threading.Tasks.Task<Environment> DeleteEnvironmentAsync (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Environment> localVarResponse = await DeleteEnvironmentAsyncWithHttpInfo(programId, environmentId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DeleteEnvironment Delete environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the application</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Environment>> DeleteEnvironmentAsyncWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->DeleteEnvironment");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->DeleteEnvironment");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Download Logs Download environment logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns></returns>
        public void DownloadLogs (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string))
        {
             DownloadLogsWithHttpInfo(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept);
        }

        /// <summary>
        /// Download Logs Download environment logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadLogsWithHttpInfo (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->DownloadLogs");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}/logs/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download Logs Download environment logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadLogsAsync (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string))
        {
             await DownloadLogsAsyncWithHttpInfo(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept);

        }

        /// <summary>
        /// Download Logs Download environment logs
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="service">Name of service</param>
        /// <param name="name">Name of log</param>
        /// <param name="date">date for which log is required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadLogsAsyncWithHttpInfo (string programId, string environmentId, string service, string name, string date, string xGwImsOrgId, string authorization, string xApiKey, string accept = default(string))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->DownloadLogs");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->DownloadLogs");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}/logs/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Environment Returns an environment by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Environment</returns>
        public Environment GetEnvironment (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Environment> localVarResponse = GetEnvironmentWithHttpInfo(programId, environmentId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Environment Returns an environment by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of Environment</returns>
        public ApiResponse<Environment> GetEnvironmentWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->GetEnvironment");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Get Environment Returns an environment by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of Environment</returns>
        public async System.Threading.Tasks.Task<Environment> GetEnvironmentAsync (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<Environment> localVarResponse = await GetEnvironmentAsyncWithHttpInfo(programId, environmentId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Environment Returns an environment by its id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (Environment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Environment>> GetEnvironmentAsyncWithHttpInfo (string programId, string environmentId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->GetEnvironment");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->GetEnvironment");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Environment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Environment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Environment)));
        }

        /// <summary>
        /// Get Environment Logs List all logs available in environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>EnvironmentLogs</returns>
        public EnvironmentLogs GetEnvironmentLogs (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>))
        {
             ApiResponse<EnvironmentLogs> localVarResponse = GetEnvironmentLogsWithHttpInfo(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Environment Logs List all logs available in environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>ApiResponse of EnvironmentLogs</returns>
        public ApiResponse<EnvironmentLogs> GetEnvironmentLogsWithHttpInfo (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'days' is set
            if (days == null)
                throw new ApiException(400, "Missing required parameter 'days' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->GetEnvironmentLogs");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "service", service)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironmentLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EnvironmentLogs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentLogs)));
        }

        /// <summary>
        /// Get Environment Logs List all logs available in environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>Task of EnvironmentLogs</returns>
        public async System.Threading.Tasks.Task<EnvironmentLogs> GetEnvironmentLogsAsync (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>))
        {
             ApiResponse<EnvironmentLogs> localVarResponse = await GetEnvironmentLogsAsyncWithHttpInfo(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Environment Logs List all logs available in environment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="environmentId">Identifier of the environment</param>
        /// <param name="days">number of days for which logs are required</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="service">Names of services (optional)</param>
        /// <param name="name">Names of log (optional)</param>
        /// <returns>Task of ApiResponse (EnvironmentLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentLogs>> GetEnvironmentLogsAsyncWithHttpInfo (string programId, string environmentId, int days, string xGwImsOrgId, string authorization, string xApiKey, List<string> service = default(List<string>), List<string> name = default(List<string>))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'environmentId' is set
            if (environmentId == null)
                throw new ApiException(400, "Missing required parameter 'environmentId' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'days' is set
            if (days == null)
                throw new ApiException(400, "Missing required parameter 'days' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->GetEnvironmentLogs");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->GetEnvironmentLogs");

            var localVarPath = "/api/program/{programId}/environment/{environmentId}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (environmentId != null) localVarPathParams.Add("environmentId", this.Configuration.ApiClient.ParameterToString(environmentId)); // path parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "service", service)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironmentLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EnvironmentLogs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentLogs)));
        }

        /// <summary>
        /// List Environments Lists all environments in an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>EnvironmentList</returns>
        public EnvironmentList GetEnvironments (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string))
        {
             ApiResponse<EnvironmentList> localVarResponse = GetEnvironmentsWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Environments Lists all environments in an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>ApiResponse of EnvironmentList</returns>
        public ApiResponse<EnvironmentList> GetEnvironmentsWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->GetEnvironments");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->GetEnvironments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->GetEnvironments");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->GetEnvironments");

            var localVarPath = "/api/program/{programId}/environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EnvironmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentList)));
        }

        /// <summary>
        /// List Environments Lists all environments in an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>Task of EnvironmentList</returns>
        public async System.Threading.Tasks.Task<EnvironmentList> GetEnvironmentsAsync (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string))
        {
             ApiResponse<EnvironmentList> localVarResponse = await GetEnvironmentsAsyncWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Environments Lists all environments in an program
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="type">Type of the environment (optional)</param>
        /// <returns>Task of ApiResponse (EnvironmentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnvironmentList>> GetEnvironmentsAsyncWithHttpInfo (string programId, string xGwImsOrgId, string authorization, string xApiKey, string type = default(string))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling EnvironmentsApi->GetEnvironments");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling EnvironmentsApi->GetEnvironments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EnvironmentsApi->GetEnvironments");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling EnvironmentsApi->GetEnvironments");

            var localVarPath = "/api/program/{programId}/environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnvironments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnvironmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EnvironmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnvironmentList)));
        }

    }
}
