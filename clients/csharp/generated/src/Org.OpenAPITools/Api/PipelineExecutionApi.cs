/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelineExecutionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advance
        /// </summary>
        /// <remarks>
        /// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns></returns>
        void AdvancePipelineExecution (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);

        /// <summary>
        /// Advance
        /// </summary>
        /// <remarks>
        /// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdvancePipelineExecutionWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);
        /// <summary>
        /// Cancel
        /// </summary>
        /// <remarks>
        /// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns></returns>
        void CancelPipelineExecutionStep (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);

        /// <summary>
        /// Cancel
        /// </summary>
        /// <remarks>
        /// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelPipelineExecutionStepWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);
        /// <summary>
        /// Get current pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns current pipeline execution if any.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineExecution</returns>
        PipelineExecution GetCurrentExecution (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get current pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns current pipeline execution if any.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineExecution</returns>
        ApiResponse<PipelineExecution> GetCurrentExecutionWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns a pipeline execution by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineExecution</returns>
        PipelineExecution GetExecution (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns a pipeline execution by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineExecution</returns>
        ApiResponse<PipelineExecution> GetExecutionWithHttpInfo (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// List Executions
        /// </summary>
        /// <remarks>
        /// Returns the history of pipeline executions in a newest to oldest order
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>PipelineExecutionListRepresentation</returns>
        PipelineExecutionListRepresentation GetExecutions (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int));

        /// <summary>
        /// List Executions
        /// </summary>
        /// <remarks>
        /// Returns the history of pipeline executions in a newest to oldest order
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>ApiResponse of PipelineExecutionListRepresentation</returns>
        ApiResponse<PipelineExecutionListRepresentation> GetExecutionsWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int));
        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// Get the logs associated with a step.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns></returns>
        void GetStepLogs (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string));

        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// Get the logs associated with a step.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetStepLogsWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string));
        /// <summary>
        /// Start the pipeline
        /// </summary>
        /// <remarks>
        /// Starts the Pipeline. This works only if the pipeline is not already started.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns></returns>
        void StartPipeline (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType);

        /// <summary>
        /// Start the pipeline
        /// </summary>
        /// <remarks>
        /// Starts the Pipeline. This works only if the pipeline is not already started.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StartPipelineWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType);
        /// <summary>
        /// Get step metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineStepMetrics</returns>
        PipelineStepMetrics StepMetric (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get step metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineStepMetrics</returns>
        ApiResponse<PipelineStepMetrics> StepMetricWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get step state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineExecutionStepState</returns>
        PipelineExecutionStepState StepState (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get step state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineExecutionStepState</returns>
        ApiResponse<PipelineExecutionStepState> StepStateWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advance
        /// </summary>
        /// <remarks>
        /// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdvancePipelineExecutionAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);

        /// <summary>
        /// Advance
        /// </summary>
        /// <remarks>
        /// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdvancePipelineExecutionAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);
        /// <summary>
        /// Cancel
        /// </summary>
        /// <remarks>
        /// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelPipelineExecutionStepAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);

        /// <summary>
        /// Cancel
        /// </summary>
        /// <remarks>
        /// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelPipelineExecutionStepAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body);
        /// <summary>
        /// Get current pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns current pipeline execution if any.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineExecution</returns>
        System.Threading.Tasks.Task<PipelineExecution> GetCurrentExecutionAsync (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get current pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns current pipeline execution if any.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineExecution)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineExecution>> GetCurrentExecutionAsyncWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns a pipeline execution by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineExecution</returns>
        System.Threading.Tasks.Task<PipelineExecution> GetExecutionAsync (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get pipeline execution
        /// </summary>
        /// <remarks>
        /// Returns a pipeline execution by id
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineExecution)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineExecution>> GetExecutionAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// List Executions
        /// </summary>
        /// <remarks>
        /// Returns the history of pipeline executions in a newest to oldest order
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>Task of PipelineExecutionListRepresentation</returns>
        System.Threading.Tasks.Task<PipelineExecutionListRepresentation> GetExecutionsAsync (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int));

        /// <summary>
        /// List Executions
        /// </summary>
        /// <remarks>
        /// Returns the history of pipeline executions in a newest to oldest order
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>Task of ApiResponse (PipelineExecutionListRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineExecutionListRepresentation>> GetExecutionsAsyncWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int));
        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// Get the logs associated with a step.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetStepLogsAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string));

        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// Get the logs associated with a step.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetStepLogsAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string));
        /// <summary>
        /// Start the pipeline
        /// </summary>
        /// <remarks>
        /// Starts the Pipeline. This works only if the pipeline is not already started.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StartPipelineAsync (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType);

        /// <summary>
        /// Start the pipeline
        /// </summary>
        /// <remarks>
        /// Starts the Pipeline. This works only if the pipeline is not already started.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartPipelineAsyncWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType);
        /// <summary>
        /// Get step metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineStepMetrics</returns>
        System.Threading.Tasks.Task<PipelineStepMetrics> StepMetricAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get step metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineStepMetrics)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStepMetrics>> StepMetricAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);
        /// <summary>
        /// Get step state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineExecutionStepState</returns>
        System.Threading.Tasks.Task<PipelineExecutionStepState> StepStateAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);

        /// <summary>
        /// Get step state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineExecutionStepState)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineExecutionStepState>> StepStateAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PipelineExecutionApi : IPipelineExecutionApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineExecutionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelineExecutionApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineExecutionApi"/> class
        /// </summary>
        /// <returns></returns>
        public PipelineExecutionApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineExecutionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PipelineExecutionApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advance Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns></returns>
        public void AdvancePipelineExecution (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
             AdvancePipelineExecutionWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
        }

        /// <summary>
        /// Advance Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdvancePipelineExecutionWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PipelineExecutionApi->AdvancePipelineExecution");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdvancePipelineExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Advance Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdvancePipelineExecutionAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
             await AdvancePipelineExecutionAsyncWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);

        }

        /// <summary>
        /// Advance Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdvancePipelineExecutionAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PipelineExecutionApi->AdvancePipelineExecution");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PipelineExecutionApi->AdvancePipelineExecution");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdvancePipelineExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns></returns>
        public void CancelPipelineExecutionStep (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
             CancelPipelineExecutionStepWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
        }

        /// <summary>
        /// Cancel Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelPipelineExecutionStepWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PipelineExecutionApi->CancelPipelineExecutionStep");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPipelineExecutionStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelPipelineExecutionStepAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
             await CancelPipelineExecutionStepAsyncWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);

        }

        /// <summary>
        /// Cancel Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <param name="body">Input for advance. See documentation for details.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelPipelineExecutionStepAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string contentType, Object body)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PipelineExecutionApi->CancelPipelineExecutionStep");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PipelineExecutionApi->CancelPipelineExecutionStep");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelPipelineExecutionStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get current pipeline execution Returns current pipeline execution if any.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineExecution</returns>
        public PipelineExecution GetCurrentExecution (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineExecution> localVarResponse = GetCurrentExecutionWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current pipeline execution Returns current pipeline execution if any.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineExecution</returns>
        public ApiResponse<PipelineExecution> GetCurrentExecutionWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetCurrentExecution");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecution)));
        }

        /// <summary>
        /// Get current pipeline execution Returns current pipeline execution if any.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineExecution</returns>
        public async System.Threading.Tasks.Task<PipelineExecution> GetCurrentExecutionAsync (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineExecution> localVarResponse = await GetCurrentExecutionAsyncWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current pipeline execution Returns current pipeline execution if any.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineExecution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineExecution>> GetCurrentExecutionAsyncWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetCurrentExecution");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetCurrentExecution");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecution)));
        }

        /// <summary>
        /// Get pipeline execution Returns a pipeline execution by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineExecution</returns>
        public PipelineExecution GetExecution (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineExecution> localVarResponse = GetExecutionWithHttpInfo(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get pipeline execution Returns a pipeline execution by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineExecution</returns>
        public ApiResponse<PipelineExecution> GetExecutionWithHttpInfo (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetExecution");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecution)));
        }

        /// <summary>
        /// Get pipeline execution Returns a pipeline execution by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineExecution</returns>
        public async System.Threading.Tasks.Task<PipelineExecution> GetExecutionAsync (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineExecution> localVarResponse = await GetExecutionAsyncWithHttpInfo(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get pipeline execution Returns a pipeline execution by id
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineExecution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineExecution>> GetExecutionAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetExecution");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetExecution");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecution)));
        }

        /// <summary>
        /// List Executions Returns the history of pipeline executions in a newest to oldest order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>PipelineExecutionListRepresentation</returns>
        public PipelineExecutionListRepresentation GetExecutions (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int))
        {
             ApiResponse<PipelineExecutionListRepresentation> localVarResponse = GetExecutionsWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Executions Returns the history of pipeline executions in a newest to oldest order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>ApiResponse of PipelineExecutionListRepresentation</returns>
        public ApiResponse<PipelineExecutionListRepresentation> GetExecutionsWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetExecutions");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecutionListRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecutionListRepresentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecutionListRepresentation)));
        }

        /// <summary>
        /// List Executions Returns the history of pipeline executions in a newest to oldest order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>Task of PipelineExecutionListRepresentation</returns>
        public async System.Threading.Tasks.Task<PipelineExecutionListRepresentation> GetExecutionsAsync (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int))
        {
             ApiResponse<PipelineExecutionListRepresentation> localVarResponse = await GetExecutionsAsyncWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Executions Returns the history of pipeline executions in a newest to oldest order
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="start">Pagination start parameter (optional)</param>
        /// <param name="limit">Pagination limit parameter (optional)</param>
        /// <returns>Task of ApiResponse (PipelineExecutionListRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineExecutionListRepresentation>> GetExecutionsAsyncWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string start = default(string), int limit = default(int))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetExecutions");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetExecutions");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/executions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExecutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecutionListRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecutionListRepresentation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecutionListRepresentation)));
        }

        /// <summary>
        /// Get logs Get the logs associated with a step.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns></returns>
        public void GetStepLogs (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string))
        {
             GetStepLogsWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept);
        }

        /// <summary>
        /// Get logs Get the logs associated with a step.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetStepLogsWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetStepLogs");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (file != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file", file)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get logs Get the logs associated with a step.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetStepLogsAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string))
        {
             await GetStepLogsAsyncWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept);

        }

        /// <summary>
        /// Get logs Get the logs associated with a step.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="file">Identifier of the log file (optional)</param>
        /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetStepLogsAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey, string file = default(string), string accept = default(string))
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->GetStepLogs");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->GetStepLogs");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (file != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "file", file)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStepLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Start the pipeline Starts the Pipeline. This works only if the pipeline is not already started.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns></returns>
        public void StartPipeline (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType)
        {
             StartPipelineWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType);
        }

        /// <summary>
        /// Start the pipeline Starts the Pipeline. This works only if the pipeline is not already started.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StartPipelineWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PipelineExecutionApi->StartPipeline");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartPipeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Start the pipeline Starts the Pipeline. This works only if the pipeline is not already started.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StartPipelineAsync (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType)
        {
             await StartPipelineAsyncWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType);

        }

        /// <summary>
        /// Start the pipeline Starts the Pipeline. This works only if the pipeline is not already started.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <param name="contentType">Must always be application/json</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StartPipelineAsyncWithHttpInfo (string programId, string pipelineId, string xGwImsOrgId, string authorization, string xApiKey, string contentType)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->StartPipeline");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PipelineExecutionApi->StartPipeline");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartPipeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get step metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineStepMetrics</returns>
        public PipelineStepMetrics StepMetric (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineStepMetrics> localVarResponse = StepMetricWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get step metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineStepMetrics</returns>
        public ApiResponse<PipelineStepMetrics> StepMetricWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->StepMetric");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StepMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineStepMetrics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineStepMetrics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineStepMetrics)));
        }

        /// <summary>
        /// Get step metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineStepMetrics</returns>
        public async System.Threading.Tasks.Task<PipelineStepMetrics> StepMetricAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineStepMetrics> localVarResponse = await StepMetricAsyncWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get step metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineStepMetrics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineStepMetrics>> StepMetricAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->StepMetric");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->StepMetric");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StepMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineStepMetrics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineStepMetrics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineStepMetrics)));
        }

        /// <summary>
        /// Get step state 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>PipelineExecutionStepState</returns>
        public PipelineExecutionStepState StepState (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineExecutionStepState> localVarResponse = StepStateWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get step state 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>ApiResponse of PipelineExecutionStepState</returns>
        public ApiResponse<PipelineExecutionStepState> StepStateWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->StepState");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StepState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecutionStepState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecutionStepState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecutionStepState)));
        }

        /// <summary>
        /// Get step state 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of PipelineExecutionStepState</returns>
        public async System.Threading.Tasks.Task<PipelineExecutionStepState> StepStateAsync (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
             ApiResponse<PipelineExecutionStepState> localVarResponse = await StepStateAsyncWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get step state 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programId">Identifier of the program.</param>
        /// <param name="pipelineId">Identifier of the pipeline</param>
        /// <param name="executionId">Identifier of the execution</param>
        /// <param name="phaseId">Identifier of the phase</param>
        /// <param name="stepId">Identifier of the step</param>
        /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
        /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
        /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
        /// <returns>Task of ApiResponse (PipelineExecutionStepState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineExecutionStepState>> StepStateAsyncWithHttpInfo (string programId, string pipelineId, string executionId, string phaseId, string stepId, string xGwImsOrgId, string authorization, string xApiKey)
        {
            // verify the required parameter 'programId' is set
            if (programId == null)
                throw new ApiException(400, "Missing required parameter 'programId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'pipelineId' is set
            if (pipelineId == null)
                throw new ApiException(400, "Missing required parameter 'pipelineId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'phaseId' is set
            if (phaseId == null)
                throw new ApiException(400, "Missing required parameter 'phaseId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'xGwImsOrgId' is set
            if (xGwImsOrgId == null)
                throw new ApiException(400, "Missing required parameter 'xGwImsOrgId' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PipelineExecutionApi->StepState");
            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xApiKey' when calling PipelineExecutionApi->StepState");

            var localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programId != null) localVarPathParams.Add("programId", this.Configuration.ApiClient.ParameterToString(programId)); // path parameter
            if (pipelineId != null) localVarPathParams.Add("pipelineId", this.Configuration.ApiClient.ParameterToString(pipelineId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", this.Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (phaseId != null) localVarPathParams.Add("phaseId", this.Configuration.ApiClient.ParameterToString(phaseId)); // path parameter
            if (stepId != null) localVarPathParams.Add("stepId", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            if (xGwImsOrgId != null) localVarHeaderParams.Add("x-gw-ims-org-id", this.Configuration.ApiClient.ParameterToString(xGwImsOrgId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xApiKey != null) localVarHeaderParams.Add("x-api-key", this.Configuration.ApiClient.ParameterToString(xApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StepState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineExecutionStepState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PipelineExecutionStepState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineExecutionStepState)));
        }

    }
}
