/* 
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PipelineExecutionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PipelineExecutionApiTests
    {
        private PipelineExecutionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PipelineExecutionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PipelineExecutionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PipelineExecutionApi
            //Assert.IsInstanceOf(typeof(PipelineExecutionApi), instance);
        }

        
        /// <summary>
        /// Test AdvancePipelineExecution
        /// </summary>
        [Test]
        public void AdvancePipelineExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string executionId = null;
            //string phaseId = null;
            //string stepId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //string contentType = null;
            //Object body = null;
            //instance.AdvancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
            
        }
        
        /// <summary>
        /// Test CancelPipelineExecutionStep
        /// </summary>
        [Test]
        public void CancelPipelineExecutionStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string executionId = null;
            //string phaseId = null;
            //string stepId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //string contentType = null;
            //Object body = null;
            //instance.CancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
            
        }
        
        /// <summary>
        /// Test GetCurrentExecution
        /// </summary>
        [Test]
        public void GetCurrentExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //var response = instance.GetCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
            //Assert.IsInstanceOf(typeof(PipelineExecution), response, "response is PipelineExecution");
        }
        
        /// <summary>
        /// Test GetExecution
        /// </summary>
        [Test]
        public void GetExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string executionId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //var response = instance.GetExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey);
            //Assert.IsInstanceOf(typeof(PipelineExecution), response, "response is PipelineExecution");
        }
        
        /// <summary>
        /// Test GetExecutions
        /// </summary>
        [Test]
        public void GetExecutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //string start = null;
            //int limit = null;
            //var response = instance.GetExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit);
            //Assert.IsInstanceOf(typeof(PipelineExecutionListRepresentation), response, "response is PipelineExecutionListRepresentation");
        }
        
        /// <summary>
        /// Test GetStepLogs
        /// </summary>
        [Test]
        public void GetStepLogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string executionId = null;
            //string phaseId = null;
            //string stepId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //string file = null;
            //string accept = null;
            //instance.GetStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept);
            
        }
        
        /// <summary>
        /// Test StartPipeline
        /// </summary>
        [Test]
        public void StartPipelineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //string contentType = null;
            //instance.StartPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType);
            
        }
        
        /// <summary>
        /// Test StepMetric
        /// </summary>
        [Test]
        public void StepMetricTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string executionId = null;
            //string phaseId = null;
            //string stepId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //var response = instance.StepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
            //Assert.IsInstanceOf(typeof(PipelineStepMetrics), response, "response is PipelineStepMetrics");
        }
        
        /// <summary>
        /// Test StepState
        /// </summary>
        [Test]
        public void StepStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string programId = null;
            //string pipelineId = null;
            //string executionId = null;
            //string phaseId = null;
            //string stepId = null;
            //string xGwImsOrgId = null;
            //string authorization = null;
            //string xApiKey = null;
            //var response = instance.StepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
            //Assert.IsInstanceOf(typeof(PipelineExecutionStepState), response, "response is PipelineExecutionStepState");
        }
        
    }

}
