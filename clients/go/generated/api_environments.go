/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * API version: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// EnvironmentsApiService EnvironmentsApi service
type EnvironmentsApiService service

/*
DeleteEnvironment DeleteEnvironment
Delete environment
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param programId Identifier of the application
 * @param environmentId Identifier of the environment
 * @param xGwImsOrgId IMS organization ID that the request is being made under.
 * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
@return Environment
*/
func (a *EnvironmentsApiService) DeleteEnvironment(ctx _context.Context, programId string, environmentId string, xGwImsOrgId string, authorization string, xApiKey string) (Environment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Environment
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/program/{programId}/environment/{environmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", _neturl.QueryEscape(parameterToString(programId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", _neturl.QueryEscape(parameterToString(environmentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-gw-ims-org-id"] = parameterToString(xGwImsOrgId, "")
	localVarHeaderParams["Authorization"] = parameterToString(authorization, "")
	localVarHeaderParams["x-api-key"] = parameterToString(xApiKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DownloadLogsOpts Optional parameters for the method 'DownloadLogs'
type DownloadLogsOpts struct {
    Accept optional.String
}

/*
DownloadLogs Download Logs
Download environment logs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param programId Identifier of the program
 * @param environmentId Identifier of the environment
 * @param service Name of service
 * @param name Name of log
 * @param date date for which log is required
 * @param xGwImsOrgId IMS organization ID that the request is being made under.
 * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param optional nil or *DownloadLogsOpts - Optional Parameters:
 * @param "Accept" (optional.String) -  Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
*/
func (a *EnvironmentsApiService) DownloadLogs(ctx _context.Context, programId string, environmentId string, service string, name string, date string, xGwImsOrgId string, authorization string, xApiKey string, localVarOptionals *DownloadLogsOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/program/{programId}/environment/{environmentId}/logs/download"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", _neturl.QueryEscape(parameterToString(programId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", _neturl.QueryEscape(parameterToString(environmentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("service", parameterToString(service, ""))
	localVarQueryParams.Add("name", parameterToString(name, ""))
	localVarQueryParams.Add("date", parameterToString(date, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-gw-ims-org-id"] = parameterToString(xGwImsOrgId, "")
	localVarHeaderParams["Authorization"] = parameterToString(authorization, "")
	localVarHeaderParams["x-api-key"] = parameterToString(xApiKey, "")
	if localVarOptionals != nil && localVarOptionals.Accept.IsSet() {
		localVarHeaderParams["Accept"] = parameterToString(localVarOptionals.Accept.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GetEnvironment Get Environment
Returns an environment by its id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param programId Identifier of the program
 * @param environmentId Identifier of the environment
 * @param xGwImsOrgId IMS organization ID that the request is being made under.
 * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
@return Environment
*/
func (a *EnvironmentsApiService) GetEnvironment(ctx _context.Context, programId string, environmentId string, xGwImsOrgId string, authorization string, xApiKey string) (Environment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Environment
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/program/{programId}/environment/{environmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", _neturl.QueryEscape(parameterToString(programId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", _neturl.QueryEscape(parameterToString(environmentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-gw-ims-org-id"] = parameterToString(xGwImsOrgId, "")
	localVarHeaderParams["Authorization"] = parameterToString(authorization, "")
	localVarHeaderParams["x-api-key"] = parameterToString(xApiKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetEnvironmentLogsOpts Optional parameters for the method 'GetEnvironmentLogs'
type GetEnvironmentLogsOpts struct {
    Service optional.Interface
    Name optional.Interface
}

/*
GetEnvironmentLogs Get Environment Logs
List all logs available in environment
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param programId Identifier of the program
 * @param environmentId Identifier of the environment
 * @param days number of days for which logs are required
 * @param xGwImsOrgId IMS organization ID that the request is being made under.
 * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param optional nil or *GetEnvironmentLogsOpts - Optional Parameters:
 * @param "Service" (optional.Interface of []string) -  Names of services
 * @param "Name" (optional.Interface of []string) -  Names of log
@return EnvironmentLogs
*/
func (a *EnvironmentsApiService) GetEnvironmentLogs(ctx _context.Context, programId string, environmentId string, days int32, xGwImsOrgId string, authorization string, xApiKey string, localVarOptionals *GetEnvironmentLogsOpts) (EnvironmentLogs, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EnvironmentLogs
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/program/{programId}/environment/{environmentId}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", _neturl.QueryEscape(parameterToString(programId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"environmentId"+"}", _neturl.QueryEscape(parameterToString(environmentId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Service.IsSet() {
		t:=localVarOptionals.Service.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("service", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("service", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		t:=localVarOptionals.Name.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("days", parameterToString(days, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-gw-ims-org-id"] = parameterToString(xGwImsOrgId, "")
	localVarHeaderParams["Authorization"] = parameterToString(authorization, "")
	localVarHeaderParams["x-api-key"] = parameterToString(xApiKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetEnvironmentsOpts Optional parameters for the method 'GetEnvironments'
type GetEnvironmentsOpts struct {
    Type_ optional.String
}

/*
GetEnvironments List Environments
Lists all environments in an program
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param programId Identifier of the program
 * @param xGwImsOrgId IMS organization ID that the request is being made under.
 * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param optional nil or *GetEnvironmentsOpts - Optional Parameters:
 * @param "Type_" (optional.String) -  Type of the environment
@return EnvironmentList
*/
func (a *EnvironmentsApiService) GetEnvironments(ctx _context.Context, programId string, xGwImsOrgId string, authorization string, xApiKey string, localVarOptionals *GetEnvironmentsOpts) (EnvironmentList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EnvironmentList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/program/{programId}/environments"
	localVarPath = strings.Replace(localVarPath, "{"+"programId"+"}", _neturl.QueryEscape(parameterToString(programId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-gw-ims-org-id"] = parameterToString(xGwImsOrgId, "")
	localVarHeaderParams["Authorization"] = parameterToString(authorization, "")
	localVarHeaderParams["x-api-key"] = parameterToString(xApiKey, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
