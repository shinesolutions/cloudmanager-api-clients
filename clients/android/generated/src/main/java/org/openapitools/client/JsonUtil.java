/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("BadRequestError".equalsIgnoreCase(className)) {
      return new TypeToken<List<BadRequestError>>(){}.getType();
    }
    
    if ("BranchList".equalsIgnoreCase(className)) {
      return new TypeToken<List<BranchList>>(){}.getType();
    }
    
    if ("BranchListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<BranchListEmbedded>>(){}.getType();
    }
    
    if ("EmbeddedProgram".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmbeddedProgram>>(){}.getType();
    }
    
    if ("Environment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Environment>>(){}.getType();
    }
    
    if ("EnvironmentLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentLinks>>(){}.getType();
    }
    
    if ("EnvironmentList".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentList>>(){}.getType();
    }
    
    if ("EnvironmentListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentListEmbedded>>(){}.getType();
    }
    
    if ("EnvironmentLog".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentLog>>(){}.getType();
    }
    
    if ("EnvironmentLogLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentLogLinks>>(){}.getType();
    }
    
    if ("EnvironmentLogs".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentLogs>>(){}.getType();
    }
    
    if ("EnvironmentLogsEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentLogsEmbedded>>(){}.getType();
    }
    
    if ("EnvironmentLogsLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<EnvironmentLogsLinks>>(){}.getType();
    }
    
    if ("HalLink".equalsIgnoreCase(className)) {
      return new TypeToken<List<HalLink>>(){}.getType();
    }
    
    if ("InvalidParameter".equalsIgnoreCase(className)) {
      return new TypeToken<List<InvalidParameter>>(){}.getType();
    }
    
    if ("Metric".equalsIgnoreCase(className)) {
      return new TypeToken<List<Metric>>(){}.getType();
    }
    
    if ("MissingParameter".equalsIgnoreCase(className)) {
      return new TypeToken<List<MissingParameter>>(){}.getType();
    }
    
    if ("Pipeline".equalsIgnoreCase(className)) {
      return new TypeToken<List<Pipeline>>(){}.getType();
    }
    
    if ("PipelineExecution".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecution>>(){}.getType();
    }
    
    if ("PipelineExecutionEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionEmbedded>>(){}.getType();
    }
    
    if ("PipelineExecutionLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionLinks>>(){}.getType();
    }
    
    if ("PipelineExecutionListRepresentation".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionListRepresentation>>(){}.getType();
    }
    
    if ("PipelineExecutionListRepresentationEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionListRepresentationEmbedded>>(){}.getType();
    }
    
    if ("PipelineExecutionListRepresentationLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionListRepresentationLinks>>(){}.getType();
    }
    
    if ("PipelineExecutionStepState".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionStepState>>(){}.getType();
    }
    
    if ("PipelineExecutionStepStateLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineExecutionStepStateLinks>>(){}.getType();
    }
    
    if ("PipelineLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineLinks>>(){}.getType();
    }
    
    if ("PipelineList".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineList>>(){}.getType();
    }
    
    if ("PipelineListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineListEmbedded>>(){}.getType();
    }
    
    if ("PipelinePhase".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelinePhase>>(){}.getType();
    }
    
    if ("PipelineStepMetrics".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineStepMetrics>>(){}.getType();
    }
    
    if ("Program".equalsIgnoreCase(className)) {
      return new TypeToken<List<Program>>(){}.getType();
    }
    
    if ("ProgramLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramLinks>>(){}.getType();
    }
    
    if ("ProgramList".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramList>>(){}.getType();
    }
    
    if ("ProgramListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramListEmbedded>>(){}.getType();
    }
    
    if ("ProgramListLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProgramListLinks>>(){}.getType();
    }
    
    if ("Repository".equalsIgnoreCase(className)) {
      return new TypeToken<List<Repository>>(){}.getType();
    }
    
    if ("RepositoryBranch".equalsIgnoreCase(className)) {
      return new TypeToken<List<RepositoryBranch>>(){}.getType();
    }
    
    if ("RepositoryBranchLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<RepositoryBranchLinks>>(){}.getType();
    }
    
    if ("RepositoryLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<RepositoryLinks>>(){}.getType();
    }
    
    if ("RepositoryList".equalsIgnoreCase(className)) {
      return new TypeToken<List<RepositoryList>>(){}.getType();
    }
    
    if ("RepositoryListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<RepositoryListEmbedded>>(){}.getType();
    }
    
    if ("RequestedPageDetails".equalsIgnoreCase(className)) {
      return new TypeToken<List<RequestedPageDetails>>(){}.getType();
    }
    
    if ("Variable".equalsIgnoreCase(className)) {
      return new TypeToken<List<Variable>>(){}.getType();
    }
    
    if ("VariableList".equalsIgnoreCase(className)) {
      return new TypeToken<List<VariableList>>(){}.getType();
    }
    
    if ("VariableListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<List<VariableListEmbedded>>(){}.getType();
    }
    
    if ("VariableListLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<VariableListLinks>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("BadRequestError".equalsIgnoreCase(className)) {
      return new TypeToken<BadRequestError>(){}.getType();
    }
    
    if ("BranchList".equalsIgnoreCase(className)) {
      return new TypeToken<BranchList>(){}.getType();
    }
    
    if ("BranchListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<BranchListEmbedded>(){}.getType();
    }
    
    if ("EmbeddedProgram".equalsIgnoreCase(className)) {
      return new TypeToken<EmbeddedProgram>(){}.getType();
    }
    
    if ("Environment".equalsIgnoreCase(className)) {
      return new TypeToken<Environment>(){}.getType();
    }
    
    if ("EnvironmentLinks".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentLinks>(){}.getType();
    }
    
    if ("EnvironmentList".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentList>(){}.getType();
    }
    
    if ("EnvironmentListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentListEmbedded>(){}.getType();
    }
    
    if ("EnvironmentLog".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentLog>(){}.getType();
    }
    
    if ("EnvironmentLogLinks".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentLogLinks>(){}.getType();
    }
    
    if ("EnvironmentLogs".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentLogs>(){}.getType();
    }
    
    if ("EnvironmentLogsEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentLogsEmbedded>(){}.getType();
    }
    
    if ("EnvironmentLogsLinks".equalsIgnoreCase(className)) {
      return new TypeToken<EnvironmentLogsLinks>(){}.getType();
    }
    
    if ("HalLink".equalsIgnoreCase(className)) {
      return new TypeToken<HalLink>(){}.getType();
    }
    
    if ("InvalidParameter".equalsIgnoreCase(className)) {
      return new TypeToken<InvalidParameter>(){}.getType();
    }
    
    if ("Metric".equalsIgnoreCase(className)) {
      return new TypeToken<Metric>(){}.getType();
    }
    
    if ("MissingParameter".equalsIgnoreCase(className)) {
      return new TypeToken<MissingParameter>(){}.getType();
    }
    
    if ("Pipeline".equalsIgnoreCase(className)) {
      return new TypeToken<Pipeline>(){}.getType();
    }
    
    if ("PipelineExecution".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecution>(){}.getType();
    }
    
    if ("PipelineExecutionEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionEmbedded>(){}.getType();
    }
    
    if ("PipelineExecutionLinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionLinks>(){}.getType();
    }
    
    if ("PipelineExecutionListRepresentation".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionListRepresentation>(){}.getType();
    }
    
    if ("PipelineExecutionListRepresentationEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionListRepresentationEmbedded>(){}.getType();
    }
    
    if ("PipelineExecutionListRepresentationLinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionListRepresentationLinks>(){}.getType();
    }
    
    if ("PipelineExecutionStepState".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionStepState>(){}.getType();
    }
    
    if ("PipelineExecutionStepStateLinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineExecutionStepStateLinks>(){}.getType();
    }
    
    if ("PipelineLinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineLinks>(){}.getType();
    }
    
    if ("PipelineList".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineList>(){}.getType();
    }
    
    if ("PipelineListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineListEmbedded>(){}.getType();
    }
    
    if ("PipelinePhase".equalsIgnoreCase(className)) {
      return new TypeToken<PipelinePhase>(){}.getType();
    }
    
    if ("PipelineStepMetrics".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineStepMetrics>(){}.getType();
    }
    
    if ("Program".equalsIgnoreCase(className)) {
      return new TypeToken<Program>(){}.getType();
    }
    
    if ("ProgramLinks".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramLinks>(){}.getType();
    }
    
    if ("ProgramList".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramList>(){}.getType();
    }
    
    if ("ProgramListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramListEmbedded>(){}.getType();
    }
    
    if ("ProgramListLinks".equalsIgnoreCase(className)) {
      return new TypeToken<ProgramListLinks>(){}.getType();
    }
    
    if ("Repository".equalsIgnoreCase(className)) {
      return new TypeToken<Repository>(){}.getType();
    }
    
    if ("RepositoryBranch".equalsIgnoreCase(className)) {
      return new TypeToken<RepositoryBranch>(){}.getType();
    }
    
    if ("RepositoryBranchLinks".equalsIgnoreCase(className)) {
      return new TypeToken<RepositoryBranchLinks>(){}.getType();
    }
    
    if ("RepositoryLinks".equalsIgnoreCase(className)) {
      return new TypeToken<RepositoryLinks>(){}.getType();
    }
    
    if ("RepositoryList".equalsIgnoreCase(className)) {
      return new TypeToken<RepositoryList>(){}.getType();
    }
    
    if ("RepositoryListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<RepositoryListEmbedded>(){}.getType();
    }
    
    if ("RequestedPageDetails".equalsIgnoreCase(className)) {
      return new TypeToken<RequestedPageDetails>(){}.getType();
    }
    
    if ("Variable".equalsIgnoreCase(className)) {
      return new TypeToken<Variable>(){}.getType();
    }
    
    if ("VariableList".equalsIgnoreCase(className)) {
      return new TypeToken<VariableList>(){}.getType();
    }
    
    if ("VariableListEmbedded".equalsIgnoreCase(className)) {
      return new TypeToken<VariableListEmbedded>(){}.getType();
    }
    
    if ("VariableListLinks".equalsIgnoreCase(className)) {
      return new TypeToken<VariableListLinks>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
