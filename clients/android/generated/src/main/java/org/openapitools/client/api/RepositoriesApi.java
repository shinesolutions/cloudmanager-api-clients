/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Repository;
import org.openapitools.client.model.RepositoryList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class RepositoriesApi {
  String basePath = "https://cloudmanager.adobe.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Lists Repositories
  * Lists all Repositories in an program
   * @param programId Identifier of the program
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @return RepositoryList
  */
  public RepositoryList getRepositories (String programId, String xGwImsOrgId, String authorization, String xApiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'programId' when calling getRepositories"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getRepositories"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getRepositories"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getRepositories"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/repositories".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RepositoryList) ApiInvoker.deserialize(localVarResponse, "", RepositoryList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Lists Repositories
   * Lists all Repositories in an program
   * @param programId Identifier of the program   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  */
  public void getRepositories (String programId, String xGwImsOrgId, String authorization, String xApiKey, final Response.Listener<RepositoryList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'programId' when calling getRepositories"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getRepositories"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getRepositories"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getRepositories",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getRepositories"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/repositories".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RepositoryList) ApiInvoker.deserialize(localVarResponse,  "", RepositoryList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Repository
  * Returns an repository by its id
   * @param programId Identifier of the program
   * @param repositoryId Identifier of the repository
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @return Repository
  */
  public Repository getRepository (String programId, String repositoryId, String xGwImsOrgId, String authorization, String xApiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'programId' when calling getRepository"));
    }
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'repositoryId' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'repositoryId' when calling getRepository"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getRepository"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getRepository"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getRepository"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/repository/{repositoryId}".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "repositoryId" + "\\}", apiInvoker.escapeString(repositoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Repository) ApiInvoker.deserialize(localVarResponse, "", Repository.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Repository
   * Returns an repository by its id
   * @param programId Identifier of the program   * @param repositoryId Identifier of the repository   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  */
  public void getRepository (String programId, String repositoryId, String xGwImsOrgId, String authorization, String xApiKey, final Response.Listener<Repository> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'programId' when calling getRepository"));
    }
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'repositoryId' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'repositoryId' when calling getRepository"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getRepository"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getRepository"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getRepository",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getRepository"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/repository/{repositoryId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "repositoryId" + "\\}", apiInvoker.escapeString(repositoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Repository) ApiInvoker.deserialize(localVarResponse,  "", Repository.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
