/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.PipelineExecution;
import org.openapitools.client.model.PipelineExecutionListRepresentation;
import org.openapitools.client.model.PipelineExecutionStepState;
import org.openapitools.client.model.PipelineStepMetrics;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PipelineExecutionApi {
  String basePath = "https://cloudmanager.adobe.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Advance
  * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   * @param body Input for advance. See documentation for details.
   * @return void
  */
  public void advancePipelineExecution (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'programId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'executionId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'stepId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'authorization' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'contentType' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'body' when calling advancePipelineExecution"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Advance
   * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param executionId Identifier of the execution   * @param phaseId Identifier of the phase   * @param stepId Identifier of the step   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io   * @param contentType Must always be application/json   * @param body Input for advance. See documentation for details.
  */
  public void advancePipelineExecution (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'programId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'executionId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'stepId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'authorization' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'contentType' when calling advancePipelineExecution"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling advancePipelineExecution",
        new ApiException(400, "Missing the required parameter 'body' when calling advancePipelineExecution"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel
  * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   * @param body Input for advance. See documentation for details.
   * @return void
  */
  public void cancelPipelineExecutionStep (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'programId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'executionId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'stepId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'authorization' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'contentType' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'body' when calling cancelPipelineExecutionStep"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel
   * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param executionId Identifier of the execution   * @param phaseId Identifier of the phase   * @param stepId Identifier of the step   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io   * @param contentType Must always be application/json   * @param body Input for advance. See documentation for details.
  */
  public void cancelPipelineExecutionStep (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'programId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'executionId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'stepId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'authorization' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'contentType' when calling cancelPipelineExecutionStep"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling cancelPipelineExecutionStep",
        new ApiException(400, "Missing the required parameter 'body' when calling cancelPipelineExecutionStep"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get current pipeline execution
  * Returns current pipeline execution if any.
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @return PipelineExecution
  */
  public PipelineExecution getCurrentExecution (String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'programId' when calling getCurrentExecution"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getCurrentExecution"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getCurrentExecution"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getCurrentExecution"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getCurrentExecution"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineExecution) ApiInvoker.deserialize(localVarResponse, "", PipelineExecution.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get current pipeline execution
   * Returns current pipeline execution if any.
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  */
  public void getCurrentExecution (String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final Response.Listener<PipelineExecution> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'programId' when calling getCurrentExecution"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getCurrentExecution"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getCurrentExecution"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getCurrentExecution"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getCurrentExecution",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getCurrentExecution"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineExecution) ApiInvoker.deserialize(localVarResponse,  "", PipelineExecution.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get pipeline execution
  * Returns a pipeline execution by id
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @return PipelineExecution
  */
  public PipelineExecution getExecution (String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'programId' when calling getExecution"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getExecution"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'executionId' when calling getExecution"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getExecution"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getExecution"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getExecution"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineExecution) ApiInvoker.deserialize(localVarResponse, "", PipelineExecution.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get pipeline execution
   * Returns a pipeline execution by id
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param executionId Identifier of the execution   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  */
  public void getExecution (String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey, final Response.Listener<PipelineExecution> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'programId' when calling getExecution"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getExecution"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'executionId' when calling getExecution"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getExecution"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getExecution"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getExecution",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getExecution"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineExecution) ApiInvoker.deserialize(localVarResponse,  "", PipelineExecution.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Executions
  * Returns the history of pipeline executions in a newest to oldest order
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param start Pagination start parameter
   * @param limit Pagination limit parameter
   * @return PipelineExecutionListRepresentation
  */
  public PipelineExecutionListRepresentation getExecutions (String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'programId' when calling getExecutions"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getExecutions"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getExecutions"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getExecutions"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getExecutions"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/executions".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineExecutionListRepresentation) ApiInvoker.deserialize(localVarResponse, "", PipelineExecutionListRepresentation.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Executions
   * Returns the history of pipeline executions in a newest to oldest order
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io   * @param start Pagination start parameter   * @param limit Pagination limit parameter
  */
  public void getExecutions (String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit, final Response.Listener<PipelineExecutionListRepresentation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'programId' when calling getExecutions"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getExecutions"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getExecutions"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getExecutions"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getExecutions",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getExecutions"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/executions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));

    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineExecutionListRepresentation) ApiInvoker.deserialize(localVarResponse,  "", PipelineExecutionListRepresentation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get logs
  * Get the logs associated with a step.
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param file Identifier of the log file
   * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
   * @return void
  */
  public void getStepLogs (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'programId' when calling getStepLogs"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getStepLogs"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'executionId' when calling getStepLogs"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling getStepLogs"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'stepId' when calling getStepLogs"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getStepLogs"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getStepLogs"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getStepLogs"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "file", file));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get logs
   * Get the logs associated with a step.
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param executionId Identifier of the execution   * @param phaseId Identifier of the phase   * @param stepId Identifier of the step   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io   * @param file Identifier of the log file   * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
  */
  public void getStepLogs (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'programId' when calling getStepLogs"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling getStepLogs"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'executionId' when calling getStepLogs"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling getStepLogs"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'stepId' when calling getStepLogs"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling getStepLogs"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'authorization' when calling getStepLogs"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling getStepLogs",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling getStepLogs"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "file", file));

    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Start the pipeline
  * Starts the Pipeline. This works only if the pipeline is not already started.
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   * @return void
  */
  public void startPipeline (String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'programId' when calling startPipeline"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling startPipeline"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling startPipeline"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'authorization' when calling startPipeline"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling startPipeline"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'contentType' when calling startPipeline"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Start the pipeline
   * Starts the Pipeline. This works only if the pipeline is not already started.
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io   * @param contentType Must always be application/json
  */
  public void startPipeline (String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'programId' when calling startPipeline"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling startPipeline"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling startPipeline"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'authorization' when calling startPipeline"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling startPipeline"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling startPipeline",
        new ApiException(400, "Missing the required parameter 'contentType' when calling startPipeline"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get step metrics
  * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @return PipelineStepMetrics
  */
  public PipelineStepMetrics stepMetric (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'programId' when calling stepMetric"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling stepMetric"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'executionId' when calling stepMetric"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling stepMetric"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'stepId' when calling stepMetric"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling stepMetric"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'authorization' when calling stepMetric"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling stepMetric"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineStepMetrics) ApiInvoker.deserialize(localVarResponse, "", PipelineStepMetrics.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get step metrics
   * 
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param executionId Identifier of the execution   * @param phaseId Identifier of the phase   * @param stepId Identifier of the step   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  */
  public void stepMetric (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final Response.Listener<PipelineStepMetrics> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'programId' when calling stepMetric"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling stepMetric"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'executionId' when calling stepMetric"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling stepMetric"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'stepId' when calling stepMetric"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling stepMetric"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'authorization' when calling stepMetric"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling stepMetric",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling stepMetric"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineStepMetrics) ApiInvoker.deserialize(localVarResponse,  "", PipelineStepMetrics.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get step state
  * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @return PipelineExecutionStepState
  */
  public PipelineExecutionStepState stepState (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'programId' when calling stepState"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling stepState"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'executionId' when calling stepState"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling stepState"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'stepId' when calling stepState"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling stepState"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling stepState",
        new ApiException(400, "Missing the required parameter 'authorization' when calling stepState"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling stepState",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling stepState"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}".replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineExecutionStepState) ApiInvoker.deserialize(localVarResponse, "", PipelineExecutionStepState.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get step state
   * 
   * @param programId Identifier of the program.   * @param pipelineId Identifier of the pipeline   * @param executionId Identifier of the execution   * @param phaseId Identifier of the phase   * @param stepId Identifier of the step   * @param xGwImsOrgId IMS organization ID that the request is being made under.   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  */
  public void stepState (String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final Response.Listener<PipelineExecutionStepState> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'programId' is set
    if (programId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'programId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'programId' when calling stepState"));
    }
    // verify the required parameter 'pipelineId' is set
    if (pipelineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipelineId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'pipelineId' when calling stepState"));
    }
    // verify the required parameter 'executionId' is set
    if (executionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'executionId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'executionId' when calling stepState"));
    }
    // verify the required parameter 'phaseId' is set
    if (phaseId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phaseId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'phaseId' when calling stepState"));
    }
    // verify the required parameter 'stepId' is set
    if (stepId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stepId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'stepId' when calling stepState"));
    }
    // verify the required parameter 'xGwImsOrgId' is set
    if (xGwImsOrgId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xGwImsOrgId' when calling stepState",
        new ApiException(400, "Missing the required parameter 'xGwImsOrgId' when calling stepState"));
    }
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling stepState",
        new ApiException(400, "Missing the required parameter 'authorization' when calling stepState"));
    }
    // verify the required parameter 'xApiKey' is set
    if (xApiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xApiKey' when calling stepState",
        new ApiException(400, "Missing the required parameter 'xApiKey' when calling stepState"));
    }

    // create path and map variables
    String path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "programId" + "\\}", apiInvoker.escapeString(programId.toString())).replaceAll("\\{" + "pipelineId" + "\\}", apiInvoker.escapeString(pipelineId.toString())).replaceAll("\\{" + "executionId" + "\\}", apiInvoker.escapeString(executionId.toString())).replaceAll("\\{" + "phaseId" + "\\}", apiInvoker.escapeString(phaseId.toString())).replaceAll("\\{" + "stepId" + "\\}", apiInvoker.escapeString(stepId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("x-gw-ims-org-id", ApiInvoker.parameterToString(xGwImsOrgId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("x-api-key", ApiInvoker.parameterToString(xApiKey));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineExecutionStepState) ApiInvoker.deserialize(localVarResponse,  "", PipelineExecutionStepState.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
