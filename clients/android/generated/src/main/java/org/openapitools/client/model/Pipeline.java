/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import java.util.Date;
import org.openapitools.client.model.PipelineLinks;
import org.openapitools.client.model.PipelinePhase;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Describes a __CI/CD Pipeline__
 **/
@ApiModel(description = "Describes a __CI/CD Pipeline__")
public class Pipeline {
  
  @SerializedName("id")
  private String id = null;
  @SerializedName("programId")
  private String programId = null;
  @SerializedName("name")
  private String name = null;
  public enum TriggerEnum {
     ON_COMMIT,  MANUAL,  SCHEDULE, 
  };
  @SerializedName("trigger")
  private TriggerEnum trigger = null;
  public enum StatusEnum {
     IDLE,  BUSY,  WAITING, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  @SerializedName("createdAt")
  private Date createdAt = null;
  @SerializedName("updatedAt")
  private Date updatedAt = null;
  @SerializedName("lastStartedAt")
  private Date lastStartedAt = null;
  @SerializedName("lastFinishedAt")
  private Date lastFinishedAt = null;
  @SerializedName("phases")
  private List<PipelinePhase> phases = null;
  @SerializedName("_links")
  private PipelineLinks links = null;

  /**
   * Identifier of the pipeline. Unique within the program.
   **/
  @ApiModelProperty(value = "Identifier of the pipeline. Unique within the program.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Identifier of the program. Unique within the space.
   **/
  @ApiModelProperty(value = "Identifier of the program. Unique within the space.")
  public String getProgramId() {
    return programId;
  }
  public void setProgramId(String programId) {
    this.programId = programId;
  }

  /**
   * Name of the pipeline
   **/
  @ApiModelProperty(required = true, value = "Name of the pipeline")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
   **/
  @ApiModelProperty(value = "How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}")
  public TriggerEnum getTrigger() {
    return trigger;
  }
  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }

  /**
   * Pipeline status
   **/
  @ApiModelProperty(value = "Pipeline status")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   * Create date
   **/
  @ApiModelProperty(value = "Create date")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * Update date
   **/
  @ApiModelProperty(value = "Update date")
  public Date getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * Last pipeline execution start
   **/
  @ApiModelProperty(value = "Last pipeline execution start")
  public Date getLastStartedAt() {
    return lastStartedAt;
  }
  public void setLastStartedAt(Date lastStartedAt) {
    this.lastStartedAt = lastStartedAt;
  }

  /**
   * Last pipeline execution end
   **/
  @ApiModelProperty(value = "Last pipeline execution end")
  public Date getLastFinishedAt() {
    return lastFinishedAt;
  }
  public void setLastFinishedAt(Date lastFinishedAt) {
    this.lastFinishedAt = lastFinishedAt;
  }

  /**
   * Pipeline phases in execution order
   **/
  @ApiModelProperty(required = true, value = "Pipeline phases in execution order")
  public List<PipelinePhase> getPhases() {
    return phases;
  }
  public void setPhases(List<PipelinePhase> phases) {
    this.phases = phases;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public PipelineLinks getLinks() {
    return links;
  }
  public void setLinks(PipelineLinks links) {
    this.links = links;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pipeline pipeline = (Pipeline) o;
    return (this.id == null ? pipeline.id == null : this.id.equals(pipeline.id)) &&
        (this.programId == null ? pipeline.programId == null : this.programId.equals(pipeline.programId)) &&
        (this.name == null ? pipeline.name == null : this.name.equals(pipeline.name)) &&
        (this.trigger == null ? pipeline.trigger == null : this.trigger.equals(pipeline.trigger)) &&
        (this.status == null ? pipeline.status == null : this.status.equals(pipeline.status)) &&
        (this.createdAt == null ? pipeline.createdAt == null : this.createdAt.equals(pipeline.createdAt)) &&
        (this.updatedAt == null ? pipeline.updatedAt == null : this.updatedAt.equals(pipeline.updatedAt)) &&
        (this.lastStartedAt == null ? pipeline.lastStartedAt == null : this.lastStartedAt.equals(pipeline.lastStartedAt)) &&
        (this.lastFinishedAt == null ? pipeline.lastFinishedAt == null : this.lastFinishedAt.equals(pipeline.lastFinishedAt)) &&
        (this.phases == null ? pipeline.phases == null : this.phases.equals(pipeline.phases)) &&
        (this.links == null ? pipeline.links == null : this.links.equals(pipeline.links));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.programId == null ? 0: this.programId.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.trigger == null ? 0: this.trigger.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    result = 31 * result + (this.lastStartedAt == null ? 0: this.lastStartedAt.hashCode());
    result = 31 * result + (this.lastFinishedAt == null ? 0: this.lastFinishedAt.hashCode());
    result = 31 * result + (this.phases == null ? 0: this.phases.hashCode());
    result = 31 * result + (this.links == null ? 0: this.links.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pipeline {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  programId: ").append(programId).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  trigger: ").append(trigger).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("  lastStartedAt: ").append(lastStartedAt).append("\n");
    sb.append("  lastFinishedAt: ").append(lastFinishedAt).append("\n");
    sb.append("  phases: ").append(phases).append("\n");
    sb.append("  links: ").append(links).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
