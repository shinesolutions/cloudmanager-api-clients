/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.Date;
import org.openapitools.client.model.PipelineExecutionEmbedded;
import org.openapitools.client.model.PipelineExecutionLinks;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Wraps a pipeline execution
 **/
@ApiModel(description = "Wraps a pipeline execution")
public class PipelineExecution {
  
  @SerializedName("id")
  private String id = null;
  @SerializedName("programId")
  private String programId = null;
  @SerializedName("pipelineId")
  private String pipelineId = null;
  @SerializedName("artifactsVersion")
  private String artifactsVersion = null;
  @SerializedName("user")
  private String user = null;
  public enum StatusEnum {
     NOT_STARTED,  RUNNING,  CANCELLING,  CANCELLED,  FINISHED,  ERROR,  FAILED, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  public enum TriggerEnum {
     ON_COMMIT,  MANUAL,  SCHEDULE,  PUSH_UPGRADES, 
  };
  @SerializedName("trigger")
  private TriggerEnum trigger = null;
  @SerializedName("createdAt")
  private Date createdAt = null;
  @SerializedName("updatedAt")
  private Date updatedAt = null;
  @SerializedName("finishedAt")
  private Date finishedAt = null;
  @SerializedName("_embedded")
  private PipelineExecutionEmbedded embedded = null;
  @SerializedName("_links")
  private PipelineExecutionLinks links = null;

  /**
   * Pipeline execution identifier
   **/
  @ApiModelProperty(value = "Pipeline execution identifier")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Identifier of the program. Unique within the space.
   **/
  @ApiModelProperty(value = "Identifier of the program. Unique within the space.")
  public String getProgramId() {
    return programId;
  }
  public void setProgramId(String programId) {
    this.programId = programId;
  }

  /**
   * Identifier of the pipeline. Unique within the space.
   **/
  @ApiModelProperty(value = "Identifier of the pipeline. Unique within the space.")
  public String getPipelineId() {
    return pipelineId;
  }
  public void setPipelineId(String pipelineId) {
    this.pipelineId = pipelineId;
  }

  /**
   * Version of the artifacts generated during this execution
   **/
  @ApiModelProperty(value = "Version of the artifacts generated during this execution")
  public String getArtifactsVersion() {
    return artifactsVersion;
  }
  public void setArtifactsVersion(String artifactsVersion) {
    this.artifactsVersion = artifactsVersion;
  }

  /**
   * AdobeID who started the pipeline. Empty for auto triggered builds
   **/
  @ApiModelProperty(value = "AdobeID who started the pipeline. Empty for auto triggered builds")
  public String getUser() {
    return user;
  }
  public void setUser(String user) {
    this.user = user;
  }

  /**
   * Status of the execution
   **/
  @ApiModelProperty(value = "Status of the execution")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   * How the execution was triggered.
   **/
  @ApiModelProperty(value = "How the execution was triggered.")
  public TriggerEnum getTrigger() {
    return trigger;
  }
  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }

  /**
   * Start time
   **/
  @ApiModelProperty(value = "Start time")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * Date of last status change
   **/
  @ApiModelProperty(value = "Date of last status change")
  public Date getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * Date the execution reached a final state
   **/
  @ApiModelProperty(value = "Date the execution reached a final state")
  public Date getFinishedAt() {
    return finishedAt;
  }
  public void setFinishedAt(Date finishedAt) {
    this.finishedAt = finishedAt;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public PipelineExecutionEmbedded getEmbedded() {
    return embedded;
  }
  public void setEmbedded(PipelineExecutionEmbedded embedded) {
    this.embedded = embedded;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public PipelineExecutionLinks getLinks() {
    return links;
  }
  public void setLinks(PipelineExecutionLinks links) {
    this.links = links;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineExecution pipelineExecution = (PipelineExecution) o;
    return (this.id == null ? pipelineExecution.id == null : this.id.equals(pipelineExecution.id)) &&
        (this.programId == null ? pipelineExecution.programId == null : this.programId.equals(pipelineExecution.programId)) &&
        (this.pipelineId == null ? pipelineExecution.pipelineId == null : this.pipelineId.equals(pipelineExecution.pipelineId)) &&
        (this.artifactsVersion == null ? pipelineExecution.artifactsVersion == null : this.artifactsVersion.equals(pipelineExecution.artifactsVersion)) &&
        (this.user == null ? pipelineExecution.user == null : this.user.equals(pipelineExecution.user)) &&
        (this.status == null ? pipelineExecution.status == null : this.status.equals(pipelineExecution.status)) &&
        (this.trigger == null ? pipelineExecution.trigger == null : this.trigger.equals(pipelineExecution.trigger)) &&
        (this.createdAt == null ? pipelineExecution.createdAt == null : this.createdAt.equals(pipelineExecution.createdAt)) &&
        (this.updatedAt == null ? pipelineExecution.updatedAt == null : this.updatedAt.equals(pipelineExecution.updatedAt)) &&
        (this.finishedAt == null ? pipelineExecution.finishedAt == null : this.finishedAt.equals(pipelineExecution.finishedAt)) &&
        (this.embedded == null ? pipelineExecution.embedded == null : this.embedded.equals(pipelineExecution.embedded)) &&
        (this.links == null ? pipelineExecution.links == null : this.links.equals(pipelineExecution.links));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.programId == null ? 0: this.programId.hashCode());
    result = 31 * result + (this.pipelineId == null ? 0: this.pipelineId.hashCode());
    result = 31 * result + (this.artifactsVersion == null ? 0: this.artifactsVersion.hashCode());
    result = 31 * result + (this.user == null ? 0: this.user.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.trigger == null ? 0: this.trigger.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    result = 31 * result + (this.finishedAt == null ? 0: this.finishedAt.hashCode());
    result = 31 * result + (this.embedded == null ? 0: this.embedded.hashCode());
    result = 31 * result + (this.links == null ? 0: this.links.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineExecution {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  programId: ").append(programId).append("\n");
    sb.append("  pipelineId: ").append(pipelineId).append("\n");
    sb.append("  artifactsVersion: ").append(artifactsVersion).append("\n");
    sb.append("  user: ").append(user).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  trigger: ").append(trigger).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("  finishedAt: ").append(finishedAt).append("\n");
    sb.append("  embedded: ").append(embedded).append("\n");
    sb.append("  links: ").append(links).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
