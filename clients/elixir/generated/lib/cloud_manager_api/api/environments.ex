# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule CloudManagerAPI.Api.Environments do
  @moduledoc """
  API calls for all endpoints tagged `Environments`.
  """

  alias CloudManagerAPI.Connection
  import CloudManagerAPI.RequestBuilder


  @doc """
  DeleteEnvironment
  Delete environment

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the application
  - environment_id (String.t): Identifier of the environment
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.Environment{}} on success
  {:error, info} on failure
  """
  @spec delete_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.Environment.t} | {:error, Tesla.Env.t}
  def delete_environment(connection, program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/program/#{program_id}/environment/#{environment_id}")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %CloudManagerAPI.Model.Environment{}},
      { 400, %CloudManagerAPI.Model.BadRequestError{}},
      { 404, false}
    ])
  end

  @doc """
  Download Logs
  Download environment logs

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program
  - environment_id (String.t): Identifier of the environment
  - service (String.t): Name of service
  - name (String.t): Name of log
  - date (String.t): date for which log is required
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
    - :accept (String.t): Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec download_logs(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def download_logs(connection, program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, opts \\ []) do
    optional_params = %{
      :"Accept" => :headers
    }
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/environment/#{environment_id}/logs/download")
    |> add_param(:query, :"service", service)
    |> add_param(:query, :"name", name)
    |> add_param(:query, :"date", date)
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %CloudManagerAPI.Model.BadRequestError{}},
      { 404, false}
    ])
  end

  @doc """
  Get Environment
  Returns an environment by its id

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program
  - environment_id (String.t): Identifier of the environment
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.Environment{}} on success
  {:error, info} on failure
  """
  @spec get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.Environment.t} | {:error, Tesla.Env.t}
  def get_environment(connection, program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/environment/#{environment_id}")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.Environment{}}
    ])
  end

  @doc """
  Get Environment Logs
  List all logs available in environment

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program
  - environment_id (String.t): Identifier of the environment
  - days (integer()): number of days for which logs are required
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
    - :service ([String.t]): Names of services
    - :name ([String.t]): Names of log
  ## Returns

  {:ok, %CloudManagerAPI.Model.EnvironmentLogs{}} on success
  {:error, info} on failure
  """
  @spec get_environment_logs(Tesla.Env.client, String.t, String.t, integer(), String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.EnvironmentLogs.t} | {:error, Tesla.Env.t}
  def get_environment_logs(connection, program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, opts \\ []) do
    optional_params = %{
      :"service" => :query,
      :"name" => :query
    }
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/environment/#{environment_id}/logs")
    |> add_param(:query, :"days", days)
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.EnvironmentLogs{}},
      { 400, %CloudManagerAPI.Model.BadRequestError{}},
      { 404, false}
    ])
  end

  @doc """
  List Environments
  Lists all environments in an program

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
    - :type (String.t): Type of the environment
  ## Returns

  {:ok, %CloudManagerAPI.Model.EnvironmentList{}} on success
  {:error, info} on failure
  """
  @spec get_environments(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.EnvironmentList.t} | {:error, Tesla.Env.t}
  def get_environments(connection, program_id, x_gw_ims_org_id, authorization, x_api_key, opts \\ []) do
    optional_params = %{
      :"type" => :query
    }
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/environments")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.EnvironmentList{}},
      { 404, false}
    ])
  end
end
