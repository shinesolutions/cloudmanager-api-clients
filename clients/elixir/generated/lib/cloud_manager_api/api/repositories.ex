# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule CloudManagerAPI.Api.Repositories do
  @moduledoc """
  API calls for all endpoints tagged `Repositories`.
  """

  alias CloudManagerAPI.Connection
  import CloudManagerAPI.RequestBuilder


  @doc """
  Lists Repositories
  Lists all Repositories in an program

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.RepositoryList{}} on success
  {:error, info} on failure
  """
  @spec get_repositories(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.RepositoryList.t} | {:error, Tesla.Env.t}
  def get_repositories(connection, program_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/repositories")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.RepositoryList{}}
    ])
  end

  @doc """
  Get Repository
  Returns an repository by its id

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program
  - repository_id (String.t): Identifier of the repository
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.Repository{}} on success
  {:error, info} on failure
  """
  @spec get_repository(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.Repository.t} | {:error, Tesla.Env.t}
  def get_repository(connection, program_id, repository_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/repository/#{repository_id}")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.Repository{}}
    ])
  end
end
