# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule CloudManagerAPI.Api.PipelineExecution do
  @moduledoc """
  API calls for all endpoints tagged `PipelineExecution`.
  """

  alias CloudManagerAPI.Connection
  import CloudManagerAPI.RequestBuilder


  @doc """
  Advance
  Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - execution_id (String.t): Identifier of the execution
  - phase_id (String.t): Identifier of the phase
  - step_id (String.t): Identifier of the step
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - content_type (String.t): Must always be application/json
  - body (Map): Input for advance. See documentation for details.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec advance_pipeline_execution(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, Map, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def advance_pipeline_execution(connection, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution/#{execution_id}/phase/#{phase_id}/step/#{step_id}/advance")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_param(:headers, :"Content-Type", content_type)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 202, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Cancel
  Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - execution_id (String.t): Identifier of the execution
  - phase_id (String.t): Identifier of the phase
  - step_id (String.t): Identifier of the step
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - content_type (String.t): Must always be application/json
  - body (Map): Input for advance. See documentation for details.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec cancel_pipeline_execution_step(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, Map, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def cancel_pipeline_execution_step(connection, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution/#{execution_id}/phase/#{phase_id}/step/#{step_id}/cancel")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_param(:headers, :"Content-Type", content_type)
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 202, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get current pipeline execution
  Returns current pipeline execution if any.

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.PipelineExecution{}} on success
  {:error, info} on failure
  """
  @spec get_current_execution(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.PipelineExecution.t} | {:error, Tesla.Env.t}
  def get_current_execution(connection, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.PipelineExecution{}},
      { 404, false}
    ])
  end

  @doc """
  Get pipeline execution
  Returns a pipeline execution by id

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - execution_id (String.t): Identifier of the execution
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.PipelineExecution{}} on success
  {:error, info} on failure
  """
  @spec get_execution(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.PipelineExecution.t} | {:error, Tesla.Env.t}
  def get_execution(connection, program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution/#{execution_id}")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.PipelineExecution{}},
      { 404, false}
    ])
  end

  @doc """
  List Executions
  Returns the history of pipeline executions in a newest to oldest order

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
    - :start (String.t): Pagination start parameter
    - :limit (integer()): Pagination limit parameter
  ## Returns

  {:ok, %CloudManagerAPI.Model.PipelineExecutionListRepresentation{}} on success
  {:error, info} on failure
  """
  @spec get_executions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.PipelineExecutionListRepresentation.t} | {:error, Tesla.Env.t}
  def get_executions(connection, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/executions")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.PipelineExecutionListRepresentation{}},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get logs
  Get the logs associated with a step.

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - execution_id (String.t): Identifier of the execution
  - phase_id (String.t): Identifier of the phase
  - step_id (String.t): Identifier of the step
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
    - :file (String.t): Identifier of the log file
    - :accept (String.t): Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_step_logs(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_step_logs(connection, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts \\ []) do
    optional_params = %{
      :"file" => :query,
      :"Accept" => :headers
    }
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution/#{execution_id}/phase/#{phase_id}/step/#{step_id}/logs")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Start the pipeline
  Starts the Pipeline. This works only if the pipeline is not already started.

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - content_type (String.t): Must always be application/json
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec start_pipeline(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def start_pipeline(connection, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> add_param(:headers, :"Content-Type", content_type)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, false},
      { 400, false},
      { 404, false},
      { 412, false}
    ])
  end

  @doc """
  Get step metrics

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - execution_id (String.t): Identifier of the execution
  - phase_id (String.t): Identifier of the phase
  - step_id (String.t): Identifier of the step
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.PipelineStepMetrics{}} on success
  {:error, info} on failure
  """
  @spec step_metric(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.PipelineStepMetrics.t} | {:error, Tesla.Env.t}
  def step_metric(connection, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution/#{execution_id}/phase/#{phase_id}/step/#{step_id}/metrics")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.PipelineStepMetrics{}},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get step state

  ## Parameters

  - connection (CloudManagerAPI.Connection): Connection to server
  - program_id (String.t): Identifier of the program.
  - pipeline_id (String.t): Identifier of the pipeline
  - execution_id (String.t): Identifier of the execution
  - phase_id (String.t): Identifier of the phase
  - step_id (String.t): Identifier of the step
  - x_gw_ims_org_id (String.t): IMS organization ID that the request is being made under.
  - authorization (String.t): Bearer [token] - An access token for the technical account created through integration with Adobe IO
  - x_api_key (String.t): IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %CloudManagerAPI.Model.PipelineExecutionStepState{}} on success
  {:error, info} on failure
  """
  @spec step_state(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CloudManagerAPI.Model.PipelineExecutionStepState.t} | {:error, Tesla.Env.t}
  def step_state(connection, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/program/#{program_id}/pipeline/#{pipeline_id}/execution/#{execution_id}/phase/#{phase_id}/step/#{step_id}")
    |> add_param(:headers, :"x-gw-ims-org-id", x_gw_ims_org_id)
    |> add_param(:headers, :"Authorization", authorization)
    |> add_param(:headers, :"x-api-key", x_api_key)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %CloudManagerAPI.Model.PipelineExecutionStepState{}},
      { 403, false},
      { 404, false}
    ])
  end
end
