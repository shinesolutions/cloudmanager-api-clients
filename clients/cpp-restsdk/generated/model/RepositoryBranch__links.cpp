/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RepositoryBranch__links.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RepositoryBranch__links::RepositoryBranch__links()
{
    m_Http__ns_adobe_com_adobecloud_rel_programIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_repositoryIsSet = false;
}

RepositoryBranch__links::~RepositoryBranch__links()
{
}

void RepositoryBranch__links::validate()
{
    // TODO: implement validation
}

web::json::value RepositoryBranch__links::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Http__ns_adobe_com_adobecloud_rel_programIsSet)
    {
        val[utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/program")] = ModelBase::toJson(m_Http__ns_adobe_com_adobecloud_rel_program);
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_repositoryIsSet)
    {
        val[utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repository")] = ModelBase::toJson(m_Http__ns_adobe_com_adobecloud_rel_repository);
    }

    return val;
}

bool RepositoryBranch__links::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/program")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/program"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/program;
            ok &= ModelBase::fromJson(fieldValue, refVal_http://ns.adobe.com/adobecloud/rel/program);
            setHttpNsAdobeComAdobecloudRelProgram(refVal_http://ns.adobe.com/adobecloud/rel/program);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repository")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repository"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/repository;
            ok &= ModelBase::fromJson(fieldValue, refVal_http://ns.adobe.com/adobecloud/rel/repository);
            setHttpNsAdobeComAdobecloudRelRepository(refVal_http://ns.adobe.com/adobecloud/rel/repository);
        }
    }
    return ok;
}

void RepositoryBranch__links::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_programIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/program"), m_Http__ns_adobe_com_adobecloud_rel_program));
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_repositoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repository"), m_Http__ns_adobe_com_adobecloud_rel_repository));
    }
}

bool RepositoryBranch__links::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/program")))
    {
        std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/program;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/program")), refVal_http://ns.adobe.com/adobecloud/rel/program );
        setHttpNsAdobeComAdobecloudRelProgram(refVal_http://ns.adobe.com/adobecloud/rel/program);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repository")))
    {
        std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/repository;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repository")), refVal_http://ns.adobe.com/adobecloud/rel/repository );
        setHttpNsAdobeComAdobecloudRelRepository(refVal_http://ns.adobe.com/adobecloud/rel/repository);
    }
    return ok;
}

std::shared_ptr<HalLink> RepositoryBranch__links::getHttpNsAdobeComAdobecloudRelProgram() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_program;
}

void RepositoryBranch__links::setHttpNsAdobeComAdobecloudRelProgram(const std::shared_ptr<HalLink>& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_program = value;
    m_Http__ns_adobe_com_adobecloud_rel_programIsSet = true;
}

bool RepositoryBranch__links::httpNsAdobeComAdobecloudRelProgramIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_programIsSet;
}

void RepositoryBranch__links::unsetHttp__ns_adobe_com_adobecloud_rel_program()
{
    m_Http__ns_adobe_com_adobecloud_rel_programIsSet = false;
}
std::shared_ptr<HalLink> RepositoryBranch__links::getHttpNsAdobeComAdobecloudRelRepository() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_repository;
}

void RepositoryBranch__links::setHttpNsAdobeComAdobecloudRelRepository(const std::shared_ptr<HalLink>& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_repository = value;
    m_Http__ns_adobe_com_adobecloud_rel_repositoryIsSet = true;
}

bool RepositoryBranch__links::httpNsAdobeComAdobecloudRelRepositoryIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_repositoryIsSet;
}

void RepositoryBranch__links::unsetHttp__ns_adobe_com_adobecloud_rel_repository()
{
    m_Http__ns_adobe_com_adobecloud_rel_repositoryIsSet = false;
}
}
}
}
}


