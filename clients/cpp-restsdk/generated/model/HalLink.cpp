/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HalLink.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




HalLink::HalLink()
{
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Templated = false;
    m_TemplatedIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Deprecation = utility::conversions::to_string_t("");
    m_DeprecationIsSet = false;
    m_Profile = utility::conversions::to_string_t("");
    m_ProfileIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Hreflang = utility::conversions::to_string_t("");
    m_HreflangIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

HalLink::~HalLink()
{
}

void HalLink::validate()
{
    // TODO: implement validation
}

web::json::value HalLink::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_TemplatedIsSet)
    {
        val[utility::conversions::to_string_t("templated")] = ModelBase::toJson(m_Templated);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_DeprecationIsSet)
    {
        val[utility::conversions::to_string_t("deprecation")] = ModelBase::toJson(m_Deprecation);
    }
    if(m_ProfileIsSet)
    {
        val[utility::conversions::to_string_t("profile")] = ModelBase::toJson(m_Profile);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_HreflangIsSet)
    {
        val[utility::conversions::to_string_t("hreflang")] = ModelBase::toJson(m_Hreflang);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }

    return val;
}

bool HalLink::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templated"));
        if(!fieldValue.is_null())
        {
            bool refVal_templated;
            ok &= ModelBase::fromJson(fieldValue, refVal_templated);
            setTemplated(refVal_templated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deprecation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deprecation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deprecation;
            ok &= ModelBase::fromJson(fieldValue, refVal_deprecation);
            setDeprecation(refVal_deprecation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("profile")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("profile"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_profile;
            ok &= ModelBase::fromJson(fieldValue, refVal_profile);
            setProfile(refVal_profile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hreflang")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hreflang"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hreflang;
            ok &= ModelBase::fromJson(fieldValue, refVal_hreflang);
            setHreflang(refVal_hreflang);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    return ok;
}

void HalLink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_TemplatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templated"), m_Templated));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_DeprecationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecation"), m_Deprecation));
    }
    if(m_ProfileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("profile"), m_Profile));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_HreflangIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hreflang"), m_Hreflang));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
}

bool HalLink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templated")))
    {
        bool refVal_templated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templated")), refVal_templated );
        setTemplated(refVal_templated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecation")))
    {
        utility::string_t refVal_deprecation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecation")), refVal_deprecation );
        setDeprecation(refVal_deprecation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("profile")))
    {
        utility::string_t refVal_profile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("profile")), refVal_profile );
        setProfile(refVal_profile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hreflang")))
    {
        utility::string_t refVal_hreflang;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hreflang")), refVal_hreflang );
        setHreflang(refVal_hreflang);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    return ok;
}

utility::string_t HalLink::getHref() const
{
    return m_Href;
}

void HalLink::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool HalLink::hrefIsSet() const
{
    return m_HrefIsSet;
}

void HalLink::unsetHref()
{
    m_HrefIsSet = false;
}
bool HalLink::isTemplated() const
{
    return m_Templated;
}

void HalLink::setTemplated(bool value)
{
    m_Templated = value;
    m_TemplatedIsSet = true;
}

bool HalLink::templatedIsSet() const
{
    return m_TemplatedIsSet;
}

void HalLink::unsetTemplated()
{
    m_TemplatedIsSet = false;
}
utility::string_t HalLink::getType() const
{
    return m_Type;
}

void HalLink::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool HalLink::typeIsSet() const
{
    return m_TypeIsSet;
}

void HalLink::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t HalLink::getDeprecation() const
{
    return m_Deprecation;
}

void HalLink::setDeprecation(const utility::string_t& value)
{
    m_Deprecation = value;
    m_DeprecationIsSet = true;
}

bool HalLink::deprecationIsSet() const
{
    return m_DeprecationIsSet;
}

void HalLink::unsetDeprecation()
{
    m_DeprecationIsSet = false;
}
utility::string_t HalLink::getProfile() const
{
    return m_Profile;
}

void HalLink::setProfile(const utility::string_t& value)
{
    m_Profile = value;
    m_ProfileIsSet = true;
}

bool HalLink::profileIsSet() const
{
    return m_ProfileIsSet;
}

void HalLink::unsetProfile()
{
    m_ProfileIsSet = false;
}
utility::string_t HalLink::getTitle() const
{
    return m_Title;
}

void HalLink::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool HalLink::titleIsSet() const
{
    return m_TitleIsSet;
}

void HalLink::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t HalLink::getHreflang() const
{
    return m_Hreflang;
}

void HalLink::setHreflang(const utility::string_t& value)
{
    m_Hreflang = value;
    m_HreflangIsSet = true;
}

bool HalLink::hreflangIsSet() const
{
    return m_HreflangIsSet;
}

void HalLink::unsetHreflang()
{
    m_HreflangIsSet = false;
}
utility::string_t HalLink::getName() const
{
    return m_Name;
}

void HalLink::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool HalLink::nameIsSet() const
{
    return m_NameIsSet;
}

void HalLink::unsetName()
{
    m_NameIsSet = false;
}
}
}
}
}


