/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Metric.h
 *
 * Describes a __Metric__
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Metric_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Metric_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Describes a __Metric__
/// </summary>
class  Metric
    : public ModelBase
{
public:
    Metric();
    virtual ~Metric();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Metric members

    /// <summary>
    /// KPI result identifier
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Severity of the metric
    /// </summary>
    utility::string_t getSeverity() const;
    bool severityIsSet() const;
    void unsetSeverity();

    void setSeverity(const utility::string_t& value);

    /// <summary>
    /// Whether metric is considered passed
    /// </summary>
    bool isPassed() const;
    bool passedIsSet() const;
    void unsetPassed();

    void setPassed(bool value);

    /// <summary>
    /// Whether user override the failed metric
    /// </summary>
    bool isOverride() const;
    bool overrideIsSet() const;
    void unsetOverride();

    void setOverride(bool value);

    /// <summary>
    /// Expected value for the metric
    /// </summary>
    utility::string_t getActualValue() const;
    bool actualValueIsSet() const;
    void unsetActualValue();

    void setActualValue(const utility::string_t& value);

    /// <summary>
    /// Expected value for the metric
    /// </summary>
    utility::string_t getExpectedValue() const;
    bool expectedValueIsSet() const;
    void unsetExpectedValue();

    void setExpectedValue(const utility::string_t& value);

    /// <summary>
    /// Comparator used for the metric
    /// </summary>
    utility::string_t getComparator() const;
    bool comparatorIsSet() const;
    void unsetComparator();

    void setComparator(const utility::string_t& value);

    /// <summary>
    /// KPI identifier
    /// </summary>
    utility::string_t getKpi() const;
    bool kpiIsSet() const;
    void unsetKpi();

    void setKpi(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Severity;
    bool m_SeverityIsSet;
    bool m_Passed;
    bool m_PassedIsSet;
    bool m_Override;
    bool m_OverrideIsSet;
    utility::string_t m_ActualValue;
    bool m_ActualValueIsSet;
    utility::string_t m_ExpectedValue;
    bool m_ExpectedValueIsSet;
    utility::string_t m_Comparator;
    bool m_ComparatorIsSet;
    utility::string_t m_Kpi;
    bool m_KpiIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Metric_H_ */
