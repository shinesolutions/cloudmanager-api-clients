/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RepositoryBranch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RepositoryBranch::RepositoryBranch()
{
    m_ProgramId = utility::conversions::to_string_t("");
    m_ProgramIdIsSet = false;
    m_RepositoryId = 0L;
    m_RepositoryIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m__linksIsSet = false;
}

RepositoryBranch::~RepositoryBranch()
{
}

void RepositoryBranch::validate()
{
    // TODO: implement validation
}

web::json::value RepositoryBranch::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ProgramIdIsSet)
    {
        val[utility::conversions::to_string_t("programId")] = ModelBase::toJson(m_ProgramId);
    }
    if(m_RepositoryIdIsSet)
    {
        val[utility::conversions::to_string_t("repositoryId")] = ModelBase::toJson(m_RepositoryId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }

    return val;
}

bool RepositoryBranch::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("programId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("programId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_programId;
            ok &= ModelBase::fromJson(fieldValue, refVal_programId);
            setProgramId(refVal_programId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repositoryId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("repositoryId"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_repositoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_repositoryId);
            setRepositoryId(refVal_repositoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("_links"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RepositoryBranch__links> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    return ok;
}

void RepositoryBranch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ProgramIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("programId"), m_ProgramId));
    }
    if(m_RepositoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("repositoryId"), m_RepositoryId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_links"), m__links));
    }
}

bool RepositoryBranch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("programId")))
    {
        utility::string_t refVal_programId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("programId")), refVal_programId );
        setProgramId(refVal_programId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repositoryId")))
    {
        int64_t refVal_repositoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("repositoryId")), refVal_repositoryId );
        setRepositoryId(refVal_repositoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        std::shared_ptr<RepositoryBranch__links> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("_links")), refVal__links );
        setLinks(refVal__links);
    }
    return ok;
}

utility::string_t RepositoryBranch::getProgramId() const
{
    return m_ProgramId;
}

void RepositoryBranch::setProgramId(const utility::string_t& value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}

bool RepositoryBranch::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}

void RepositoryBranch::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
int64_t RepositoryBranch::getRepositoryId() const
{
    return m_RepositoryId;
}

void RepositoryBranch::setRepositoryId(int64_t value)
{
    m_RepositoryId = value;
    m_RepositoryIdIsSet = true;
}

bool RepositoryBranch::repositoryIdIsSet() const
{
    return m_RepositoryIdIsSet;
}

void RepositoryBranch::unsetRepositoryId()
{
    m_RepositoryIdIsSet = false;
}
utility::string_t RepositoryBranch::getName() const
{
    return m_Name;
}

void RepositoryBranch::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool RepositoryBranch::nameIsSet() const
{
    return m_NameIsSet;
}

void RepositoryBranch::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<RepositoryBranch__links> RepositoryBranch::getLinks() const
{
    return m__links;
}

void RepositoryBranch::setLinks(const std::shared_ptr<RepositoryBranch__links>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool RepositoryBranch::linksIsSet() const
{
    return m__linksIsSet;
}

void RepositoryBranch::unset_links()
{
    m__linksIsSet = false;
}
}
}
}
}


