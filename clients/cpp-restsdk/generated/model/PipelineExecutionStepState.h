/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineExecutionStepState.h
 *
 * Describes the status of a particular pipeline execution step for display purposes
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecutionStepState_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecutionStepState_H_


#include "../ModelBase.h"

#include "PipelineExecutionStepState__links.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Describes the status of a particular pipeline execution step for display purposes
/// </summary>
class  PipelineExecutionStepState
    : public ModelBase
{
public:
    PipelineExecutionStepState();
    virtual ~PipelineExecutionStepState();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PipelineExecutionStepState members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStepId() const;
    bool stepIdIsSet() const;
    void unsetStepId();

    void setStepId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhaseId() const;
    bool phaseIdIsSet() const;
    void unsetPhaseId();

    void setPhaseId(const utility::string_t& value);

    /// <summary>
    /// Name of the action
    /// </summary>
    utility::string_t getAction() const;
    bool actionIsSet() const;
    void unsetAction();

    void setAction(const utility::string_t& value);

    /// <summary>
    /// Target repository
    /// </summary>
    utility::string_t getRepository() const;
    bool repositoryIsSet() const;
    void unsetRepository();

    void setRepository(const utility::string_t& value);

    /// <summary>
    /// Target branch
    /// </summary>
    utility::string_t getBranch() const;
    bool branchIsSet() const;
    void unsetBranch();

    void setBranch(const utility::string_t& value);

    /// <summary>
    /// Target environment
    /// </summary>
    utility::string_t getEnvironment() const;
    bool environmentIsSet() const;
    void unsetEnvironment();

    void setEnvironment(const utility::string_t& value);

    /// <summary>
    /// Target environment type
    /// </summary>
    utility::string_t getEnvironmentType() const;
    bool environmentTypeIsSet() const;
    void unsetEnvironmentType();

    void setEnvironmentType(const utility::string_t& value);

    /// <summary>
    /// Start time
    /// </summary>
    utility::datetime getStartedAt() const;
    bool startedAtIsSet() const;
    void unsetStartedAt();

    void setStartedAt(const utility::datetime& value);

    /// <summary>
    /// Date the execution reached a final state
    /// </summary>
    utility::datetime getFinishedAt() const;
    bool finishedAtIsSet() const;
    void unsetFinishedAt();

    void setFinishedAt(const utility::datetime& value);

    /// <summary>
    /// Information about step result
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Object>>& getDetails();
    bool detailsIsSet() const;
    void unsetDetails();

    void setDetails(const std::map<utility::string_t, std::shared_ptr<Object>>& value);

    /// <summary>
    /// Action status
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineExecutionStepState__links> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<PipelineExecutionStepState__links>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_StepId;
    bool m_StepIdIsSet;
    utility::string_t m_PhaseId;
    bool m_PhaseIdIsSet;
    utility::string_t m_Action;
    bool m_ActionIsSet;
    utility::string_t m_Repository;
    bool m_RepositoryIsSet;
    utility::string_t m_Branch;
    bool m_BranchIsSet;
    utility::string_t m_Environment;
    bool m_EnvironmentIsSet;
    utility::string_t m_EnvironmentType;
    bool m_EnvironmentTypeIsSet;
    utility::datetime m_StartedAt;
    bool m_StartedAtIsSet;
    utility::datetime m_FinishedAt;
    bool m_FinishedAtIsSet;
    std::map<utility::string_t, std::shared_ptr<Object>> m_Details;
    bool m_DetailsIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<PipelineExecutionStepState__links> m__links;
    bool m__linksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecutionStepState_H_ */
