/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmbeddedProgram.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EmbeddedProgram::EmbeddedProgram()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_TenantId = utility::conversions::to_string_t("");
    m_TenantIdIsSet = false;
}

EmbeddedProgram::~EmbeddedProgram()
{
}

void EmbeddedProgram::validate()
{
    // TODO: implement validation
}

web::json::value EmbeddedProgram::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_TenantIdIsSet)
    {
        val[utility::conversions::to_string_t("tenantId")] = ModelBase::toJson(m_TenantId);
    }

    return val;
}

bool EmbeddedProgram::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tenantId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tenantId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tenantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_tenantId);
            setTenantId(refVal_tenantId);
        }
    }
    return ok;
}

void EmbeddedProgram::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    if(m_TenantIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tenantId"), m_TenantId));
    }
}

bool EmbeddedProgram::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled")), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tenantId")))
    {
        utility::string_t refVal_tenantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tenantId")), refVal_tenantId );
        setTenantId(refVal_tenantId);
    }
    return ok;
}

utility::string_t EmbeddedProgram::getId() const
{
    return m_Id;
}

void EmbeddedProgram::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EmbeddedProgram::idIsSet() const
{
    return m_IdIsSet;
}

void EmbeddedProgram::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EmbeddedProgram::getName() const
{
    return m_Name;
}

void EmbeddedProgram::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool EmbeddedProgram::nameIsSet() const
{
    return m_NameIsSet;
}

void EmbeddedProgram::unsetName()
{
    m_NameIsSet = false;
}
bool EmbeddedProgram::isEnabled() const
{
    return m_Enabled;
}

void EmbeddedProgram::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool EmbeddedProgram::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void EmbeddedProgram::unsetEnabled()
{
    m_EnabledIsSet = false;
}
utility::string_t EmbeddedProgram::getTenantId() const
{
    return m_TenantId;
}

void EmbeddedProgram::setTenantId(const utility::string_t& value)
{
    m_TenantId = value;
    m_TenantIdIsSet = true;
}

bool EmbeddedProgram::tenantIdIsSet() const
{
    return m_TenantIdIsSet;
}

void EmbeddedProgram::unsetTenantId()
{
    m_TenantIdIsSet = false;
}
}
}
}
}


