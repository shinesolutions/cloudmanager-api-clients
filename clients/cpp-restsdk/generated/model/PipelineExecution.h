/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineExecution.h
 *
 * Wraps a pipeline execution
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecution_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecution_H_


#include "../ModelBase.h"

#include "PipelineExecution__embedded.h"
#include "PipelineExecution__links.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Wraps a pipeline execution
/// </summary>
class  PipelineExecution
    : public ModelBase
{
public:
    PipelineExecution();
    virtual ~PipelineExecution();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PipelineExecution members

    /// <summary>
    /// Pipeline execution identifier
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    utility::string_t getProgramId() const;
    bool programIdIsSet() const;
    void unsetProgramId();

    void setProgramId(const utility::string_t& value);

    /// <summary>
    /// Identifier of the pipeline. Unique within the space.
    /// </summary>
    utility::string_t getPipelineId() const;
    bool pipelineIdIsSet() const;
    void unsetPipelineId();

    void setPipelineId(const utility::string_t& value);

    /// <summary>
    /// Version of the artifacts generated during this execution
    /// </summary>
    utility::string_t getArtifactsVersion() const;
    bool artifactsVersionIsSet() const;
    void unsetArtifactsVersion();

    void setArtifactsVersion(const utility::string_t& value);

    /// <summary>
    /// AdobeID who started the pipeline. Empty for auto triggered builds
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);

    /// <summary>
    /// Status of the execution
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// How the execution was triggered.
    /// </summary>
    utility::string_t getTrigger() const;
    bool triggerIsSet() const;
    void unsetTrigger();

    void setTrigger(const utility::string_t& value);

    /// <summary>
    /// Start time
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Date of last status change
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);

    /// <summary>
    /// Date the execution reached a final state
    /// </summary>
    utility::datetime getFinishedAt() const;
    bool finishedAtIsSet() const;
    void unsetFinishedAt();

    void setFinishedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineExecution__embedded> getEmbedded() const;
    bool embeddedIsSet() const;
    void unset_embedded();

    void setEmbedded(const std::shared_ptr<PipelineExecution__embedded>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineExecution__links> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<PipelineExecution__links>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ProgramId;
    bool m_ProgramIdIsSet;
    utility::string_t m_PipelineId;
    bool m_PipelineIdIsSet;
    utility::string_t m_ArtifactsVersion;
    bool m_ArtifactsVersionIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Trigger;
    bool m_TriggerIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    utility::datetime m_FinishedAt;
    bool m_FinishedAtIsSet;
    std::shared_ptr<PipelineExecution__embedded> m__embedded;
    bool m__embeddedIsSet;
    std::shared_ptr<PipelineExecution__links> m__links;
    bool m__linksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecution_H_ */
