/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Program__links.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Program__links::Program__links()
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = false;
    m_SelfIsSet = false;
}

Program__links::~Program__links()
{
}

void Program__links::validate()
{
    // TODO: implement validation
}

web::json::value Program__links::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet)
    {
        val[utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/pipelines")] = ModelBase::toJson(m_Http__ns_adobe_com_adobecloud_rel_pipelines);
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet)
    {
        val[utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/environments")] = ModelBase::toJson(m_Http__ns_adobe_com_adobecloud_rel_environments);
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet)
    {
        val[utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repositories")] = ModelBase::toJson(m_Http__ns_adobe_com_adobecloud_rel_repositories);
    }
    if(m_SelfIsSet)
    {
        val[utility::conversions::to_string_t("self")] = ModelBase::toJson(m_Self);
    }

    return val;
}

bool Program__links::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/pipelines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/pipelines"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/pipelines;
            ok &= ModelBase::fromJson(fieldValue, refVal_http://ns.adobe.com/adobecloud/rel/pipelines);
            setHttpNsAdobeComAdobecloudRelPipelines(refVal_http://ns.adobe.com/adobecloud/rel/pipelines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/environments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/environments"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/environments;
            ok &= ModelBase::fromJson(fieldValue, refVal_http://ns.adobe.com/adobecloud/rel/environments);
            setHttpNsAdobeComAdobecloudRelEnvironments(refVal_http://ns.adobe.com/adobecloud/rel/environments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repositories")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repositories"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/repositories;
            ok &= ModelBase::fromJson(fieldValue, refVal_http://ns.adobe.com/adobecloud/rel/repositories);
            setHttpNsAdobeComAdobecloudRelRepositories(refVal_http://ns.adobe.com/adobecloud/rel/repositories);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("self")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("self"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HalLink> refVal_self;
            ok &= ModelBase::fromJson(fieldValue, refVal_self);
            setSelf(refVal_self);
        }
    }
    return ok;
}

void Program__links::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/pipelines"), m_Http__ns_adobe_com_adobecloud_rel_pipelines));
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/environments"), m_Http__ns_adobe_com_adobecloud_rel_environments));
    }
    if(m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repositories"), m_Http__ns_adobe_com_adobecloud_rel_repositories));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("self"), m_Self));
    }
}

bool Program__links::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/pipelines")))
    {
        std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/pipelines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/pipelines")), refVal_http://ns.adobe.com/adobecloud/rel/pipelines );
        setHttpNsAdobeComAdobecloudRelPipelines(refVal_http://ns.adobe.com/adobecloud/rel/pipelines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/environments")))
    {
        std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/environments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/environments")), refVal_http://ns.adobe.com/adobecloud/rel/environments );
        setHttpNsAdobeComAdobecloudRelEnvironments(refVal_http://ns.adobe.com/adobecloud/rel/environments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repositories")))
    {
        std::shared_ptr<HalLink> refVal_http://ns.adobe.com/adobecloud/rel/repositories;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("http://ns.adobe.com/adobecloud/rel/repositories")), refVal_http://ns.adobe.com/adobecloud/rel/repositories );
        setHttpNsAdobeComAdobecloudRelRepositories(refVal_http://ns.adobe.com/adobecloud/rel/repositories);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("self")))
    {
        std::shared_ptr<HalLink> refVal_self;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("self")), refVal_self );
        setSelf(refVal_self);
    }
    return ok;
}

std::shared_ptr<HalLink> Program__links::getHttpNsAdobeComAdobecloudRelPipelines() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipelines;
}

void Program__links::setHttpNsAdobeComAdobecloudRelPipelines(const std::shared_ptr<HalLink>& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelines = value;
    m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = true;
}

bool Program__links::httpNsAdobeComAdobecloudRelPipelinesIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet;
}

void Program__links::unsetHttp__ns_adobe_com_adobecloud_rel_pipelines()
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = false;
}
std::shared_ptr<HalLink> Program__links::getHttpNsAdobeComAdobecloudRelEnvironments() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_environments;
}

void Program__links::setHttpNsAdobeComAdobecloudRelEnvironments(const std::shared_ptr<HalLink>& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_environments = value;
    m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = true;
}

bool Program__links::httpNsAdobeComAdobecloudRelEnvironmentsIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet;
}

void Program__links::unsetHttp__ns_adobe_com_adobecloud_rel_environments()
{
    m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = false;
}
std::shared_ptr<HalLink> Program__links::getHttpNsAdobeComAdobecloudRelRepositories() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_repositories;
}

void Program__links::setHttpNsAdobeComAdobecloudRelRepositories(const std::shared_ptr<HalLink>& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_repositories = value;
    m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = true;
}

bool Program__links::httpNsAdobeComAdobecloudRelRepositoriesIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet;
}

void Program__links::unsetHttp__ns_adobe_com_adobecloud_rel_repositories()
{
    m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = false;
}
std::shared_ptr<HalLink> Program__links::getSelf() const
{
    return m_Self;
}

void Program__links::setSelf(const std::shared_ptr<HalLink>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool Program__links::selfIsSet() const
{
    return m_SelfIsSet;
}

void Program__links::unsetSelf()
{
    m_SelfIsSet = false;
}
}
}
}
}


