/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RepositoryBranch.h
 *
 * Represents a Git Branch
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RepositoryBranch_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RepositoryBranch_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "RepositoryBranch__links.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Represents a Git Branch
/// </summary>
class  RepositoryBranch
    : public ModelBase
{
public:
    RepositoryBranch();
    virtual ~RepositoryBranch();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RepositoryBranch members

    /// <summary>
    /// Identifier of the program. Unique within the space
    /// </summary>
    utility::string_t getProgramId() const;
    bool programIdIsSet() const;
    void unsetProgramId();

    void setProgramId(const utility::string_t& value);

    /// <summary>
    /// Identifier of the repository
    /// </summary>
    int64_t getRepositoryId() const;
    bool repositoryIdIsSet() const;
    void unsetRepositoryId();

    void setRepositoryId(int64_t value);

    /// <summary>
    /// Name of the branch
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RepositoryBranch__links> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<RepositoryBranch__links>& value);


protected:
    utility::string_t m_ProgramId;
    bool m_ProgramIdIsSet;
    int64_t m_RepositoryId;
    bool m_RepositoryIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<RepositoryBranch__links> m__links;
    bool m__linksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RepositoryBranch_H_ */
