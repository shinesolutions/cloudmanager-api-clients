/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Repository.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Repository::Repository()
{
    m_Repo = utility::conversions::to_string_t("");
    m_RepoIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m__linksIsSet = false;
}

Repository::~Repository()
{
}

void Repository::validate()
{
    // TODO: implement validation
}

web::json::value Repository::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RepoIsSet)
    {
        val[utility::conversions::to_string_t("repo")] = ModelBase::toJson(m_Repo);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }

    return val;
}

bool Repository::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("repo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("repo"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_repo;
            ok &= ModelBase::fromJson(fieldValue, refVal_repo);
            setRepo(refVal_repo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("_links"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Repository__links> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    return ok;
}

void Repository::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_RepoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("repo"), m_Repo));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_links"), m__links));
    }
}

bool Repository::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("repo")))
    {
        utility::string_t refVal_repo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("repo")), refVal_repo );
        setRepo(refVal_repo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        std::shared_ptr<Repository__links> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("_links")), refVal__links );
        setLinks(refVal__links);
    }
    return ok;
}

utility::string_t Repository::getRepo() const
{
    return m_Repo;
}

void Repository::setRepo(const utility::string_t& value)
{
    m_Repo = value;
    m_RepoIsSet = true;
}

bool Repository::repoIsSet() const
{
    return m_RepoIsSet;
}

void Repository::unsetRepo()
{
    m_RepoIsSet = false;
}
utility::string_t Repository::getDescription() const
{
    return m_Description;
}

void Repository::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Repository::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Repository::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<Repository__links> Repository::getLinks() const
{
    return m__links;
}

void Repository::setLinks(const std::shared_ptr<Repository__links>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool Repository::linksIsSet() const
{
    return m__linksIsSet;
}

void Repository::unset_links()
{
    m__linksIsSet = false;
}
}
}
}
}


