/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BadRequestError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BadRequestError::BadRequestError()
{
    m_Status = 0;
    m_StatusIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_MissingParamsIsSet = false;
    m_InvalidParamsIsSet = false;
}

BadRequestError::~BadRequestError()
{
}

void BadRequestError::validate()
{
    // TODO: implement validation
}

web::json::value BadRequestError::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_MissingParamsIsSet)
    {
        val[utility::conversions::to_string_t("missingParams")] = ModelBase::toJson(m_MissingParams);
    }
    if(m_InvalidParamsIsSet)
    {
        val[utility::conversions::to_string_t("invalidParams")] = ModelBase::toJson(m_InvalidParams);
    }

    return val;
}

bool BadRequestError::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("missingParams")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("missingParams"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MissingParameter>> refVal_missingParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_missingParams);
            setMissingParams(refVal_missingParams);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invalidParams")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("invalidParams"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InvalidParameter>> refVal_invalidParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_invalidParams);
            setInvalidParams(refVal_invalidParams);
        }
    }
    return ok;
}

void BadRequestError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_MissingParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("missingParams"), m_MissingParams));
    }
    if(m_InvalidParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("invalidParams"), m_InvalidParams));
    }
}

bool BadRequestError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        int32_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("missingParams")))
    {
        std::vector<std::shared_ptr<MissingParameter>> refVal_missingParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("missingParams")), refVal_missingParams );
        setMissingParams(refVal_missingParams);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invalidParams")))
    {
        std::vector<std::shared_ptr<InvalidParameter>> refVal_invalidParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("invalidParams")), refVal_invalidParams );
        setInvalidParams(refVal_invalidParams);
    }
    return ok;
}

int32_t BadRequestError::getStatus() const
{
    return m_Status;
}

void BadRequestError::setStatus(int32_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool BadRequestError::statusIsSet() const
{
    return m_StatusIsSet;
}

void BadRequestError::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t BadRequestError::getType() const
{
    return m_Type;
}

void BadRequestError::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BadRequestError::typeIsSet() const
{
    return m_TypeIsSet;
}

void BadRequestError::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BadRequestError::getTitle() const
{
    return m_Title;
}

void BadRequestError::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool BadRequestError::titleIsSet() const
{
    return m_TitleIsSet;
}

void BadRequestError::unsetTitle()
{
    m_TitleIsSet = false;
}
std::vector<std::shared_ptr<MissingParameter>>& BadRequestError::getMissingParams()
{
    return m_MissingParams;
}

void BadRequestError::setMissingParams(const std::vector<std::shared_ptr<MissingParameter>>& value)
{
    m_MissingParams = value;
    m_MissingParamsIsSet = true;
}

bool BadRequestError::missingParamsIsSet() const
{
    return m_MissingParamsIsSet;
}

void BadRequestError::unsetMissingParams()
{
    m_MissingParamsIsSet = false;
}
std::vector<std::shared_ptr<InvalidParameter>>& BadRequestError::getInvalidParams()
{
    return m_InvalidParams;
}

void BadRequestError::setInvalidParams(const std::vector<std::shared_ptr<InvalidParameter>>& value)
{
    m_InvalidParams = value;
    m_InvalidParamsIsSet = true;
}

bool BadRequestError::invalidParamsIsSet() const
{
    return m_InvalidParamsIsSet;
}

void BadRequestError::unsetInvalidParams()
{
    m_InvalidParamsIsSet = false;
}
}
}
}
}


