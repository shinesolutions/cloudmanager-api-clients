/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineExecutionStepState__links.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecutionStepState__links_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecutionStepState__links_H_


#include "../ModelBase.h"

#include "HalLink.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PipelineExecutionStepState__links
    : public ModelBase
{
public:
    PipelineExecutionStepState__links();
    virtual ~PipelineExecutionStepState__links();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PipelineExecutionStepState__links members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelExecution() const;
    bool httpNsAdobeComAdobecloudRelExecutionIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_execution();

    void setHttpNsAdobeComAdobecloudRelExecution(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelPipeline() const;
    bool httpNsAdobeComAdobecloudRelPipelineIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_pipeline();

    void setHttpNsAdobeComAdobecloudRelPipeline(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelPipelineLogs() const;
    bool httpNsAdobeComAdobecloudRelPipelineLogsIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_pipeline_logs();

    void setHttpNsAdobeComAdobecloudRelPipelineLogs(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelPipelineMetrics() const;
    bool httpNsAdobeComAdobecloudRelPipelineMetricsIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_pipeline_metrics();

    void setHttpNsAdobeComAdobecloudRelPipelineMetrics(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelPipelineAdvance() const;
    bool httpNsAdobeComAdobecloudRelPipelineAdvanceIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_pipeline_advance();

    void setHttpNsAdobeComAdobecloudRelPipelineAdvance(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelPipelineCancel() const;
    bool httpNsAdobeComAdobecloudRelPipelineCancelIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_pipeline_cancel();

    void setHttpNsAdobeComAdobecloudRelPipelineCancel(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getHttpNsAdobeComAdobecloudRelProgram() const;
    bool httpNsAdobeComAdobecloudRelProgramIsSet() const;
    void unsetHttp__ns_adobe_com_adobecloud_rel_program();

    void setHttpNsAdobeComAdobecloudRelProgram(const std::shared_ptr<HalLink>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HalLink> getSelf() const;
    bool selfIsSet() const;
    void unsetSelf();

    void setSelf(const std::shared_ptr<HalLink>& value);


protected:
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_execution;
    bool m_Http__ns_adobe_com_adobecloud_rel_executionIsSet;
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_pipeline;
    bool m_Http__ns_adobe_com_adobecloud_rel_pipelineIsSet;
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs;
    bool m_Http__ns_adobe_com_adobecloud_rel_pipeline_logsIsSet;
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics;
    bool m_Http__ns_adobe_com_adobecloud_rel_pipeline_metricsIsSet;
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance;
    bool m_Http__ns_adobe_com_adobecloud_rel_pipeline_advanceIsSet;
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel;
    bool m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancelIsSet;
    std::shared_ptr<HalLink> m_Http__ns_adobe_com_adobecloud_rel_program;
    bool m_Http__ns_adobe_com_adobecloud_rel_programIsSet;
    std::shared_ptr<HalLink> m_Self;
    bool m_SelfIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PipelineExecutionStepState__links_H_ */
