/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelinePhase.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PipelinePhase::PipelinePhase()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_RepositoryId = utility::conversions::to_string_t("");
    m_RepositoryIdIsSet = false;
    m_Branch = utility::conversions::to_string_t("");
    m_BranchIsSet = false;
    m_EnvironmentId = utility::conversions::to_string_t("");
    m_EnvironmentIdIsSet = false;
}

PipelinePhase::~PipelinePhase()
{
}

void PipelinePhase::validate()
{
    // TODO: implement validation
}

web::json::value PipelinePhase::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_RepositoryIdIsSet)
    {
        val[utility::conversions::to_string_t("repositoryId")] = ModelBase::toJson(m_RepositoryId);
    }
    if(m_BranchIsSet)
    {
        val[utility::conversions::to_string_t("branch")] = ModelBase::toJson(m_Branch);
    }
    if(m_EnvironmentIdIsSet)
    {
        val[utility::conversions::to_string_t("environmentId")] = ModelBase::toJson(m_EnvironmentId);
    }

    return val;
}

bool PipelinePhase::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("repositoryId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("repositoryId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_repositoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_repositoryId);
            setRepositoryId(refVal_repositoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("branch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("branch"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_branch;
            ok &= ModelBase::fromJson(fieldValue, refVal_branch);
            setBranch(refVal_branch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("environmentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("environmentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_environmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_environmentId);
            setEnvironmentId(refVal_environmentId);
        }
    }
    return ok;
}

void PipelinePhase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_RepositoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("repositoryId"), m_RepositoryId));
    }
    if(m_BranchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("branch"), m_Branch));
    }
    if(m_EnvironmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("environmentId"), m_EnvironmentId));
    }
}

bool PipelinePhase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("repositoryId")))
    {
        utility::string_t refVal_repositoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("repositoryId")), refVal_repositoryId );
        setRepositoryId(refVal_repositoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("branch")))
    {
        utility::string_t refVal_branch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("branch")), refVal_branch );
        setBranch(refVal_branch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("environmentId")))
    {
        utility::string_t refVal_environmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("environmentId")), refVal_environmentId );
        setEnvironmentId(refVal_environmentId);
    }
    return ok;
}

utility::string_t PipelinePhase::getName() const
{
    return m_Name;
}

void PipelinePhase::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool PipelinePhase::nameIsSet() const
{
    return m_NameIsSet;
}

void PipelinePhase::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t PipelinePhase::getType() const
{
    return m_Type;
}

void PipelinePhase::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool PipelinePhase::typeIsSet() const
{
    return m_TypeIsSet;
}

void PipelinePhase::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t PipelinePhase::getRepositoryId() const
{
    return m_RepositoryId;
}

void PipelinePhase::setRepositoryId(const utility::string_t& value)
{
    m_RepositoryId = value;
    m_RepositoryIdIsSet = true;
}

bool PipelinePhase::repositoryIdIsSet() const
{
    return m_RepositoryIdIsSet;
}

void PipelinePhase::unsetRepositoryId()
{
    m_RepositoryIdIsSet = false;
}
utility::string_t PipelinePhase::getBranch() const
{
    return m_Branch;
}

void PipelinePhase::setBranch(const utility::string_t& value)
{
    m_Branch = value;
    m_BranchIsSet = true;
}

bool PipelinePhase::branchIsSet() const
{
    return m_BranchIsSet;
}

void PipelinePhase::unsetBranch()
{
    m_BranchIsSet = false;
}
utility::string_t PipelinePhase::getEnvironmentId() const
{
    return m_EnvironmentId;
}

void PipelinePhase::setEnvironmentId(const utility::string_t& value)
{
    m_EnvironmentId = value;
    m_EnvironmentIdIsSet = true;
}

bool PipelinePhase::environmentIdIsSet() const
{
    return m_EnvironmentIdIsSet;
}

void PipelinePhase::unsetEnvironmentId()
{
    m_EnvironmentIdIsSet = false;
}
}
}
}
}


