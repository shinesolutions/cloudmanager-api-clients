/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Pipeline.h
 *
 * Describes a __CI/CD Pipeline__
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Pipeline_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Pipeline_H_


#include "../ModelBase.h"

#include "Pipeline__links.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "PipelinePhase.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Describes a __CI/CD Pipeline__
/// </summary>
class  Pipeline
    : public ModelBase
{
public:
    Pipeline();
    virtual ~Pipeline();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Pipeline members

    /// <summary>
    /// Identifier of the pipeline. Unique within the program.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    utility::string_t getProgramId() const;
    bool programIdIsSet() const;
    void unsetProgramId();

    void setProgramId(const utility::string_t& value);

    /// <summary>
    /// Name of the pipeline
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
    /// </summary>
    utility::string_t getTrigger() const;
    bool triggerIsSet() const;
    void unsetTrigger();

    void setTrigger(const utility::string_t& value);

    /// <summary>
    /// Pipeline status
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// Create date
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Update date
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);

    /// <summary>
    /// Last pipeline execution start
    /// </summary>
    utility::datetime getLastStartedAt() const;
    bool lastStartedAtIsSet() const;
    void unsetLastStartedAt();

    void setLastStartedAt(const utility::datetime& value);

    /// <summary>
    /// Last pipeline execution end
    /// </summary>
    utility::datetime getLastFinishedAt() const;
    bool lastFinishedAtIsSet() const;
    void unsetLastFinishedAt();

    void setLastFinishedAt(const utility::datetime& value);

    /// <summary>
    /// Pipeline phases in execution order
    /// </summary>
    std::vector<std::shared_ptr<PipelinePhase>>& getPhases();
    bool phasesIsSet() const;
    void unsetPhases();

    void setPhases(const std::vector<std::shared_ptr<PipelinePhase>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Pipeline__links> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<Pipeline__links>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ProgramId;
    bool m_ProgramIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Trigger;
    bool m_TriggerIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    utility::datetime m_LastStartedAt;
    bool m_LastStartedAtIsSet;
    utility::datetime m_LastFinishedAt;
    bool m_LastFinishedAtIsSet;
    std::vector<std::shared_ptr<PipelinePhase>> m_Phases;
    bool m_PhasesIsSet;
    std::shared_ptr<Pipeline__links> m__links;
    bool m__linksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Pipeline_H_ */
