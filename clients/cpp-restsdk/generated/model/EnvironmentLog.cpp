/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EnvironmentLog.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EnvironmentLog::EnvironmentLog()
{
    m_Service = utility::conversions::to_string_t("");
    m_ServiceIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_ProgramId = 0L;
    m_ProgramIdIsSet = false;
    m_EnvironmentId = 0L;
    m_EnvironmentIdIsSet = false;
    m__linksIsSet = false;
}

EnvironmentLog::~EnvironmentLog()
{
}

void EnvironmentLog::validate()
{
    // TODO: implement validation
}

web::json::value EnvironmentLog::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ServiceIsSet)
    {
        val[utility::conversions::to_string_t("service")] = ModelBase::toJson(m_Service);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    }
    if(m_ProgramIdIsSet)
    {
        val[utility::conversions::to_string_t("programId")] = ModelBase::toJson(m_ProgramId);
    }
    if(m_EnvironmentIdIsSet)
    {
        val[utility::conversions::to_string_t("environmentId")] = ModelBase::toJson(m_EnvironmentId);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }

    return val;
}

bool EnvironmentLog::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("service")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("service"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_service;
            ok &= ModelBase::fromJson(fieldValue, refVal_service);
            setService(refVal_service);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_date);
            setDate(refVal_date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("programId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("programId"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_programId;
            ok &= ModelBase::fromJson(fieldValue, refVal_programId);
            setProgramId(refVal_programId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("environmentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("environmentId"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_environmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_environmentId);
            setEnvironmentId(refVal_environmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("_links"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EnvironmentLog__links> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    return ok;
}

void EnvironmentLog::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ServiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("service"), m_Service));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
    }
    if(m_ProgramIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("programId"), m_ProgramId));
    }
    if(m_EnvironmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("environmentId"), m_EnvironmentId));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_links"), m__links));
    }
}

bool EnvironmentLog::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("service")))
    {
        utility::string_t refVal_service;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("service")), refVal_service );
        setService(refVal_service);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date")))
    {
        utility::string_t refVal_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date")), refVal_date );
        setDate(refVal_date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("programId")))
    {
        int64_t refVal_programId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("programId")), refVal_programId );
        setProgramId(refVal_programId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("environmentId")))
    {
        int64_t refVal_environmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("environmentId")), refVal_environmentId );
        setEnvironmentId(refVal_environmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        std::shared_ptr<EnvironmentLog__links> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("_links")), refVal__links );
        setLinks(refVal__links);
    }
    return ok;
}

utility::string_t EnvironmentLog::getService() const
{
    return m_Service;
}

void EnvironmentLog::setService(const utility::string_t& value)
{
    m_Service = value;
    m_ServiceIsSet = true;
}

bool EnvironmentLog::serviceIsSet() const
{
    return m_ServiceIsSet;
}

void EnvironmentLog::unsetService()
{
    m_ServiceIsSet = false;
}
utility::string_t EnvironmentLog::getName() const
{
    return m_Name;
}

void EnvironmentLog::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool EnvironmentLog::nameIsSet() const
{
    return m_NameIsSet;
}

void EnvironmentLog::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t EnvironmentLog::getDate() const
{
    return m_date;
}

void EnvironmentLog::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool EnvironmentLog::dateIsSet() const
{
    return m_dateIsSet;
}

void EnvironmentLog::unsetdate()
{
    m_dateIsSet = false;
}
int64_t EnvironmentLog::getProgramId() const
{
    return m_ProgramId;
}

void EnvironmentLog::setProgramId(int64_t value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}

bool EnvironmentLog::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}

void EnvironmentLog::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
int64_t EnvironmentLog::getEnvironmentId() const
{
    return m_EnvironmentId;
}

void EnvironmentLog::setEnvironmentId(int64_t value)
{
    m_EnvironmentId = value;
    m_EnvironmentIdIsSet = true;
}

bool EnvironmentLog::environmentIdIsSet() const
{
    return m_EnvironmentIdIsSet;
}

void EnvironmentLog::unsetEnvironmentId()
{
    m_EnvironmentIdIsSet = false;
}
std::shared_ptr<EnvironmentLog__links> EnvironmentLog::getLinks() const
{
    return m__links;
}

void EnvironmentLog::setLinks(const std::shared_ptr<EnvironmentLog__links>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool EnvironmentLog::linksIsSet() const
{
    return m__linksIsSet;
}

void EnvironmentLog::unset_links()
{
    m__linksIsSet = false;
}
}
}
}
}


