/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Pipeline.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Pipeline::Pipeline()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ProgramId = utility::conversions::to_string_t("");
    m_ProgramIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Trigger = utility::conversions::to_string_t("");
    m_TriggerIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_LastStartedAt = utility::datetime();
    m_LastStartedAtIsSet = false;
    m_LastFinishedAt = utility::datetime();
    m_LastFinishedAtIsSet = false;
    m_PhasesIsSet = false;
    m__linksIsSet = false;
}

Pipeline::~Pipeline()
{
}

void Pipeline::validate()
{
    // TODO: implement validation
}

web::json::value Pipeline::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ProgramIdIsSet)
    {
        val[utility::conversions::to_string_t("programId")] = ModelBase::toJson(m_ProgramId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TriggerIsSet)
    {
        val[utility::conversions::to_string_t("trigger")] = ModelBase::toJson(m_Trigger);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_LastStartedAtIsSet)
    {
        val[utility::conversions::to_string_t("lastStartedAt")] = ModelBase::toJson(m_LastStartedAt);
    }
    if(m_LastFinishedAtIsSet)
    {
        val[utility::conversions::to_string_t("lastFinishedAt")] = ModelBase::toJson(m_LastFinishedAt);
    }
    if(m_PhasesIsSet)
    {
        val[utility::conversions::to_string_t("phases")] = ModelBase::toJson(m_Phases);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }

    return val;
}

bool Pipeline::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("programId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("programId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_programId;
            ok &= ModelBase::fromJson(fieldValue, refVal_programId);
            setProgramId(refVal_programId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trigger")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trigger"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_trigger;
            ok &= ModelBase::fromJson(fieldValue, refVal_trigger);
            setTrigger(refVal_trigger);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastStartedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastStartedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_lastStartedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastStartedAt);
            setLastStartedAt(refVal_lastStartedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastFinishedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastFinishedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_lastFinishedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastFinishedAt);
            setLastFinishedAt(refVal_lastFinishedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phases")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phases"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PipelinePhase>> refVal_phases;
            ok &= ModelBase::fromJson(fieldValue, refVal_phases);
            setPhases(refVal_phases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("_links"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Pipeline__links> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    return ok;
}

void Pipeline::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ProgramIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("programId"), m_ProgramId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TriggerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trigger"), m_Trigger));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
    if(m_LastStartedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastStartedAt"), m_LastStartedAt));
    }
    if(m_LastFinishedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastFinishedAt"), m_LastFinishedAt));
    }
    if(m_PhasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phases"), m_Phases));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_links"), m__links));
    }
}

bool Pipeline::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("programId")))
    {
        utility::string_t refVal_programId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("programId")), refVal_programId );
        setProgramId(refVal_programId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trigger")))
    {
        utility::string_t refVal_trigger;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trigger")), refVal_trigger );
        setTrigger(refVal_trigger);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastStartedAt")))
    {
        utility::datetime refVal_lastStartedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastStartedAt")), refVal_lastStartedAt );
        setLastStartedAt(refVal_lastStartedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastFinishedAt")))
    {
        utility::datetime refVal_lastFinishedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastFinishedAt")), refVal_lastFinishedAt );
        setLastFinishedAt(refVal_lastFinishedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phases")))
    {
        std::vector<std::shared_ptr<PipelinePhase>> refVal_phases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phases")), refVal_phases );
        setPhases(refVal_phases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        std::shared_ptr<Pipeline__links> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("_links")), refVal__links );
        setLinks(refVal__links);
    }
    return ok;
}

utility::string_t Pipeline::getId() const
{
    return m_Id;
}

void Pipeline::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Pipeline::idIsSet() const
{
    return m_IdIsSet;
}

void Pipeline::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Pipeline::getProgramId() const
{
    return m_ProgramId;
}

void Pipeline::setProgramId(const utility::string_t& value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}

bool Pipeline::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}

void Pipeline::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
utility::string_t Pipeline::getName() const
{
    return m_Name;
}

void Pipeline::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Pipeline::nameIsSet() const
{
    return m_NameIsSet;
}

void Pipeline::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Pipeline::getTrigger() const
{
    return m_Trigger;
}

void Pipeline::setTrigger(const utility::string_t& value)
{
    m_Trigger = value;
    m_TriggerIsSet = true;
}

bool Pipeline::triggerIsSet() const
{
    return m_TriggerIsSet;
}

void Pipeline::unsetTrigger()
{
    m_TriggerIsSet = false;
}
utility::string_t Pipeline::getStatus() const
{
    return m_Status;
}

void Pipeline::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Pipeline::statusIsSet() const
{
    return m_StatusIsSet;
}

void Pipeline::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime Pipeline::getCreatedAt() const
{
    return m_CreatedAt;
}

void Pipeline::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Pipeline::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Pipeline::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime Pipeline::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Pipeline::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Pipeline::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Pipeline::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
utility::datetime Pipeline::getLastStartedAt() const
{
    return m_LastStartedAt;
}

void Pipeline::setLastStartedAt(const utility::datetime& value)
{
    m_LastStartedAt = value;
    m_LastStartedAtIsSet = true;
}

bool Pipeline::lastStartedAtIsSet() const
{
    return m_LastStartedAtIsSet;
}

void Pipeline::unsetLastStartedAt()
{
    m_LastStartedAtIsSet = false;
}
utility::datetime Pipeline::getLastFinishedAt() const
{
    return m_LastFinishedAt;
}

void Pipeline::setLastFinishedAt(const utility::datetime& value)
{
    m_LastFinishedAt = value;
    m_LastFinishedAtIsSet = true;
}

bool Pipeline::lastFinishedAtIsSet() const
{
    return m_LastFinishedAtIsSet;
}

void Pipeline::unsetLastFinishedAt()
{
    m_LastFinishedAtIsSet = false;
}
std::vector<std::shared_ptr<PipelinePhase>>& Pipeline::getPhases()
{
    return m_Phases;
}

void Pipeline::setPhases(const std::vector<std::shared_ptr<PipelinePhase>>& value)
{
    m_Phases = value;
    m_PhasesIsSet = true;
}

bool Pipeline::phasesIsSet() const
{
    return m_PhasesIsSet;
}

void Pipeline::unsetPhases()
{
    m_PhasesIsSet = false;
}
std::shared_ptr<Pipeline__links> Pipeline::getLinks() const
{
    return m__links;
}

void Pipeline::setLinks(const std::shared_ptr<Pipeline__links>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool Pipeline::linksIsSet() const
{
    return m__linksIsSet;
}

void Pipeline::unset_links()
{
    m__linksIsSet = false;
}
}
}
}
}


