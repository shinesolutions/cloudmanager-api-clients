/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineExecution.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PipelineExecution::PipelineExecution()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ProgramId = utility::conversions::to_string_t("");
    m_ProgramIdIsSet = false;
    m_PipelineId = utility::conversions::to_string_t("");
    m_PipelineIdIsSet = false;
    m_ArtifactsVersion = utility::conversions::to_string_t("");
    m_ArtifactsVersionIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Trigger = utility::conversions::to_string_t("");
    m_TriggerIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_FinishedAt = utility::datetime();
    m_FinishedAtIsSet = false;
    m__embeddedIsSet = false;
    m__linksIsSet = false;
}

PipelineExecution::~PipelineExecution()
{
}

void PipelineExecution::validate()
{
    // TODO: implement validation
}

web::json::value PipelineExecution::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ProgramIdIsSet)
    {
        val[utility::conversions::to_string_t("programId")] = ModelBase::toJson(m_ProgramId);
    }
    if(m_PipelineIdIsSet)
    {
        val[utility::conversions::to_string_t("pipelineId")] = ModelBase::toJson(m_PipelineId);
    }
    if(m_ArtifactsVersionIsSet)
    {
        val[utility::conversions::to_string_t("artifactsVersion")] = ModelBase::toJson(m_ArtifactsVersion);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_TriggerIsSet)
    {
        val[utility::conversions::to_string_t("trigger")] = ModelBase::toJson(m_Trigger);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_FinishedAtIsSet)
    {
        val[utility::conversions::to_string_t("finishedAt")] = ModelBase::toJson(m_FinishedAt);
    }
    if(m__embeddedIsSet)
    {
        val[utility::conversions::to_string_t("_embedded")] = ModelBase::toJson(m__embedded);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }

    return val;
}

bool PipelineExecution::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("programId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("programId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_programId;
            ok &= ModelBase::fromJson(fieldValue, refVal_programId);
            setProgramId(refVal_programId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pipelineId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pipelineId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pipelineId;
            ok &= ModelBase::fromJson(fieldValue, refVal_pipelineId);
            setPipelineId(refVal_pipelineId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("artifactsVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("artifactsVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_artifactsVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_artifactsVersion);
            setArtifactsVersion(refVal_artifactsVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trigger")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trigger"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_trigger;
            ok &= ModelBase::fromJson(fieldValue, refVal_trigger);
            setTrigger(refVal_trigger);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("finishedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("finishedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_finishedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_finishedAt);
            setFinishedAt(refVal_finishedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_embedded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("_embedded"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineExecution__embedded> refVal__embedded;
            ok &= ModelBase::fromJson(fieldValue, refVal__embedded);
            setEmbedded(refVal__embedded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("_links"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineExecution__links> refVal__links;
            ok &= ModelBase::fromJson(fieldValue, refVal__links);
            setLinks(refVal__links);
        }
    }
    return ok;
}

void PipelineExecution::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ProgramIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("programId"), m_ProgramId));
    }
    if(m_PipelineIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pipelineId"), m_PipelineId));
    }
    if(m_ArtifactsVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("artifactsVersion"), m_ArtifactsVersion));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_TriggerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trigger"), m_Trigger));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
    if(m_FinishedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("finishedAt"), m_FinishedAt));
    }
    if(m__embeddedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_embedded"), m__embedded));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_links"), m__links));
    }
}

bool PipelineExecution::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("programId")))
    {
        utility::string_t refVal_programId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("programId")), refVal_programId );
        setProgramId(refVal_programId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pipelineId")))
    {
        utility::string_t refVal_pipelineId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pipelineId")), refVal_pipelineId );
        setPipelineId(refVal_pipelineId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("artifactsVersion")))
    {
        utility::string_t refVal_artifactsVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("artifactsVersion")), refVal_artifactsVersion );
        setArtifactsVersion(refVal_artifactsVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        utility::string_t refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user")), refVal_user );
        setUser(refVal_user);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trigger")))
    {
        utility::string_t refVal_trigger;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trigger")), refVal_trigger );
        setTrigger(refVal_trigger);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("finishedAt")))
    {
        utility::datetime refVal_finishedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("finishedAt")), refVal_finishedAt );
        setFinishedAt(refVal_finishedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_embedded")))
    {
        std::shared_ptr<PipelineExecution__embedded> refVal__embedded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("_embedded")), refVal__embedded );
        setEmbedded(refVal__embedded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        std::shared_ptr<PipelineExecution__links> refVal__links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("_links")), refVal__links );
        setLinks(refVal__links);
    }
    return ok;
}

utility::string_t PipelineExecution::getId() const
{
    return m_Id;
}

void PipelineExecution::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PipelineExecution::idIsSet() const
{
    return m_IdIsSet;
}

void PipelineExecution::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PipelineExecution::getProgramId() const
{
    return m_ProgramId;
}

void PipelineExecution::setProgramId(const utility::string_t& value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}

bool PipelineExecution::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}

void PipelineExecution::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
utility::string_t PipelineExecution::getPipelineId() const
{
    return m_PipelineId;
}

void PipelineExecution::setPipelineId(const utility::string_t& value)
{
    m_PipelineId = value;
    m_PipelineIdIsSet = true;
}

bool PipelineExecution::pipelineIdIsSet() const
{
    return m_PipelineIdIsSet;
}

void PipelineExecution::unsetPipelineId()
{
    m_PipelineIdIsSet = false;
}
utility::string_t PipelineExecution::getArtifactsVersion() const
{
    return m_ArtifactsVersion;
}

void PipelineExecution::setArtifactsVersion(const utility::string_t& value)
{
    m_ArtifactsVersion = value;
    m_ArtifactsVersionIsSet = true;
}

bool PipelineExecution::artifactsVersionIsSet() const
{
    return m_ArtifactsVersionIsSet;
}

void PipelineExecution::unsetArtifactsVersion()
{
    m_ArtifactsVersionIsSet = false;
}
utility::string_t PipelineExecution::getUser() const
{
    return m_User;
}

void PipelineExecution::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool PipelineExecution::userIsSet() const
{
    return m_UserIsSet;
}

void PipelineExecution::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t PipelineExecution::getStatus() const
{
    return m_Status;
}

void PipelineExecution::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool PipelineExecution::statusIsSet() const
{
    return m_StatusIsSet;
}

void PipelineExecution::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t PipelineExecution::getTrigger() const
{
    return m_Trigger;
}

void PipelineExecution::setTrigger(const utility::string_t& value)
{
    m_Trigger = value;
    m_TriggerIsSet = true;
}

bool PipelineExecution::triggerIsSet() const
{
    return m_TriggerIsSet;
}

void PipelineExecution::unsetTrigger()
{
    m_TriggerIsSet = false;
}
utility::datetime PipelineExecution::getCreatedAt() const
{
    return m_CreatedAt;
}

void PipelineExecution::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool PipelineExecution::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void PipelineExecution::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime PipelineExecution::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void PipelineExecution::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool PipelineExecution::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void PipelineExecution::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
utility::datetime PipelineExecution::getFinishedAt() const
{
    return m_FinishedAt;
}

void PipelineExecution::setFinishedAt(const utility::datetime& value)
{
    m_FinishedAt = value;
    m_FinishedAtIsSet = true;
}

bool PipelineExecution::finishedAtIsSet() const
{
    return m_FinishedAtIsSet;
}

void PipelineExecution::unsetFinishedAt()
{
    m_FinishedAtIsSet = false;
}
std::shared_ptr<PipelineExecution__embedded> PipelineExecution::getEmbedded() const
{
    return m__embedded;
}

void PipelineExecution::setEmbedded(const std::shared_ptr<PipelineExecution__embedded>& value)
{
    m__embedded = value;
    m__embeddedIsSet = true;
}

bool PipelineExecution::embeddedIsSet() const
{
    return m__embeddedIsSet;
}

void PipelineExecution::unset_embedded()
{
    m__embeddedIsSet = false;
}
std::shared_ptr<PipelineExecution__links> PipelineExecution::getLinks() const
{
    return m__links;
}

void PipelineExecution::setLinks(const std::shared_ptr<PipelineExecution__links>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool PipelineExecution::linksIsSet() const
{
    return m__linksIsSet;
}

void PipelineExecution::unset_links()
{
    m__linksIsSet = false;
}
}
}
}
}


