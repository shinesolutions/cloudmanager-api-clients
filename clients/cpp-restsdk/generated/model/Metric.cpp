/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Metric.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Metric::Metric()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Severity = utility::conversions::to_string_t("");
    m_SeverityIsSet = false;
    m_Passed = false;
    m_PassedIsSet = false;
    m_Override = false;
    m_OverrideIsSet = false;
    m_ActualValue = utility::conversions::to_string_t("");
    m_ActualValueIsSet = false;
    m_ExpectedValue = utility::conversions::to_string_t("");
    m_ExpectedValueIsSet = false;
    m_Comparator = utility::conversions::to_string_t("");
    m_ComparatorIsSet = false;
    m_Kpi = utility::conversions::to_string_t("");
    m_KpiIsSet = false;
}

Metric::~Metric()
{
}

void Metric::validate()
{
    // TODO: implement validation
}

web::json::value Metric::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_SeverityIsSet)
    {
        val[utility::conversions::to_string_t("severity")] = ModelBase::toJson(m_Severity);
    }
    if(m_PassedIsSet)
    {
        val[utility::conversions::to_string_t("passed")] = ModelBase::toJson(m_Passed);
    }
    if(m_OverrideIsSet)
    {
        val[utility::conversions::to_string_t("override")] = ModelBase::toJson(m_Override);
    }
    if(m_ActualValueIsSet)
    {
        val[utility::conversions::to_string_t("actualValue")] = ModelBase::toJson(m_ActualValue);
    }
    if(m_ExpectedValueIsSet)
    {
        val[utility::conversions::to_string_t("expectedValue")] = ModelBase::toJson(m_ExpectedValue);
    }
    if(m_ComparatorIsSet)
    {
        val[utility::conversions::to_string_t("comparator")] = ModelBase::toJson(m_Comparator);
    }
    if(m_KpiIsSet)
    {
        val[utility::conversions::to_string_t("kpi")] = ModelBase::toJson(m_Kpi);
    }

    return val;
}

bool Metric::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("severity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("severity"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_severity;
            ok &= ModelBase::fromJson(fieldValue, refVal_severity);
            setSeverity(refVal_severity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("passed"));
        if(!fieldValue.is_null())
        {
            bool refVal_passed;
            ok &= ModelBase::fromJson(fieldValue, refVal_passed);
            setPassed(refVal_passed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("override")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("override"));
        if(!fieldValue.is_null())
        {
            bool refVal_override;
            ok &= ModelBase::fromJson(fieldValue, refVal_override);
            setOverride(refVal_override);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("actualValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("actualValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_actualValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_actualValue);
            setActualValue(refVal_actualValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expectedValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expectedValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_expectedValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_expectedValue);
            setExpectedValue(refVal_expectedValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("comparator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("comparator"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_comparator;
            ok &= ModelBase::fromJson(fieldValue, refVal_comparator);
            setComparator(refVal_comparator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("kpi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("kpi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_kpi;
            ok &= ModelBase::fromJson(fieldValue, refVal_kpi);
            setKpi(refVal_kpi);
        }
    }
    return ok;
}

void Metric::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_SeverityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("severity"), m_Severity));
    }
    if(m_PassedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("passed"), m_Passed));
    }
    if(m_OverrideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("override"), m_Override));
    }
    if(m_ActualValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("actualValue"), m_ActualValue));
    }
    if(m_ExpectedValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expectedValue"), m_ExpectedValue));
    }
    if(m_ComparatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("comparator"), m_Comparator));
    }
    if(m_KpiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("kpi"), m_Kpi));
    }
}

bool Metric::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("severity")))
    {
        utility::string_t refVal_severity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("severity")), refVal_severity );
        setSeverity(refVal_severity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passed")))
    {
        bool refVal_passed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("passed")), refVal_passed );
        setPassed(refVal_passed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("override")))
    {
        bool refVal_override;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("override")), refVal_override );
        setOverride(refVal_override);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("actualValue")))
    {
        utility::string_t refVal_actualValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("actualValue")), refVal_actualValue );
        setActualValue(refVal_actualValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expectedValue")))
    {
        utility::string_t refVal_expectedValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expectedValue")), refVal_expectedValue );
        setExpectedValue(refVal_expectedValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("comparator")))
    {
        utility::string_t refVal_comparator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("comparator")), refVal_comparator );
        setComparator(refVal_comparator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("kpi")))
    {
        utility::string_t refVal_kpi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("kpi")), refVal_kpi );
        setKpi(refVal_kpi);
    }
    return ok;
}

utility::string_t Metric::getId() const
{
    return m_Id;
}

void Metric::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Metric::idIsSet() const
{
    return m_IdIsSet;
}

void Metric::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Metric::getSeverity() const
{
    return m_Severity;
}

void Metric::setSeverity(const utility::string_t& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}

bool Metric::severityIsSet() const
{
    return m_SeverityIsSet;
}

void Metric::unsetSeverity()
{
    m_SeverityIsSet = false;
}
bool Metric::isPassed() const
{
    return m_Passed;
}

void Metric::setPassed(bool value)
{
    m_Passed = value;
    m_PassedIsSet = true;
}

bool Metric::passedIsSet() const
{
    return m_PassedIsSet;
}

void Metric::unsetPassed()
{
    m_PassedIsSet = false;
}
bool Metric::isOverride() const
{
    return m_Override;
}

void Metric::setOverride(bool value)
{
    m_Override = value;
    m_OverrideIsSet = true;
}

bool Metric::overrideIsSet() const
{
    return m_OverrideIsSet;
}

void Metric::unsetOverride()
{
    m_OverrideIsSet = false;
}
utility::string_t Metric::getActualValue() const
{
    return m_ActualValue;
}

void Metric::setActualValue(const utility::string_t& value)
{
    m_ActualValue = value;
    m_ActualValueIsSet = true;
}

bool Metric::actualValueIsSet() const
{
    return m_ActualValueIsSet;
}

void Metric::unsetActualValue()
{
    m_ActualValueIsSet = false;
}
utility::string_t Metric::getExpectedValue() const
{
    return m_ExpectedValue;
}

void Metric::setExpectedValue(const utility::string_t& value)
{
    m_ExpectedValue = value;
    m_ExpectedValueIsSet = true;
}

bool Metric::expectedValueIsSet() const
{
    return m_ExpectedValueIsSet;
}

void Metric::unsetExpectedValue()
{
    m_ExpectedValueIsSet = false;
}
utility::string_t Metric::getComparator() const
{
    return m_Comparator;
}

void Metric::setComparator(const utility::string_t& value)
{
    m_Comparator = value;
    m_ComparatorIsSet = true;
}

bool Metric::comparatorIsSet() const
{
    return m_ComparatorIsSet;
}

void Metric::unsetComparator()
{
    m_ComparatorIsSet = false;
}
utility::string_t Metric::getKpi() const
{
    return m_Kpi;
}

void Metric::setKpi(const utility::string_t& value)
{
    m_Kpi = value;
    m_KpiIsSet = true;
}

bool Metric::kpiIsSet() const
{
    return m_KpiIsSet;
}

void Metric::unsetKpi()
{
    m_KpiIsSet = false;
}
}
}
}
}


