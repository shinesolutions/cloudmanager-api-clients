/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EnvironmentLogs.h
 *
 * Logs of an Environment
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_EnvironmentLogs_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_EnvironmentLogs_H_


#include "../ModelBase.h"

#include "EnvironmentLogs__embedded.h"
#include <cpprest/details/basic_types.h>
#include "EnvironmentLogs__links.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Logs of an Environment
/// </summary>
class  EnvironmentLogs
    : public ModelBase
{
public:
    EnvironmentLogs();
    virtual ~EnvironmentLogs();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EnvironmentLogs members

    /// <summary>
    /// Name of the service
    /// </summary>
    std::vector<utility::string_t>& getService();
    bool serviceIsSet() const;
    void unsetService();

    void setService(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Name of the Log
    /// </summary>
    std::vector<utility::string_t>& getName();
    bool nameIsSet() const;
    void unsetName();

    void setName(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Number of days
    /// </summary>
    int32_t getDays() const;
    bool daysIsSet() const;
    void unsetDays();

    void setDays(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EnvironmentLogs__links> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<EnvironmentLogs__links>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EnvironmentLogs__embedded> getEmbedded() const;
    bool embeddedIsSet() const;
    void unset_embedded();

    void setEmbedded(const std::shared_ptr<EnvironmentLogs__embedded>& value);


protected:
    std::vector<utility::string_t> m_Service;
    bool m_ServiceIsSet;
    std::vector<utility::string_t> m_Name;
    bool m_NameIsSet;
    int32_t m_Days;
    bool m_DaysIsSet;
    std::shared_ptr<EnvironmentLogs__links> m__links;
    bool m__linksIsSet;
    std::shared_ptr<EnvironmentLogs__embedded> m__embedded;
    bool m__embeddedIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_EnvironmentLogs_H_ */
