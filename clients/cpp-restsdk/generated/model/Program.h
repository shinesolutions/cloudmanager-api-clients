/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Program.h
 *
 * Describes a __Program__
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Program_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Program_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Program__links.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Describes a __Program__
/// </summary>
class  Program
    : public ModelBase
{
public:
    Program();
    virtual ~Program();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Program members

    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Name of the program
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Whether this Program has been enabled for Cloud Manager usage
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);

    /// <summary>
    /// Tenant Id
    /// </summary>
    utility::string_t getTenantId() const;
    bool tenantIdIsSet() const;
    void unsetTenantId();

    void setTenantId(const utility::string_t& value);

    /// <summary>
    /// Organisation Id
    /// </summary>
    utility::string_t getImsOrgId() const;
    bool imsOrgIdIsSet() const;
    void unsetImsOrgId();

    void setImsOrgId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Program__links> getLinks() const;
    bool linksIsSet() const;
    void unset_links();

    void setLinks(const std::shared_ptr<Program__links>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_Enabled;
    bool m_EnabledIsSet;
    utility::string_t m_TenantId;
    bool m_TenantIdIsSet;
    utility::string_t m_ImsOrgId;
    bool m_ImsOrgIdIsSet;
    std::shared_ptr<Program__links> m__links;
    bool m__linksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Program_H_ */
