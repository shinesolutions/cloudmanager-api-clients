/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EnvironmentsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_EnvironmentsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_EnvironmentsApi_H_


#include "../ApiClient.h"

#include "BadRequestError.h"
#include "Environment.h"
#include "EnvironmentList.h"
#include "EnvironmentLogs.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  EnvironmentsApi 
{
public:

    explicit EnvironmentsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~EnvironmentsApi();

    /// <summary>
    /// DeleteEnvironment
    /// </summary>
    /// <remarks>
    /// Delete environment
    /// </remarks>
    /// <param name="programId">Identifier of the application</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    pplx::task<std::shared_ptr<Environment>> deleteEnvironment(
        utility::string_t programId,
        utility::string_t environmentId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey
    ) const;
    /// <summary>
    /// Download Logs
    /// </summary>
    /// <remarks>
    /// Download environment logs
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="service">Name of service</param>
    /// <param name="name">Name of log</param>
    /// <param name="date">date for which log is required</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> downloadLogs(
        utility::string_t programId,
        utility::string_t environmentId,
        utility::string_t service,
        utility::string_t name,
        utility::string_t date,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        boost::optional<utility::string_t> accept
    ) const;
    /// <summary>
    /// Get Environment
    /// </summary>
    /// <remarks>
    /// Returns an environment by its id
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    pplx::task<std::shared_ptr<Environment>> getEnvironment(
        utility::string_t programId,
        utility::string_t environmentId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey
    ) const;
    /// <summary>
    /// Get Environment Logs
    /// </summary>
    /// <remarks>
    /// List all logs available in environment
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="days">number of days for which logs are required</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="service">Names of services (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="name">Names of log (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<EnvironmentLogs>> getEnvironmentLogs(
        utility::string_t programId,
        utility::string_t environmentId,
        int32_t days,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        boost::optional<std::vector<utility::string_t>> service,
        boost::optional<std::vector<utility::string_t>> name
    ) const;
    /// <summary>
    /// List Environments
    /// </summary>
    /// <remarks>
    /// Lists all environments in an program
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="type">Type of the environment (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<EnvironmentList>> getEnvironments(
        utility::string_t programId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        boost::optional<utility::string_t> type
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_EnvironmentsApi_H_ */

