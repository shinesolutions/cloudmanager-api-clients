/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineExecutionApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PipelineExecutionApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PipelineExecutionApi_H_


#include "../ApiClient.h"

#include "PipelineExecution.h"
#include "PipelineExecutionListRepresentation.h"
#include "PipelineExecutionStepState.h"
#include "PipelineStepMetrics.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  PipelineExecutionApi 
{
public:

    explicit PipelineExecutionApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PipelineExecutionApi();

    /// <summary>
    /// Advance
    /// </summary>
    /// <remarks>
    /// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="contentType">Must always be application/json</param>
    /// <param name="body">Input for advance. See documentation for details.</param>
    pplx::task<void> advancePipelineExecution(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t executionId,
        utility::string_t phaseId,
        utility::string_t stepId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        utility::string_t contentType,
        std::shared_ptr<Object> body
    ) const;
    /// <summary>
    /// Cancel
    /// </summary>
    /// <remarks>
    /// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="contentType">Must always be application/json</param>
    /// <param name="body">Input for advance. See documentation for details.</param>
    pplx::task<void> cancelPipelineExecutionStep(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t executionId,
        utility::string_t phaseId,
        utility::string_t stepId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        utility::string_t contentType,
        std::shared_ptr<Object> body
    ) const;
    /// <summary>
    /// Get current pipeline execution
    /// </summary>
    /// <remarks>
    /// Returns current pipeline execution if any.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    pplx::task<std::shared_ptr<PipelineExecution>> getCurrentExecution(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey
    ) const;
    /// <summary>
    /// Get pipeline execution
    /// </summary>
    /// <remarks>
    /// Returns a pipeline execution by id
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    pplx::task<std::shared_ptr<PipelineExecution>> getExecution(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t executionId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey
    ) const;
    /// <summary>
    /// List Executions
    /// </summary>
    /// <remarks>
    /// Returns the history of pipeline executions in a newest to oldest order
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="start">Pagination start parameter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Pagination limit parameter (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PipelineExecutionListRepresentation>> getExecutions(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        boost::optional<utility::string_t> start,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Get logs
    /// </summary>
    /// <remarks>
    /// Get the logs associated with a step.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="file">Identifier of the log file (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> getStepLogs(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t executionId,
        utility::string_t phaseId,
        utility::string_t stepId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        boost::optional<utility::string_t> file,
        boost::optional<utility::string_t> accept
    ) const;
    /// <summary>
    /// Start the pipeline
    /// </summary>
    /// <remarks>
    /// Starts the Pipeline. This works only if the pipeline is not already started.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="contentType">Must always be application/json</param>
    pplx::task<void> startPipeline(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey,
        utility::string_t contentType
    ) const;
    /// <summary>
    /// Get step metrics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    pplx::task<std::shared_ptr<PipelineStepMetrics>> stepMetric(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t executionId,
        utility::string_t phaseId,
        utility::string_t stepId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey
    ) const;
    /// <summary>
    /// Get step state
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    pplx::task<std::shared_ptr<PipelineExecutionStepState>> stepState(
        utility::string_t programId,
        utility::string_t pipelineId,
        utility::string_t executionId,
        utility::string_t phaseId,
        utility::string_t stepId,
        utility::string_t xGwImsOrgId,
        utility::string_t authorization,
        utility::string_t xApiKey
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PipelineExecutionApi_H_ */

