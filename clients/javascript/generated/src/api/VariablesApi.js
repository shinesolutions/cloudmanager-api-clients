/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Variable from '../model/Variable';
import VariableList from '../model/VariableList';

/**
* Variables service.
* @module api/VariablesApi
* @version 1.0.0
*/
export default class VariablesApi {

    /**
    * Constructs a new VariablesApi. 
    * @alias module:api/VariablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEnvironmentVariables operation.
     * @callback module:api/VariablesApi~getEnvironmentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Environment Variables
     * List the user defined variables for an environment (Cloud Service only).
     * @param {String} programId Identifier of the program
     * @param {String} environmentId Identifier of the environment
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/VariablesApi~getEnvironmentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableList}
     */
    getEnvironmentVariables(programId, environmentId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getEnvironmentVariables");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getEnvironmentVariables");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getEnvironmentVariables");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEnvironmentVariables");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getEnvironmentVariables");
      }

      let pathParams = {
        'programId': programId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VariableList;
      return this.apiClient.callApi(
        '/api/program/{programId}/environment/{environmentId}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchEnvironmentVariables operation.
     * @callback module:api/VariablesApi~patchEnvironmentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch User Environment Variables
     * Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
     * @param {String} programId Identifier of the program
     * @param {String} environmentId Identifier of the environment
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {String} contentType Must always be application/json
     * @param {Array.<module:model/Variable>} body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing.
     * @param {module:api/VariablesApi~patchEnvironmentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableList}
     */
    patchEnvironmentVariables(programId, environmentId, xGwImsOrgId, authorization, xApiKey, contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling patchEnvironmentVariables");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling patchEnvironmentVariables");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling patchEnvironmentVariables");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchEnvironmentVariables");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling patchEnvironmentVariables");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling patchEnvironmentVariables");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchEnvironmentVariables");
      }

      let pathParams = {
        'programId': programId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VariableList;
      return this.apiClient.callApi(
        '/api/program/{programId}/environment/{environmentId}/variables', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
