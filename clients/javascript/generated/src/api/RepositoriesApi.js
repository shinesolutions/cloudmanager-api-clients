/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Repository from '../model/Repository';
import RepositoryList from '../model/RepositoryList';

/**
* Repositories service.
* @module api/RepositoriesApi
* @version 1.0.0
*/
export default class RepositoriesApi {

    /**
    * Constructs a new RepositoriesApi. 
    * @alias module:api/RepositoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRepositories operation.
     * @callback module:api/RepositoriesApi~getRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Repositories
     * Lists all Repositories in an program
     * @param {String} programId Identifier of the program
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/RepositoriesApi~getRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryList}
     */
    getRepositories(programId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getRepositories");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getRepositories");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRepositories");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getRepositories");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepositoryList;
      return this.apiClient.callApi(
        '/api/program/{programId}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepository operation.
     * @callback module:api/RepositoriesApi~getRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Repository
     * Returns an repository by its id
     * @param {String} programId Identifier of the program
     * @param {String} repositoryId Identifier of the repository
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/RepositoriesApi~getRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    getRepository(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getRepository");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling getRepository");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getRepository");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRepository");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getRepository");
      }

      let pathParams = {
        'programId': programId,
        'repositoryId': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/api/program/{programId}/repository/{repositoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
