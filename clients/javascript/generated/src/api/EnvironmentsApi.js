/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import Environment from '../model/Environment';
import EnvironmentList from '../model/EnvironmentList';
import EnvironmentLogs from '../model/EnvironmentLogs';

/**
* Environments service.
* @module api/EnvironmentsApi
* @version 1.0.0
*/
export default class EnvironmentsApi {

    /**
    * Constructs a new EnvironmentsApi. 
    * @alias module:api/EnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteEnvironment operation.
     * @callback module:api/EnvironmentsApi~deleteEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteEnvironment
     * Delete environment
     * @param {String} programId Identifier of the application
     * @param {String} environmentId Identifier of the environment
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/EnvironmentsApi~deleteEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    deleteEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling deleteEnvironment");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling deleteEnvironment");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling deleteEnvironment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEnvironment");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling deleteEnvironment");
      }

      let pathParams = {
        'programId': programId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/api/program/{programId}/environment/{environmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadLogs operation.
     * @callback module:api/EnvironmentsApi~downloadLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Logs
     * Download environment logs
     * @param {String} programId Identifier of the program
     * @param {String} environmentId Identifier of the environment
     * @param {String} service Name of service
     * @param {String} name Name of log
     * @param {String} _date date for which log is required
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
     * @param {module:api/EnvironmentsApi~downloadLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadLogs(programId, environmentId, service, name, _date, xGwImsOrgId, authorization, xApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling downloadLogs");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling downloadLogs");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling downloadLogs");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling downloadLogs");
      }
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling downloadLogs");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling downloadLogs");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling downloadLogs");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling downloadLogs");
      }

      let pathParams = {
        'programId': programId,
        'environmentId': environmentId
      };
      let queryParams = {
        'service': service,
        'name': name,
        'date': _date
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey,
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/program/{programId}/environment/{environmentId}/logs/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironment operation.
     * @callback module:api/EnvironmentsApi~getEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Environment
     * Returns an environment by its id
     * @param {String} programId Identifier of the program
     * @param {String} environmentId Identifier of the environment
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/EnvironmentsApi~getEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    getEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getEnvironment");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getEnvironment");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getEnvironment");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEnvironment");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getEnvironment");
      }

      let pathParams = {
        'programId': programId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/api/program/{programId}/environment/{environmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentLogs operation.
     * @callback module:api/EnvironmentsApi~getEnvironmentLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Environment Logs
     * List all logs available in environment
     * @param {String} programId Identifier of the program
     * @param {String} environmentId Identifier of the environment
     * @param {Number} days number of days for which logs are required
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.service Names of services
     * @param {Array.<String>} opts.name Names of log
     * @param {module:api/EnvironmentsApi~getEnvironmentLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentLogs}
     */
    getEnvironmentLogs(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getEnvironmentLogs");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getEnvironmentLogs");
      }
      // verify the required parameter 'days' is set
      if (days === undefined || days === null) {
        throw new Error("Missing the required parameter 'days' when calling getEnvironmentLogs");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getEnvironmentLogs");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEnvironmentLogs");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getEnvironmentLogs");
      }

      let pathParams = {
        'programId': programId,
        'environmentId': environmentId
      };
      let queryParams = {
        'service': this.apiClient.buildCollectionParam(opts['service'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'days': days
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvironmentLogs;
      return this.apiClient.callApi(
        '/api/program/{programId}/environment/{environmentId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironments operation.
     * @callback module:api/EnvironmentsApi~getEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnvironmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Environments
     * Lists all environments in an program
     * @param {String} programId Identifier of the program
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type Type of the environment
     * @param {module:api/EnvironmentsApi~getEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnvironmentList}
     */
    getEnvironments(programId, xGwImsOrgId, authorization, xApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getEnvironments");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getEnvironments");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getEnvironments");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getEnvironments");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnvironmentList;
      return this.apiClient.callApi(
        '/api/program/{programId}/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
