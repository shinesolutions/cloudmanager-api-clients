/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Pipeline from '../model/Pipeline';
import PipelineList from '../model/PipelineList';

/**
* Pipelines service.
* @module api/PipelinesApi
* @version 1.0.0
*/
export default class PipelinesApi {

    /**
    * Constructs a new PipelinesApi. 
    * @alias module:api/PipelinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePipeline operation.
     * @callback module:api/PipelinesApi~deletePipelineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Pipeline
     * Delete a pipeline. All the data is wiped.
     * @param {String} programId Identifier of the program
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelinesApi~deletePipelineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling deletePipeline");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling deletePipeline");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling deletePipeline");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePipeline");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling deletePipeline");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipeline operation.
     * @callback module:api/PipelinesApi~getPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Pipeline
     * Returns a pipeline by its id
     * @param {String} programId Identifier of the program
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelinesApi~getPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    getPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getPipeline");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getPipeline");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getPipeline");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPipeline");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getPipeline");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelines operation.
     * @callback module:api/PipelinesApi~getPipelinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Pipelines
     * Returns all the pipelines that the requesting user has access to in an program
     * @param {String} programId Identifier of the program
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelinesApi~getPipelinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineList}
     */
    getPipelines(programId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getPipelines");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getPipelines");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPipelines");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getPipelines");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineList;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchPipeline operation.
     * @callback module:api/PipelinesApi~patchPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches Pipeline
     * Patches a pipeline within an program.
     * @param {String} programId Identifier of the program
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {String} contentType Must always be application/json
     * @param {module:model/Pipeline} body The updated Pipeline
     * @param {module:api/PipelinesApi~patchPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    patchPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling patchPipeline");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling patchPipeline");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling patchPipeline");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling patchPipeline");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling patchPipeline");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling patchPipeline");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchPipeline");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
