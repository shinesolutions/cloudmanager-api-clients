/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PipelineExecution from '../model/PipelineExecution';
import PipelineExecutionListRepresentation from '../model/PipelineExecutionListRepresentation';
import PipelineExecutionStepState from '../model/PipelineExecutionStepState';
import PipelineStepMetrics from '../model/PipelineStepMetrics';

/**
* PipelineExecution service.
* @module api/PipelineExecutionApi
* @version 1.0.0
*/
export default class PipelineExecutionApi {

    /**
    * Constructs a new PipelineExecutionApi. 
    * @alias module:api/PipelineExecutionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the advancePipelineExecution operation.
     * @callback module:api/PipelineExecutionApi~advancePipelineExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advance
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} executionId Identifier of the execution
     * @param {String} phaseId Identifier of the phase
     * @param {String} stepId Identifier of the step
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {String} contentType Must always be application/json
     * @param {Object} body Input for advance. See documentation for details.
     * @param {module:api/PipelineExecutionApi~advancePipelineExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling advancePipelineExecution");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling advancePipelineExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling advancePipelineExecution");
      }
      // verify the required parameter 'phaseId' is set
      if (phaseId === undefined || phaseId === null) {
        throw new Error("Missing the required parameter 'phaseId' when calling advancePipelineExecution");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling advancePipelineExecution");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling advancePipelineExecution");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling advancePipelineExecution");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling advancePipelineExecution");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling advancePipelineExecution");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling advancePipelineExecution");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId,
        'executionId': executionId,
        'phaseId': phaseId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelPipelineExecutionStep operation.
     * @callback module:api/PipelineExecutionApi~cancelPipelineExecutionStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} executionId Identifier of the execution
     * @param {String} phaseId Identifier of the phase
     * @param {String} stepId Identifier of the step
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {String} contentType Must always be application/json
     * @param {Object} body Input for advance. See documentation for details.
     * @param {module:api/PipelineExecutionApi~cancelPipelineExecutionStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'phaseId' is set
      if (phaseId === undefined || phaseId === null) {
        throw new Error("Missing the required parameter 'phaseId' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelPipelineExecutionStep");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling cancelPipelineExecutionStep");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId,
        'executionId': executionId,
        'phaseId': phaseId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentExecution operation.
     * @callback module:api/PipelineExecutionApi~getCurrentExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current pipeline execution
     * Returns current pipeline execution if any.
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelineExecutionApi~getCurrentExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineExecution}
     */
    getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getCurrentExecution");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getCurrentExecution");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getCurrentExecution");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCurrentExecution");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getCurrentExecution");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineExecution;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecution operation.
     * @callback module:api/PipelineExecutionApi~getExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pipeline execution
     * Returns a pipeline execution by id
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} executionId Identifier of the execution
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelineExecutionApi~getExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineExecution}
     */
    getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getExecution");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getExecution");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getExecution");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getExecution");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getExecution");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineExecution;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecutions operation.
     * @callback module:api/PipelineExecutionApi~getExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineExecutionListRepresentation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Executions
     * Returns the history of pipeline executions in a newest to oldest order
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {Object} opts Optional parameters
     * @param {String} opts.start Pagination start parameter
     * @param {Number} opts.limit Pagination limit parameter
     * @param {module:api/PipelineExecutionApi~getExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineExecutionListRepresentation}
     */
    getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getExecutions");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getExecutions");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getExecutions");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getExecutions");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getExecutions");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineExecutionListRepresentation;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStepLogs operation.
     * @callback module:api/PipelineExecutionApi~getStepLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs
     * Get the logs associated with a step.
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} executionId Identifier of the execution
     * @param {String} phaseId Identifier of the phase
     * @param {String} stepId Identifier of the step
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {Object} opts Optional parameters
     * @param {String} opts.file Identifier of the log file
     * @param {String} opts.accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
     * @param {module:api/PipelineExecutionApi~getStepLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling getStepLogs");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getStepLogs");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getStepLogs");
      }
      // verify the required parameter 'phaseId' is set
      if (phaseId === undefined || phaseId === null) {
        throw new Error("Missing the required parameter 'phaseId' when calling getStepLogs");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling getStepLogs");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling getStepLogs");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getStepLogs");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling getStepLogs");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId,
        'executionId': executionId,
        'phaseId': phaseId,
        'stepId': stepId
      };
      let queryParams = {
        'file': opts['file']
      };
      let headerParams = {
        'Accept': opts['accept'],
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startPipeline operation.
     * @callback module:api/PipelineExecutionApi~startPipelineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the pipeline
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {String} contentType Must always be application/json
     * @param {module:api/PipelineExecutionApi~startPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling startPipeline");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling startPipeline");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling startPipeline");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling startPipeline");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling startPipeline");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling startPipeline");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stepMetric operation.
     * @callback module:api/PipelineExecutionApi~stepMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineStepMetrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get step metrics
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} executionId Identifier of the execution
     * @param {String} phaseId Identifier of the phase
     * @param {String} stepId Identifier of the step
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelineExecutionApi~stepMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineStepMetrics}
     */
    stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling stepMetric");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling stepMetric");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling stepMetric");
      }
      // verify the required parameter 'phaseId' is set
      if (phaseId === undefined || phaseId === null) {
        throw new Error("Missing the required parameter 'phaseId' when calling stepMetric");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling stepMetric");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling stepMetric");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling stepMetric");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling stepMetric");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId,
        'executionId': executionId,
        'phaseId': phaseId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineStepMetrics;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stepState operation.
     * @callback module:api/PipelineExecutionApi~stepStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineExecutionStepState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get step state
     * @param {String} programId Identifier of the program.
     * @param {String} pipelineId Identifier of the pipeline
     * @param {String} executionId Identifier of the execution
     * @param {String} phaseId Identifier of the phase
     * @param {String} stepId Identifier of the step
     * @param {String} xGwImsOrgId IMS organization ID that the request is being made under.
     * @param {String} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param {String} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param {module:api/PipelineExecutionApi~stepStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineExecutionStepState}
     */
    stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling stepState");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling stepState");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling stepState");
      }
      // verify the required parameter 'phaseId' is set
      if (phaseId === undefined || phaseId === null) {
        throw new Error("Missing the required parameter 'phaseId' when calling stepState");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling stepState");
      }
      // verify the required parameter 'xGwImsOrgId' is set
      if (xGwImsOrgId === undefined || xGwImsOrgId === null) {
        throw new Error("Missing the required parameter 'xGwImsOrgId' when calling stepState");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling stepState");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling stepState");
      }

      let pathParams = {
        'programId': programId,
        'pipelineId': pipelineId,
        'executionId': executionId,
        'phaseId': phaseId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-gw-ims-org-id': xGwImsOrgId,
        'Authorization': authorization,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineExecutionStepState;
      return this.apiClient.callApi(
        '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
