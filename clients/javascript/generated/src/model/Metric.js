/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metric model module.
 * @module model/Metric
 * @version 1.0.0
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * Describes a __Metric__
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('passed')) {
                obj['passed'] = ApiClient.convertToType(data['passed'], 'Boolean');
            }
            if (data.hasOwnProperty('override')) {
                obj['override'] = ApiClient.convertToType(data['override'], 'Boolean');
            }
            if (data.hasOwnProperty('actualValue')) {
                obj['actualValue'] = ApiClient.convertToType(data['actualValue'], 'String');
            }
            if (data.hasOwnProperty('expectedValue')) {
                obj['expectedValue'] = ApiClient.convertToType(data['expectedValue'], 'String');
            }
            if (data.hasOwnProperty('comparator')) {
                obj['comparator'] = ApiClient.convertToType(data['comparator'], 'String');
            }
            if (data.hasOwnProperty('kpi')) {
                obj['kpi'] = ApiClient.convertToType(data['kpi'], 'String');
            }
        }
        return obj;
    }


}

/**
 * KPI result identifier
 * @member {String} id
 */
Metric.prototype['id'] = undefined;

/**
 * Severity of the metric
 * @member {module:model/Metric.SeverityEnum} severity
 */
Metric.prototype['severity'] = undefined;

/**
 * Whether metric is considered passed
 * @member {Boolean} passed
 * @default false
 */
Metric.prototype['passed'] = false;

/**
 * Whether user override the failed metric
 * @member {Boolean} override
 * @default false
 */
Metric.prototype['override'] = false;

/**
 * Expected value for the metric
 * @member {String} actualValue
 */
Metric.prototype['actualValue'] = undefined;

/**
 * Expected value for the metric
 * @member {String} expectedValue
 */
Metric.prototype['expectedValue'] = undefined;

/**
 * Comparator used for the metric
 * @member {module:model/Metric.ComparatorEnum} comparator
 */
Metric.prototype['comparator'] = undefined;

/**
 * KPI identifier
 * @member {String} kpi
 */
Metric.prototype['kpi'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
Metric['SeverityEnum'] = {

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical",

    /**
     * value: "important"
     * @const
     */
    "important": "important",

    /**
     * value: "informational"
     * @const
     */
    "informational": "informational"
};


/**
 * Allowed values for the <code>comparator</code> property.
 * @enum {String}
 * @readonly
 */
Metric['ComparatorEnum'] = {

    /**
     * value: "GT"
     * @const
     */
    "GT": "GT",

    /**
     * value: "GTE"
     * @const
     */
    "GTE": "GTE",

    /**
     * value: "LT"
     * @const
     */
    "LT": "LT",

    /**
     * value: "LTE"
     * @const
     */
    "LTE": "LTE",

    /**
     * value: "EQ"
     * @const
     */
    "EQ": "EQ",

    /**
     * value: "NEQ"
     * @const
     */
    "NEQ": "NEQ"
};



export default Metric;

