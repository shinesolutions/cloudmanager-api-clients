/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipelineLinks from './PipelineLinks';
import PipelinePhase from './PipelinePhase';

/**
 * The Pipeline model module.
 * @module model/Pipeline
 * @version 1.0.0
 */
class Pipeline {
    /**
     * Constructs a new <code>Pipeline</code>.
     * Describes a __CI/CD Pipeline__
     * @alias module:model/Pipeline
     * @param name {String} Name of the pipeline
     * @param phases {Array.<module:model/PipelinePhase>} Pipeline phases in execution order
     */
    constructor(name, phases) { 
        
        Pipeline.initialize(this, name, phases);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, phases) { 
        obj['name'] = name;
        obj['phases'] = phases;
    }

    /**
     * Constructs a <code>Pipeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pipeline} obj Optional instance to populate.
     * @return {module:model/Pipeline} The populated <code>Pipeline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pipeline();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('programId')) {
                obj['programId'] = ApiClient.convertToType(data['programId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('lastStartedAt')) {
                obj['lastStartedAt'] = ApiClient.convertToType(data['lastStartedAt'], 'Date');
            }
            if (data.hasOwnProperty('lastFinishedAt')) {
                obj['lastFinishedAt'] = ApiClient.convertToType(data['lastFinishedAt'], 'Date');
            }
            if (data.hasOwnProperty('phases')) {
                obj['phases'] = ApiClient.convertToType(data['phases'], [PipelinePhase]);
            }
            if (data.hasOwnProperty('_links')) {
                obj['_links'] = PipelineLinks.constructFromObject(data['_links']);
            }
        }
        return obj;
    }


}

/**
 * Identifier of the pipeline. Unique within the program.
 * @member {String} id
 */
Pipeline.prototype['id'] = undefined;

/**
 * Identifier of the program. Unique within the space.
 * @member {String} programId
 */
Pipeline.prototype['programId'] = undefined;

/**
 * Name of the pipeline
 * @member {String} name
 */
Pipeline.prototype['name'] = undefined;

/**
 * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
 * @member {module:model/Pipeline.TriggerEnum} trigger
 */
Pipeline.prototype['trigger'] = undefined;

/**
 * Pipeline status
 * @member {module:model/Pipeline.StatusEnum} status
 */
Pipeline.prototype['status'] = undefined;

/**
 * Create date
 * @member {Date} createdAt
 */
Pipeline.prototype['createdAt'] = undefined;

/**
 * Update date
 * @member {Date} updatedAt
 */
Pipeline.prototype['updatedAt'] = undefined;

/**
 * Last pipeline execution start
 * @member {Date} lastStartedAt
 */
Pipeline.prototype['lastStartedAt'] = undefined;

/**
 * Last pipeline execution end
 * @member {Date} lastFinishedAt
 */
Pipeline.prototype['lastFinishedAt'] = undefined;

/**
 * Pipeline phases in execution order
 * @member {Array.<module:model/PipelinePhase>} phases
 */
Pipeline.prototype['phases'] = undefined;

/**
 * @member {module:model/PipelineLinks} _links
 */
Pipeline.prototype['_links'] = undefined;





/**
 * Allowed values for the <code>trigger</code> property.
 * @enum {String}
 * @readonly
 */
Pipeline['TriggerEnum'] = {

    /**
     * value: "ON_COMMIT"
     * @const
     */
    "ON_COMMIT": "ON_COMMIT",

    /**
     * value: "MANUAL"
     * @const
     */
    "MANUAL": "MANUAL",

    /**
     * value: "SCHEDULE"
     * @const
     */
    "SCHEDULE": "SCHEDULE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Pipeline['StatusEnum'] = {

    /**
     * value: "IDLE"
     * @const
     */
    "IDLE": "IDLE",

    /**
     * value: "BUSY"
     * @const
     */
    "BUSY": "BUSY",

    /**
     * value: "WAITING"
     * @const
     */
    "WAITING": "WAITING"
};



export default Pipeline;

