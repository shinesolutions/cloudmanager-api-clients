/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PipelinePhase model module.
 * @module model/PipelinePhase
 * @version 1.0.0
 */
class PipelinePhase {
    /**
     * Constructs a new <code>PipelinePhase</code>.
     * Describes a phase of a pipeline
     * @alias module:model/PipelinePhase
     * @param type {module:model/PipelinePhase.TypeEnum} Type of the phase
     */
    constructor(type) { 
        
        PipelinePhase.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PipelinePhase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelinePhase} obj Optional instance to populate.
     * @return {module:model/PipelinePhase} The populated <code>PipelinePhase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelinePhase();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('repositoryId')) {
                obj['repositoryId'] = ApiClient.convertToType(data['repositoryId'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('environmentId')) {
                obj['environmentId'] = ApiClient.convertToType(data['environmentId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Name of the phase
 * @member {String} name
 */
PipelinePhase.prototype['name'] = undefined;

/**
 * Type of the phase
 * @member {module:model/PipelinePhase.TypeEnum} type
 */
PipelinePhase.prototype['type'] = undefined;

/**
 * Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD
 * @member {String} repositoryId
 */
PipelinePhase.prototype['repositoryId'] = undefined;

/**
 * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.
 * @member {String} branch
 */
PipelinePhase.prototype['branch'] = undefined;

/**
 * Identifier of the target environment. Mandatory if type=DEPLOY
 * @member {String} environmentId
 */
PipelinePhase.prototype['environmentId'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PipelinePhase['TypeEnum'] = {

    /**
     * value: "VALIDATE"
     * @const
     */
    "VALIDATE": "VALIDATE",

    /**
     * value: "BUILD"
     * @const
     */
    "BUILD": "BUILD",

    /**
     * value: "DEPLOY"
     * @const
     */
    "DEPLOY": "DEPLOY"
};



export default PipelinePhase;

