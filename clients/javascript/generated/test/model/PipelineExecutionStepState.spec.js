/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NodeAemCloudmanagerApiClient);
  }
}(this, function(expect, NodeAemCloudmanagerApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PipelineExecutionStepState', function() {
    it('should create an instance of PipelineExecutionStepState', function() {
      // uncomment below and update the code to test PipelineExecutionStepState
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be.a(NodeAemCloudmanagerApiClient.PipelineExecutionStepState);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property stepId (base name: "stepId")', function() {
      // uncomment below and update the code to test the property stepId
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property phaseId (base name: "phaseId")', function() {
      // uncomment below and update the code to test the property phaseId
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property action (base name: "action")', function() {
      // uncomment below and update the code to test the property action
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property repository (base name: "repository")', function() {
      // uncomment below and update the code to test the property repository
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property branch (base name: "branch")', function() {
      // uncomment below and update the code to test the property branch
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property environment (base name: "environment")', function() {
      // uncomment below and update the code to test the property environment
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property environmentType (base name: "environmentType")', function() {
      // uncomment below and update the code to test the property environmentType
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property startedAt (base name: "startedAt")', function() {
      // uncomment below and update the code to test the property startedAt
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property finishedAt (base name: "finishedAt")', function() {
      // uncomment below and update the code to test the property finishedAt
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instane = new NodeAemCloudmanagerApiClient.PipelineExecutionStepState();
      //expect(instance).to.be();
    });

  });

}));
