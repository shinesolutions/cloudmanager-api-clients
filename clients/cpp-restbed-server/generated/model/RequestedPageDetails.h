/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RequestedPageDetails.h
 *
 * Filtering and sorting page details
 */

#ifndef RequestedPageDetails_H_
#define RequestedPageDetails_H_



#include <string>
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Filtering and sorting page details
/// </summary>
class  RequestedPageDetails 
{
public:
    RequestedPageDetails();
    virtual ~RequestedPageDetails();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// RequestedPageDetails members

    /// <summary>
    /// 
    /// </summary>
    int32_t getStart() const;
    void setStart(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLimit() const;
    void setLimit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOrderBy() const;
    void setOrderBy(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getProperty() const;
    void setProperty(std::vector<std::string> value);

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNext() const;
    void setNext(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPrev() const;
    void setPrev(int32_t value);
protected:
    int32_t m_Start;
    int32_t m_Limit;
    std::string m_OrderBy;
    std::vector<std::string> m_Property;
    std::string m_Type;
    int32_t m_Next;
    int32_t m_Prev;
};

}
}
}
}

#endif /* RequestedPageDetails_H_ */
