/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelinePhase.h"

#include <string>
#include <sstream>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelinePhase::PipelinePhase()
{
	m_Name = "";
	m_Type = "";
	m_TypeEnum = { "VALIDATE", "BUILD", "DEPLOY" };
	m_RepositoryId = "";
	m_Branch = "";
	m_EnvironmentId = "";
}

PipelinePhase::~PipelinePhase()
{
}

std::string PipelinePhase::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void PipelinePhase::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PipelinePhase::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("name", m_Name);
	pt.put("type", m_Type);
	pt.put("repositoryId", m_RepositoryId);
	pt.put("branch", m_Branch);
	pt.put("environmentId", m_EnvironmentId);
	return pt;
}

void PipelinePhase::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Name = pt.get("name", "");
	setType(pt.get("type", ""));
	m_RepositoryId = pt.get("repositoryId", "");
	m_Branch = pt.get("branch", "");
	m_EnvironmentId = pt.get("environmentId", "");
}

std::string PipelinePhase::getName() const
{
    return m_Name;
}
void PipelinePhase::setName(std::string value)
{
	m_Name = value;
}
std::string PipelinePhase::getType() const
{
    return m_Type;
}
void PipelinePhase::setType(std::string value)
{
	if (std::find(m_TypeEnum.begin(), m_TypeEnum.end(), value) != m_TypeEnum.end()) {
		m_Type = value;
	}
}
std::string PipelinePhase::getRepositoryId() const
{
    return m_RepositoryId;
}
void PipelinePhase::setRepositoryId(std::string value)
{
	m_RepositoryId = value;
}
std::string PipelinePhase::getBranch() const
{
    return m_Branch;
}
void PipelinePhase::setBranch(std::string value)
{
	m_Branch = value;
}
std::string PipelinePhase::getEnvironmentId() const
{
    return m_EnvironmentId;
}
void PipelinePhase::setEnvironmentId(std::string value)
{
	m_EnvironmentId = value;
}

}
}
}
}

