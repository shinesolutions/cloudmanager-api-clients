/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BadRequestError.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BadRequestError::BadRequestError()
{
	m_Status = 0;
	m_Type = "";
	m_Title = "";
}

BadRequestError::~BadRequestError()
{
}

std::string BadRequestError::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BadRequestError::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BadRequestError::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("status", m_Status);
	pt.put("type", m_Type);
	pt.put("title", m_Title);
	// generate tree for MissingParams
	if (!m_MissingParams.empty()) {
		for (const auto &childEntry : m_MissingParams) {
			ptree MissingParams_node;
			MissingParams_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", MissingParams_node));
		}
		pt.add_child("missingParams", tmp_node);
		tmp_node.clear();
	}
	// generate tree for InvalidParams
	if (!m_InvalidParams.empty()) {
		for (const auto &childEntry : m_InvalidParams) {
			ptree InvalidParams_node;
			InvalidParams_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", InvalidParams_node));
		}
		pt.add_child("invalidParams", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BadRequestError::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Status = pt.get("status", 0);
	m_Type = pt.get("type", "");
	m_Title = pt.get("title", "");
	// push all items of MissingParams into member vector
	if (pt.get_child_optional("missingParams")) {
		for (const auto &childTree : pt.get_child("missingParams")) {
			m_MissingParams.emplace_back(childTree.second.data());
		}
	}
	// push all items of InvalidParams into member vector
	if (pt.get_child_optional("invalidParams")) {
		for (const auto &childTree : pt.get_child("invalidParams")) {
			m_InvalidParams.emplace_back(childTree.second.data());
		}
	}
}

int32_t BadRequestError::getStatus() const
{
    return m_Status;
}
void BadRequestError::setStatus(int32_t value)
{
	m_Status = value;
}
std::string BadRequestError::getType() const
{
    return m_Type;
}
void BadRequestError::setType(std::string value)
{
	m_Type = value;
}
std::string BadRequestError::getTitle() const
{
    return m_Title;
}
void BadRequestError::setTitle(std::string value)
{
	m_Title = value;
}
std::vector<std::shared_ptr<MissingParameter>> BadRequestError::getMissingParams() const
{
    return m_MissingParams;
}
void BadRequestError::setMissingParams(std::vector<std::shared_ptr<MissingParameter>> value)
{
	m_MissingParams = value;
}
std::vector<std::shared_ptr<InvalidParameter>> BadRequestError::getInvalidParams() const
{
    return m_InvalidParams;
}
void BadRequestError::setInvalidParams(std::vector<std::shared_ptr<InvalidParameter>> value)
{
	m_InvalidParams = value;
}

}
}
}
}

