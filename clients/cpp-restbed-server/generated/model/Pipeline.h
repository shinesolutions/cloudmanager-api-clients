/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Pipeline.h
 *
 * Describes a __CI/CD Pipeline__
 */

#ifndef Pipeline_H_
#define Pipeline_H_



#include "Pipeline__links.h"
#include <string>
#include <vector>
#include "PipelinePhase.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes a __CI/CD Pipeline__
/// </summary>
class  Pipeline 
{
public:
    Pipeline();
    virtual ~Pipeline();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Pipeline members

    /// <summary>
    /// Identifier of the pipeline. Unique within the program.
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    std::string getProgramId() const;
    void setProgramId(std::string value);

    /// <summary>
    /// Name of the pipeline
    /// </summary>
    std::string getName() const;
    void setName(std::string value);

    /// <summary>
    /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
    /// </summary>
    std::string getTrigger() const;
    void setTrigger(std::string value);

    /// <summary>
    /// Pipeline status
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// Create date
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Update date
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string value);

    /// <summary>
    /// Last pipeline execution start
    /// </summary>
    std::string getLastStartedAt() const;
    void setLastStartedAt(std::string value);

    /// <summary>
    /// Last pipeline execution end
    /// </summary>
    std::string getLastFinishedAt() const;
    void setLastFinishedAt(std::string value);

    /// <summary>
    /// Pipeline phases in execution order
    /// </summary>
    std::vector<std::shared_ptr<PipelinePhase>> getPhases() const;
    void setPhases(std::vector<std::shared_ptr<PipelinePhase>> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Pipeline__links> get_Links() const;
    void set_Links(std::shared_ptr<Pipeline__links> value);
protected:
    std::string m_Id;
    std::string m_ProgramId;
    std::string m_Name;
    std::string m_Trigger;
    std::string m_Status;
    std::string m_CreatedAt;
    std::string m_UpdatedAt;
    std::string m_LastStartedAt;
    std::string m_LastFinishedAt;
    std::vector<std::shared_ptr<PipelinePhase>> m_Phases;
    std::shared_ptr<Pipeline__links> m__links;
    std::vector<std::string> m_TriggerEnum;
    std::vector<std::string> m_StatusEnum;
};

}
}
}
}

#endif /* Pipeline_H_ */
