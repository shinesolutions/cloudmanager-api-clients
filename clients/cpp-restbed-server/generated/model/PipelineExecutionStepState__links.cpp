/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineExecutionStepState__links.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineExecutionStepState__links::PipelineExecutionStepState__links()
{
}

PipelineExecutionStepState__links::~PipelineExecutionStepState__links()
{
}

std::string PipelineExecutionStepState__links::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void PipelineExecutionStepState__links::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PipelineExecutionStepState__links::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	if (m_Http__ns_adobe_com_adobecloud_rel_execution != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/execution", m_Http__ns_adobe_com_adobecloud_rel_execution->toPropertyTree());
	}
	if (m_Http__ns_adobe_com_adobecloud_rel_pipeline != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/pipeline", m_Http__ns_adobe_com_adobecloud_rel_pipeline->toPropertyTree());
	}
	if (m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/pipeline/logs", m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs->toPropertyTree());
	}
	if (m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/pipeline/metrics", m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics->toPropertyTree());
	}
	if (m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/pipeline/advance", m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance->toPropertyTree());
	}
	if (m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/pipeline/cancel", m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel->toPropertyTree());
	}
	if (m_Http__ns_adobe_com_adobecloud_rel_program != nullptr) {
		pt.add_child("http://ns.adobe.com/adobecloud/rel/program", m_Http__ns_adobe_com_adobecloud_rel_program->toPropertyTree());
	}
	if (m_Self != nullptr) {
		pt.add_child("self", m_Self->toPropertyTree());
	}
	return pt;
}

void PipelineExecutionStepState__links::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/execution")) {
		m_Http__ns_adobe_com_adobecloud_rel_execution = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_execution->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/execution"));
	}
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/pipeline")) {
		m_Http__ns_adobe_com_adobecloud_rel_pipeline = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_pipeline->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/pipeline"));
	}
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/pipeline/logs")) {
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/pipeline/logs"));
	}
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/pipeline/metrics")) {
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/pipeline/metrics"));
	}
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/pipeline/advance")) {
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/pipeline/advance"));
	}
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/pipeline/cancel")) {
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/pipeline/cancel"));
	}
	if (pt.get_child_optional("http://ns.adobe.com/adobecloud/rel/program")) {
		m_Http__ns_adobe_com_adobecloud_rel_program = std::make_shared<HalLink>();
		m_Http__ns_adobe_com_adobecloud_rel_program->fromPropertyTree(pt.get_child("http://ns.adobe.com/adobecloud/rel/program"));
	}
	if (pt.get_child_optional("self")) {
		m_Self = std::make_shared<HalLink>();
		m_Self->fromPropertyTree(pt.get_child("self"));
	}
}

std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelExecution() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_execution;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelExecution(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_execution = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelPipeline() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipeline;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelPipeline(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_pipeline = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelPipelineLogs() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelPipelineLogs(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_pipeline_logs = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelPipelineMetrics() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelPipelineMetrics(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_pipeline_metrics = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelPipelineAdvance() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelPipelineAdvance(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_pipeline_advance = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelPipelineCancel() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelPipelineCancel(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_pipeline_cancel = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getHttpNsAdobeComAdobecloudRelProgram() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_program;
}
void PipelineExecutionStepState__links::setHttpNsAdobeComAdobecloudRelProgram(std::shared_ptr<HalLink> value)
{
	m_Http__ns_adobe_com_adobecloud_rel_program = value;
}
std::shared_ptr<HalLink> PipelineExecutionStepState__links::getSelf() const
{
    return m_Self;
}
void PipelineExecutionStepState__links::setSelf(std::shared_ptr<HalLink> value)
{
	m_Self = value;
}

}
}
}
}

