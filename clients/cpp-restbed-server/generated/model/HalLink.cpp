/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HalLink.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

HalLink::HalLink()
{
	m_Href = "";
	m_Templated = false;
	m_Type = "";
	m_Deprecation = "";
	m_Profile = "";
	m_Title = "";
	m_Hreflang = "";
	m_Name = "";
}

HalLink::~HalLink()
{
}

std::string HalLink::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void HalLink::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree HalLink::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("href", m_Href);
	pt.put("templated", m_Templated);
	pt.put("type", m_Type);
	pt.put("deprecation", m_Deprecation);
	pt.put("profile", m_Profile);
	pt.put("title", m_Title);
	pt.put("hreflang", m_Hreflang);
	pt.put("name", m_Name);
	return pt;
}

void HalLink::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Href = pt.get("href", "");
	m_Templated = pt.get("templated", false);
	m_Type = pt.get("type", "");
	m_Deprecation = pt.get("deprecation", "");
	m_Profile = pt.get("profile", "");
	m_Title = pt.get("title", "");
	m_Hreflang = pt.get("hreflang", "");
	m_Name = pt.get("name", "");
}

std::string HalLink::getHref() const
{
    return m_Href;
}
void HalLink::setHref(std::string value)
{
	m_Href = value;
}
bool HalLink::isTemplated() const
{
    return m_Templated;
}
void HalLink::setTemplated(bool value)
{
	m_Templated = value;
}
std::string HalLink::getType() const
{
    return m_Type;
}
void HalLink::setType(std::string value)
{
	m_Type = value;
}
std::string HalLink::getDeprecation() const
{
    return m_Deprecation;
}
void HalLink::setDeprecation(std::string value)
{
	m_Deprecation = value;
}
std::string HalLink::getProfile() const
{
    return m_Profile;
}
void HalLink::setProfile(std::string value)
{
	m_Profile = value;
}
std::string HalLink::getTitle() const
{
    return m_Title;
}
void HalLink::setTitle(std::string value)
{
	m_Title = value;
}
std::string HalLink::getHreflang() const
{
    return m_Hreflang;
}
void HalLink::setHreflang(std::string value)
{
	m_Hreflang = value;
}
std::string HalLink::getName() const
{
    return m_Name;
}
void HalLink::setName(std::string value)
{
	m_Name = value;
}

}
}
}
}

