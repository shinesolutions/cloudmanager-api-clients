/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineExecutionStepState.h"

#include <string>
#include <sstream>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineExecutionStepState::PipelineExecutionStepState()
{
	m_Id = "";
	m_StepId = "";
	m_PhaseId = "";
	m_Action = "";
	m_Repository = "";
	m_Branch = "";
	m_Environment = "";
	m_EnvironmentType = "";
	m_StartedAt = "";
	m_FinishedAt = "";
	m_Status = "";
	m_StatusEnum = { "NOT_STARTED", "RUNNING", "FINISHED", "ERROR", "ROLLING_BACK", "ROLLED_BACK", "WAITING", "CANCELLED", "FAILED" };
}

PipelineExecutionStepState::~PipelineExecutionStepState()
{
}

std::string PipelineExecutionStepState::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void PipelineExecutionStepState::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PipelineExecutionStepState::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("stepId", m_StepId);
	pt.put("phaseId", m_PhaseId);
	pt.put("action", m_Action);
	pt.put("repository", m_Repository);
	pt.put("branch", m_Branch);
	pt.put("environment", m_Environment);
	pt.put("environmentType", m_EnvironmentType);
	pt.put("startedAt", m_StartedAt);
	pt.put("finishedAt", m_FinishedAt);
	// generate tree for Details
	if (!m_Details.empty()) {
		for (const auto &childEntry : m_Details) {
			ptree Details_node;
			Details_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Details_node));
		}
		pt.add_child("details", tmp_node);
		tmp_node.clear();
	}
	pt.put("status", m_Status);
	if (m__links != nullptr) {
		pt.add_child("_links", m__links->toPropertyTree());
	}
	return pt;
}

void PipelineExecutionStepState::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_StepId = pt.get("stepId", "");
	m_PhaseId = pt.get("phaseId", "");
	m_Action = pt.get("action", "");
	m_Repository = pt.get("repository", "");
	m_Branch = pt.get("branch", "");
	m_Environment = pt.get("environment", "");
	m_EnvironmentType = pt.get("environmentType", "");
	m_StartedAt = pt.get("startedAt", "");
	m_FinishedAt = pt.get("finishedAt", "");
	// push all items of Details into member vector
	if (pt.get_child_optional("details")) {
		for (const auto &childTree : pt.get_child("details")) {
			m_Inner.emplace_back(childTree.second.data());
		}
	}
	setStatus(pt.get("status", ""));
	if (pt.get_child_optional("_links")) {
		m__links = std::make_shared<PipelineExecutionStepState__links>();
		m__links->fromPropertyTree(pt.get_child("_links"));
	}
}

std::string PipelineExecutionStepState::getId() const
{
    return m_Id;
}
void PipelineExecutionStepState::setId(std::string value)
{
	m_Id = value;
}
std::string PipelineExecutionStepState::getStepId() const
{
    return m_StepId;
}
void PipelineExecutionStepState::setStepId(std::string value)
{
	m_StepId = value;
}
std::string PipelineExecutionStepState::getPhaseId() const
{
    return m_PhaseId;
}
void PipelineExecutionStepState::setPhaseId(std::string value)
{
	m_PhaseId = value;
}
std::string PipelineExecutionStepState::getAction() const
{
    return m_Action;
}
void PipelineExecutionStepState::setAction(std::string value)
{
	m_Action = value;
}
std::string PipelineExecutionStepState::getRepository() const
{
    return m_Repository;
}
void PipelineExecutionStepState::setRepository(std::string value)
{
	m_Repository = value;
}
std::string PipelineExecutionStepState::getBranch() const
{
    return m_Branch;
}
void PipelineExecutionStepState::setBranch(std::string value)
{
	m_Branch = value;
}
std::string PipelineExecutionStepState::getEnvironment() const
{
    return m_Environment;
}
void PipelineExecutionStepState::setEnvironment(std::string value)
{
	m_Environment = value;
}
std::string PipelineExecutionStepState::getEnvironmentType() const
{
    return m_EnvironmentType;
}
void PipelineExecutionStepState::setEnvironmentType(std::string value)
{
	m_EnvironmentType = value;
}
std::string PipelineExecutionStepState::getStartedAt() const
{
    return m_StartedAt;
}
void PipelineExecutionStepState::setStartedAt(std::string value)
{
	m_StartedAt = value;
}
std::string PipelineExecutionStepState::getFinishedAt() const
{
    return m_FinishedAt;
}
void PipelineExecutionStepState::setFinishedAt(std::string value)
{
	m_FinishedAt = value;
}
std::map<std::string, std::shared_ptr<Object>> PipelineExecutionStepState::getDetails() const
{
    return m_Details;
}
void PipelineExecutionStepState::setDetails(std::map<std::string, std::shared_ptr<Object>> value)
{
	m_Details = value;
}
std::string PipelineExecutionStepState::getStatus() const
{
    return m_Status;
}
void PipelineExecutionStepState::setStatus(std::string value)
{
	if (std::find(m_StatusEnum.begin(), m_StatusEnum.end(), value) != m_StatusEnum.end()) {
		m_Status = value;
	}
}
std::shared_ptr<PipelineExecutionStepState__links> PipelineExecutionStepState::get_Links() const
{
    return m__links;
}
void PipelineExecutionStepState::set_Links(std::shared_ptr<PipelineExecutionStepState__links> value)
{
	m__links = value;
}

}
}
}
}

