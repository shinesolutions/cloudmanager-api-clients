/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineExecution.h
 *
 * Wraps a pipeline execution
 */

#ifndef PipelineExecution_H_
#define PipelineExecution_H_



#include <string>
#include "PipelineExecution__embedded.h"
#include "PipelineExecution__links.h"
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Wraps a pipeline execution
/// </summary>
class  PipelineExecution 
{
public:
    PipelineExecution();
    virtual ~PipelineExecution();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// PipelineExecution members

    /// <summary>
    /// Pipeline execution identifier
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    std::string getProgramId() const;
    void setProgramId(std::string value);

    /// <summary>
    /// Identifier of the pipeline. Unique within the space.
    /// </summary>
    std::string getPipelineId() const;
    void setPipelineId(std::string value);

    /// <summary>
    /// Version of the artifacts generated during this execution
    /// </summary>
    std::string getArtifactsVersion() const;
    void setArtifactsVersion(std::string value);

    /// <summary>
    /// AdobeID who started the pipeline. Empty for auto triggered builds
    /// </summary>
    std::string getUser() const;
    void setUser(std::string value);

    /// <summary>
    /// Status of the execution
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string value);

    /// <summary>
    /// How the execution was triggered.
    /// </summary>
    std::string getTrigger() const;
    void setTrigger(std::string value);

    /// <summary>
    /// Start time
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string value);

    /// <summary>
    /// Date of last status change
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string value);

    /// <summary>
    /// Date the execution reached a final state
    /// </summary>
    std::string getFinishedAt() const;
    void setFinishedAt(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineExecution__embedded> get_Embedded() const;
    void set_Embedded(std::shared_ptr<PipelineExecution__embedded> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PipelineExecution__links> get_Links() const;
    void set_Links(std::shared_ptr<PipelineExecution__links> value);
protected:
    std::string m_Id;
    std::string m_ProgramId;
    std::string m_PipelineId;
    std::string m_ArtifactsVersion;
    std::string m_User;
    std::string m_Status;
    std::string m_Trigger;
    std::string m_CreatedAt;
    std::string m_UpdatedAt;
    std::string m_FinishedAt;
    std::shared_ptr<PipelineExecution__embedded> m__embedded;
    std::shared_ptr<PipelineExecution__links> m__links;
    std::vector<std::string> m_StatusEnum;
    std::vector<std::string> m_TriggerEnum;
};

}
}
}
}

#endif /* PipelineExecution_H_ */
