/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EnvironmentLogs.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

EnvironmentLogs::EnvironmentLogs()
{
	m_Days = 0;
}

EnvironmentLogs::~EnvironmentLogs()
{
}

std::string EnvironmentLogs::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void EnvironmentLogs::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree EnvironmentLogs::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Service
	if (!m_Service.empty()) {
		for (const auto &childEntry : m_Service) {
			ptree Service_node;
			Service_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Service_node));
		}
		pt.add_child("service", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Name
	if (!m_Name.empty()) {
		for (const auto &childEntry : m_Name) {
			ptree Name_node;
			Name_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Name_node));
		}
		pt.add_child("name", tmp_node);
		tmp_node.clear();
	}
	pt.put("days", m_Days);
	if (m__links != nullptr) {
		pt.add_child("_links", m__links->toPropertyTree());
	}
	if (m__embedded != nullptr) {
		pt.add_child("_embedded", m__embedded->toPropertyTree());
	}
	return pt;
}

void EnvironmentLogs::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Service into member vector
	if (pt.get_child_optional("service")) {
		for (const auto &childTree : pt.get_child("service")) {
			m_Service.emplace_back(childTree.second.data());
		}
	}
	// push all items of Name into member vector
	if (pt.get_child_optional("name")) {
		for (const auto &childTree : pt.get_child("name")) {
			m_Name.emplace_back(childTree.second.data());
		}
	}
	m_Days = pt.get("days", 0);
	if (pt.get_child_optional("_links")) {
		m__links = std::make_shared<EnvironmentLogs__links>();
		m__links->fromPropertyTree(pt.get_child("_links"));
	}
	if (pt.get_child_optional("_embedded")) {
		m__embedded = std::make_shared<EnvironmentLogs__embedded>();
		m__embedded->fromPropertyTree(pt.get_child("_embedded"));
	}
}

std::vector<std::string> EnvironmentLogs::getService() const
{
    return m_Service;
}
void EnvironmentLogs::setService(std::vector<std::string> value)
{
	m_Service = value;
}
std::vector<std::string> EnvironmentLogs::getName() const
{
    return m_Name;
}
void EnvironmentLogs::setName(std::vector<std::string> value)
{
	m_Name = value;
}
int32_t EnvironmentLogs::getDays() const
{
    return m_Days;
}
void EnvironmentLogs::setDays(int32_t value)
{
	m_Days = value;
}
std::shared_ptr<EnvironmentLogs__links> EnvironmentLogs::get_Links() const
{
    return m__links;
}
void EnvironmentLogs::set_Links(std::shared_ptr<EnvironmentLogs__links> value)
{
	m__links = value;
}
std::shared_ptr<EnvironmentLogs__embedded> EnvironmentLogs::get_Embedded() const
{
    return m__embedded;
}
void EnvironmentLogs::set_Embedded(std::shared_ptr<EnvironmentLogs__embedded> value)
{
	m__embedded = value;
}

}
}
}
}

