/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestedPageDetails.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestedPageDetails::RequestedPageDetails()
{
	m_Start = 0;
	m_Limit = 0;
	m_OrderBy = "";
	m_Type = "";
	m_Next = 0;
	m_Prev = 0;
}

RequestedPageDetails::~RequestedPageDetails()
{
}

std::string RequestedPageDetails::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void RequestedPageDetails::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RequestedPageDetails::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("start", m_Start);
	pt.put("limit", m_Limit);
	pt.put("orderBy", m_OrderBy);
	// generate tree for Property
	if (!m_Property.empty()) {
		for (const auto &childEntry : m_Property) {
			ptree Property_node;
			Property_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Property_node));
		}
		pt.add_child("property", tmp_node);
		tmp_node.clear();
	}
	pt.put("type", m_Type);
	pt.put("next", m_Next);
	pt.put("prev", m_Prev);
	return pt;
}

void RequestedPageDetails::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Start = pt.get("start", 0);
	m_Limit = pt.get("limit", 0);
	m_OrderBy = pt.get("orderBy", "");
	// push all items of Property into member vector
	if (pt.get_child_optional("property")) {
		for (const auto &childTree : pt.get_child("property")) {
			m_Property.emplace_back(childTree.second.data());
		}
	}
	m_Type = pt.get("type", "");
	m_Next = pt.get("next", 0);
	m_Prev = pt.get("prev", 0);
}

int32_t RequestedPageDetails::getStart() const
{
    return m_Start;
}
void RequestedPageDetails::setStart(int32_t value)
{
	m_Start = value;
}
int32_t RequestedPageDetails::getLimit() const
{
    return m_Limit;
}
void RequestedPageDetails::setLimit(int32_t value)
{
	m_Limit = value;
}
std::string RequestedPageDetails::getOrderBy() const
{
    return m_OrderBy;
}
void RequestedPageDetails::setOrderBy(std::string value)
{
	m_OrderBy = value;
}
std::vector<std::string> RequestedPageDetails::getProperty() const
{
    return m_Property;
}
void RequestedPageDetails::setProperty(std::vector<std::string> value)
{
	m_Property = value;
}
std::string RequestedPageDetails::getType() const
{
    return m_Type;
}
void RequestedPageDetails::setType(std::string value)
{
	m_Type = value;
}
int32_t RequestedPageDetails::getNext() const
{
    return m_Next;
}
void RequestedPageDetails::setNext(int32_t value)
{
	m_Next = value;
}
int32_t RequestedPageDetails::getPrev() const
{
    return m_Prev;
}
void RequestedPageDetails::setPrev(int32_t value)
{
	m_Prev = value;
}

}
}
}
}

