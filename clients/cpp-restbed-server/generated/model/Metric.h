/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Metric.h
 *
 * Describes a __Metric__
 */

#ifndef Metric_H_
#define Metric_H_



#include <string>
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes a __Metric__
/// </summary>
class  Metric 
{
public:
    Metric();
    virtual ~Metric();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Metric members

    /// <summary>
    /// KPI result identifier
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// Severity of the metric
    /// </summary>
    std::string getSeverity() const;
    void setSeverity(std::string value);

    /// <summary>
    /// Whether metric is considered passed
    /// </summary>
    bool isPassed() const;
    void setPassed(bool value);

    /// <summary>
    /// Whether user override the failed metric
    /// </summary>
    bool isOverride() const;
    void setOverride(bool value);

    /// <summary>
    /// Expected value for the metric
    /// </summary>
    std::string getActualValue() const;
    void setActualValue(std::string value);

    /// <summary>
    /// Expected value for the metric
    /// </summary>
    std::string getExpectedValue() const;
    void setExpectedValue(std::string value);

    /// <summary>
    /// Comparator used for the metric
    /// </summary>
    std::string getComparator() const;
    void setComparator(std::string value);

    /// <summary>
    /// KPI identifier
    /// </summary>
    std::string getKpi() const;
    void setKpi(std::string value);
protected:
    std::string m_Id;
    std::string m_Severity;
    bool m_Passed;
    bool m_Override;
    std::string m_ActualValue;
    std::string m_ExpectedValue;
    std::string m_Comparator;
    std::string m_Kpi;
    std::vector<std::string> m_SeverityEnum;
    std::vector<std::string> m_ComparatorEnum;
};

}
}
}
}

#endif /* Metric_H_ */
