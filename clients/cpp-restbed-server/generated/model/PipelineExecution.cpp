/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineExecution.h"

#include <string>
#include <sstream>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineExecution::PipelineExecution()
{
	m_Id = "";
	m_ProgramId = "";
	m_PipelineId = "";
	m_ArtifactsVersion = "";
	m_User = "";
	m_Status = "";
	m_StatusEnum = { "NOT_STARTED", "RUNNING", "CANCELLING", "CANCELLED", "FINISHED", "ERROR", "FAILED" };
	m_Trigger = "";
	m_TriggerEnum = { "ON_COMMIT", "MANUAL", "SCHEDULE", "PUSH_UPGRADES" };
	m_CreatedAt = "";
	m_UpdatedAt = "";
	m_FinishedAt = "";
}

PipelineExecution::~PipelineExecution()
{
}

std::string PipelineExecution::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void PipelineExecution::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree PipelineExecution::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("programId", m_ProgramId);
	pt.put("pipelineId", m_PipelineId);
	pt.put("artifactsVersion", m_ArtifactsVersion);
	pt.put("user", m_User);
	pt.put("status", m_Status);
	pt.put("trigger", m_Trigger);
	pt.put("createdAt", m_CreatedAt);
	pt.put("updatedAt", m_UpdatedAt);
	pt.put("finishedAt", m_FinishedAt);
	if (m__embedded != nullptr) {
		pt.add_child("_embedded", m__embedded->toPropertyTree());
	}
	if (m__links != nullptr) {
		pt.add_child("_links", m__links->toPropertyTree());
	}
	return pt;
}

void PipelineExecution::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", "");
	m_ProgramId = pt.get("programId", "");
	m_PipelineId = pt.get("pipelineId", "");
	m_ArtifactsVersion = pt.get("artifactsVersion", "");
	m_User = pt.get("user", "");
	setStatus(pt.get("status", ""));
	setTrigger(pt.get("trigger", ""));
	m_CreatedAt = pt.get("createdAt", "");
	m_UpdatedAt = pt.get("updatedAt", "");
	m_FinishedAt = pt.get("finishedAt", "");
	if (pt.get_child_optional("_embedded")) {
		m__embedded = std::make_shared<PipelineExecution__embedded>();
		m__embedded->fromPropertyTree(pt.get_child("_embedded"));
	}
	if (pt.get_child_optional("_links")) {
		m__links = std::make_shared<PipelineExecution__links>();
		m__links->fromPropertyTree(pt.get_child("_links"));
	}
}

std::string PipelineExecution::getId() const
{
    return m_Id;
}
void PipelineExecution::setId(std::string value)
{
	m_Id = value;
}
std::string PipelineExecution::getProgramId() const
{
    return m_ProgramId;
}
void PipelineExecution::setProgramId(std::string value)
{
	m_ProgramId = value;
}
std::string PipelineExecution::getPipelineId() const
{
    return m_PipelineId;
}
void PipelineExecution::setPipelineId(std::string value)
{
	m_PipelineId = value;
}
std::string PipelineExecution::getArtifactsVersion() const
{
    return m_ArtifactsVersion;
}
void PipelineExecution::setArtifactsVersion(std::string value)
{
	m_ArtifactsVersion = value;
}
std::string PipelineExecution::getUser() const
{
    return m_User;
}
void PipelineExecution::setUser(std::string value)
{
	m_User = value;
}
std::string PipelineExecution::getStatus() const
{
    return m_Status;
}
void PipelineExecution::setStatus(std::string value)
{
	if (std::find(m_StatusEnum.begin(), m_StatusEnum.end(), value) != m_StatusEnum.end()) {
		m_Status = value;
	}
}
std::string PipelineExecution::getTrigger() const
{
    return m_Trigger;
}
void PipelineExecution::setTrigger(std::string value)
{
	if (std::find(m_TriggerEnum.begin(), m_TriggerEnum.end(), value) != m_TriggerEnum.end()) {
		m_Trigger = value;
	}
}
std::string PipelineExecution::getCreatedAt() const
{
    return m_CreatedAt;
}
void PipelineExecution::setCreatedAt(std::string value)
{
	m_CreatedAt = value;
}
std::string PipelineExecution::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void PipelineExecution::setUpdatedAt(std::string value)
{
	m_UpdatedAt = value;
}
std::string PipelineExecution::getFinishedAt() const
{
    return m_FinishedAt;
}
void PipelineExecution::setFinishedAt(std::string value)
{
	m_FinishedAt = value;
}
std::shared_ptr<PipelineExecution__embedded> PipelineExecution::get_Embedded() const
{
    return m__embedded;
}
void PipelineExecution::set_Embedded(std::shared_ptr<PipelineExecution__embedded> value)
{
	m__embedded = value;
}
std::shared_ptr<PipelineExecution__links> PipelineExecution::get_Links() const
{
    return m__links;
}
void PipelineExecution::set_Links(std::shared_ptr<PipelineExecution__links> value)
{
	m__links = value;
}

}
}
}
}

