/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BranchesApi.h
 *
 * 
 */

#ifndef BranchesApi_H_
#define BranchesApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "BranchList.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  BranchesApi: public restbed::Service
{
public:
	BranchesApi();
	~BranchesApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// List Branches
/// </summary>
/// <remarks>
/// Returns the list of branches from a repository
/// </remarks>
class  BranchesApiApiProgramProgramIdRepositoryRepositoryIdBranchesResource: public restbed::Resource
{
public:
	BranchesApiApiProgramProgramIdRepositoryRepositoryIdBranchesResource();
    virtual ~BranchesApiApiProgramProgramIdRepositoryRepositoryIdBranchesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string programId{};
	std::string repositoryId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};


}
}
}
}

#endif /* BranchesApi_H_ */

