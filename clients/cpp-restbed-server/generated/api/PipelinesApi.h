/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelinesApi.h
 *
 * 
 */

#ifndef PipelinesApi_H_
#define PipelinesApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "Pipeline.h"
#include "PipelineList.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  PipelinesApi: public restbed::Service
{
public:
	PipelinesApi();
	~PipelinesApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Delete a Pipeline
/// </summary>
/// <remarks>
/// Delete a pipeline. All the data is wiped.
/// </remarks>
class  PipelinesApiApiProgramProgramIdPipelinePipelineIdResource: public restbed::Resource
{
public:
	PipelinesApiApiProgramProgramIdPipelinePipelineIdResource();
    virtual ~PipelinesApiApiProgramProgramIdPipelinePipelineIdResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void PATCH_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_DELETE(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);
	void set_handler_PATCH(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Pipeline> const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_DELETE_;

	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Pipeline> const &
	)> handler_PATCH_;

	std::string programId{};
	std::string pipelineId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};

/// <summary>
/// List Pipelines
/// </summary>
/// <remarks>
/// Returns all the pipelines that the requesting user has access to in an program
/// </remarks>
class  PipelinesApiApiProgramProgramIdPipelinesResource: public restbed::Resource
{
public:
	PipelinesApiApiProgramProgramIdPipelinesResource();
    virtual ~PipelinesApiApiProgramProgramIdPipelinesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string programId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};


}
}
}
}

#endif /* PipelinesApi_H_ */

