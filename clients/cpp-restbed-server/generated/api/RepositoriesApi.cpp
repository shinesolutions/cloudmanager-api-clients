/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "RepositoriesApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

RepositoriesApi::RepositoriesApi() {
	std::shared_ptr<RepositoriesApiApiProgramProgramIdRepositoriesResource> spRepositoriesApiApiProgramProgramIdRepositoriesResource = std::make_shared<RepositoriesApiApiProgramProgramIdRepositoriesResource>();
	this->publish(spRepositoriesApiApiProgramProgramIdRepositoriesResource);

	std::shared_ptr<RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource> spRepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource = std::make_shared<RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource>();
	this->publish(spRepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource);

}

RepositoriesApi::~RepositoriesApi() {}

void RepositoriesApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void RepositoriesApi::stopService() {
	this->stop();
}

RepositoriesApiApiProgramProgramIdRepositoriesResource::RepositoriesApiApiProgramProgramIdRepositoriesResource()
{
	this->set_path("/api/program/{programId: .*}/repositories/");
	this->set_method_handler("GET",
		std::bind(&RepositoriesApiApiProgramProgramIdRepositoriesResource::GET_method_handler, this,
			std::placeholders::_1));
}

RepositoriesApiApiProgramProgramIdRepositoriesResource::~RepositoriesApiApiProgramProgramIdRepositoriesResource()
{
}

void RepositoriesApiApiProgramProgramIdRepositoriesResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void RepositoriesApiApiProgramProgramIdRepositoriesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, xGwImsOrgId, authorization, xApiKey
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "successful operation" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource::RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource()
{
	this->set_path("/api/program/{programId: .*}/repository/{repositoryId: .*}/");
	this->set_method_handler("GET",
		std::bind(&RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource::GET_method_handler, this,
			std::placeholders::_1));
}

RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource::~RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource()
{
}

void RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void RepositoriesApiApiProgramProgramIdRepositoryRepositoryIdResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string repositoryId = request->get_path_parameter("repositoryId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, repositoryId, xGwImsOrgId, authorization, xApiKey
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "successful operation" : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

