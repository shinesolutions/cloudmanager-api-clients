/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "PipelineExecutionApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

PipelineExecutionApi::PipelineExecutionApi() {
	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource);

	std::shared_ptr<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource> spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource = std::make_shared<PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource>();
	this->publish(spPipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource);

}

PipelineExecutionApi::~PipelineExecutionApi() {}

void PipelineExecutionApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void PipelineExecutionApi::stopService() {
	this->stop();
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/{executionId: .*}/phase/{phaseId: .*}/step/{stepId: .*}/advance/");
	this->set_method_handler("PUT",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource::PUT_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource::set_handler_PUT(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
	)> handler) {
	handler_PUT_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string file = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the file string
			 */

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");
			const std::string executionId = request->get_path_parameter("executionId", "");
			const std::string phaseId = request->get_path_parameter("phaseId", "");
			const std::string stepId = request->get_path_parameter("stepId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");
			const std::string contentType = request->get_header("contentType", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PUT_)
			{
				std::tie(status_code, result) = handler_PUT_(
					programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body
				);
			}

			if (status_code == 202) {
				session->close(202, result.empty() ? "Successful resume of pipeline execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, result.empty() ? "Missing permission for user to advance the pipeline execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "No pipeline execution exits or unknown pipeline or program" : std::move(result), { {"Connection", "close"} });
				return;
			}

		});
}



PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/{executionId: .*}/phase/{phaseId: .*}/step/{stepId: .*}/cancel/");
	this->set_method_handler("PUT",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource::PUT_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource::set_handler_PUT(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
	)> handler) {
	handler_PUT_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string file = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the file string
			 */

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");
			const std::string executionId = request->get_path_parameter("executionId", "");
			const std::string phaseId = request->get_path_parameter("phaseId", "");
			const std::string stepId = request->get_path_parameter("stepId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");
			const std::string contentType = request->get_header("contentType", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PUT_)
			{
				std::tie(status_code, result) = handler_PUT_(
					programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body
				);
			}

			if (status_code == 202) {
				session->close(202, result.empty() ? "Successful cancel of pipeline execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, result.empty() ? "Missing permission for user to cancel the current pipeline execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "No pipeline execution exits or unknown pipeline or program" : std::move(result), { {"Connection", "close"} });
				return;
			}

		});
}



PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/");
	this->set_method_handler("GET",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PUT",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::PUT_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::set_handler_PUT(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_PUT_ = std::move(handler);
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, pipelineId, xGwImsOrgId, authorization, xApiKey
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Successful retrieval of current execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "No pipeline execution exits or unknown pipeline or program" : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");
			const std::string contentType = request->get_header("contentType", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PUT_)
			{
				std::tie(status_code, result) = handler_PUT_(
					programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType
				);
			}

			if (status_code == 201) {
				session->close(201, result.empty() ? "Successful started pipeline execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Request conflicts with the expected state of pipeline" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "No pipeline execution exits or unknown pipeline or application" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 412) {
				session->close(412, result.empty() ? "Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/{executionId: .*}/");
	this->set_method_handler("GET",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource::GET_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");
			const std::string executionId = request->get_path_parameter("executionId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Successful retrieval of execution" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "No pipeline execution exits or unknown pipeline or application" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/executions/");
	this->set_method_handler("GET",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource::GET_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, int32_t const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");

			// Getting the query params
			const std::string start = request->get_query_parameter("start", "");
			const int32_t limit = request->get_query_parameter("limit", 0);

			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Successful retrieval of execution history" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, result.empty() ? "Missing permission for user to read executions" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "Pipeline does not exist" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/{executionId: .*}/phase/{phaseId: .*}/step/{stepId: .*}/logs/");
	this->set_method_handler("GET",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource::GET_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");
			const std::string executionId = request->get_path_parameter("executionId", "");
			const std::string phaseId = request->get_path_parameter("phaseId", "");
			const std::string stepId = request->get_path_parameter("stepId", "");

			// Getting the query params
			const std::string file = request->get_query_parameter("file", "");

			// Getting the headers
			const std::string accept = request->get_header("accept", "");
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Successful retrieval of logs" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, result.empty() ? "Missing permission for user to read logs" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "Pipeline execution does not exist" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/{executionId: .*}/phase/{phaseId: .*}/step/{stepId: .*}/metrics/");
	this->set_method_handler("GET",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource::GET_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");
			const std::string executionId = request->get_path_parameter("executionId", "");
			const std::string phaseId = request->get_path_parameter("phaseId", "");
			const std::string stepId = request->get_path_parameter("stepId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Successful retrieval of metrics" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, result.empty() ? "Missing permission for user to read metrics" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "Pipeline execution does not exist" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource::PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource()
{
	this->set_path("/api/program/{programId: .*}/pipeline/{pipelineId: .*}/execution/{executionId: .*}/phase/{phaseId: .*}/step/{stepId: .*}/");
	this->set_method_handler("GET",
		std::bind(&PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource::GET_method_handler, this,
			std::placeholders::_1));
}

PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource::~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource()
{
}

void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string programId = request->get_path_parameter("programId", "");
			const std::string pipelineId = request->get_path_parameter("pipelineId", "");
			const std::string executionId = request->get_path_parameter("executionId", "");
			const std::string phaseId = request->get_path_parameter("phaseId", "");
			const std::string stepId = request->get_path_parameter("stepId", "");


			// Getting the headers
			const std::string xGwImsOrgId = request->get_header("xGwImsOrgId", "");
			const std::string authorization = request->get_header("authorization", "");
			const std::string xApiKey = request->get_header("xApiKey", "");

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Successful retrieval of step state" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, result.empty() ? "Missing permission for user to read step" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "Pipeline execution does not exist" : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

