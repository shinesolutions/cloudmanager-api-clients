/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineExecutionApi.h
 *
 * 
 */

#ifndef PipelineExecutionApi_H_
#define PipelineExecutionApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "PipelineExecution.h"
#include "PipelineExecutionListRepresentation.h"
#include "PipelineExecutionStepState.h"
#include "PipelineStepMetrics.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  PipelineExecutionApi: public restbed::Service
{
public:
	PipelineExecutionApi();
	~PipelineExecutionApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Advance
/// </summary>
/// <remarks>
/// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdAdvanceResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_PUT(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
	)> handler_PUT_;


	std::string programId{};
	std::string pipelineId{};
	std::string executionId{};
	std::string phaseId{};
	std::string stepId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
	std::string contentType{};
	std::shared_ptr<Object> body{};
};

/// <summary>
/// Cancel
/// </summary>
/// <remarks>
/// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdCancelResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_PUT(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
	)> handler_PUT_;


	std::string programId{};
	std::string pipelineId{};
	std::string executionId{};
	std::string phaseId{};
	std::string stepId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
	std::string contentType{};
	std::shared_ptr<Object> body{};
};

/// <summary>
/// Get current pipeline execution
/// </summary>
/// <remarks>
/// Returns current pipeline execution if any.
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);

	void set_handler_PUT(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;

	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_PUT_;

	std::string programId{};
	std::string pipelineId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};

/// <summary>
/// Get pipeline execution
/// </summary>
/// <remarks>
/// Returns a pipeline execution by id
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string programId{};
	std::string pipelineId{};
	std::string executionId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};

/// <summary>
/// List Executions
/// </summary>
/// <remarks>
/// Returns the history of pipeline executions in a newest to oldest order
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, int32_t const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, int32_t const &
	)> handler_GET_;


	std::string programId{};
	std::string pipelineId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
	std::string start{};
	int32_t limit{};
};

/// <summary>
/// Get logs
/// </summary>
/// <remarks>
/// Get the logs associated with a step.
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdLogsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string programId{};
	std::string pipelineId{};
	std::string executionId{};
	std::string phaseId{};
	std::string stepId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
	std::string file{};
	std::string accept{};
};

/// <summary>
/// Get step metrics
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdMetricsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string programId{};
	std::string pipelineId{};
	std::string executionId{};
	std::string phaseId{};
	std::string stepId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};

/// <summary>
/// Get step state
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource: public restbed::Resource
{
public:
	PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource();
    virtual ~PipelineExecutionApiApiProgramProgramIdPipelinePipelineIdExecutionExecutionIdPhasePhaseIdStepStepIdResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler_GET_;


	std::string programId{};
	std::string pipelineId{};
	std::string executionId{};
	std::string phaseId{};
	std::string stepId{};
	std::string xGwImsOrgId{};
	std::string authorization{};
	std::string xApiKey{};
};


}
}
}
}

#endif /* PipelineExecutionApi_H_ */

