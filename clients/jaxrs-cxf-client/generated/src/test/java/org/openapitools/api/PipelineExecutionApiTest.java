/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.openapitools.api;

import org.openapitools.model.PipelineExecution;
import org.openapitools.model.PipelineExecutionListRepresentation;
import org.openapitools.model.PipelineExecutionStepState;
import org.openapitools.model.PipelineStepMetrics;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Cloud Manager API
 *
 * <p>This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * API tests for PipelineExecutionApi 
 */
public class PipelineExecutionApiTest {


    private PipelineExecutionApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://cloudmanager.adobe.io", PipelineExecutionApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Advance
     *
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancePipelineExecutionTest() {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        Object body = null;
        //api.advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Cancel
     *
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelPipelineExecutionStepTest() {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        Object body = null;
        //api.cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Get current pipeline execution
     *
     * Returns current pipeline execution if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentExecutionTest() {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        //PipelineExecution response = api.getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get pipeline execution
     *
     * Returns a pipeline execution by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        //PipelineExecution response = api.getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * List Executions
     *
     * Returns the history of pipeline executions in a newest to oldest order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionsTest() {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String start = null;
        Integer limit = null;
        //PipelineExecutionListRepresentation response = api.getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get logs
     *
     * Get the logs associated with a step.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStepLogsTest() {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String file = null;
        String accept = null;
        //api.getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Start the pipeline
     *
     * Starts the Pipeline. This works only if the pipeline is not already started.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startPipelineTest() {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        //api.startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType);
        
        // TODO: test validations
        
        
    }
    
    /**
     * Get step metrics
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stepMetricTest() {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        //PipelineStepMetrics response = api.stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get step state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stepStateTest() {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        //PipelineExecutionStepState response = api.stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
