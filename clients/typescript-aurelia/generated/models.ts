/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * A Bad Request response error.
 */
export interface BadRequestError {
  /**
   * HTTP status code of the response.
   */
  status?: number;
  /**
   * Error type identifier.
   */
  type?: string;
  /**
   * A short summary of the error.
   */
  title?: string;
  /**
   * Request\'s missing parameters.
   */
  missingParams?: Array<MissingParameter>;
  /**
   * Request\'s invalid parameters.
   */
  invalidParams?: Array<InvalidParameter>;
}


export interface BranchList {
  _totalNumberOfItems?: number;
  _embedded?: BranchListEmbedded;
  _links?: ProgramListLinks;
}


export interface BranchListEmbedded {
  branches?: Array<RepositoryBranch>;
}


/**
 * Describes an __Embedded Program__
 */
export interface EmbeddedProgram {
  /**
   * Identifier of the program. Unique within the space.
   */
  id?: string;
  /**
   * Name of the program
   */
  name?: string;
  /**
   * Whether this Program has been enabled for Cloud Manager usage
   */
  enabled?: boolean;
  /**
   * Tenant Id
   */
  tenantId?: string;
}


/**
 * An Environment that 
 */
export interface Environment {
  /**
   * id
   */
  id?: string;
  /**
   * Identifier of the program. Unique within the space.
   */
  programId?: string;
  /**
   * Name of the environment
   */
  name?: string;
  /**
   * Description of the environment
   */
  description?: string;
  /**
   * Type of the environment
   */
  type?: EnvironmentTypeEnum;
  _links?: EnvironmentLinks;
}

/**
 * Enum for the type property.
 */
export type EnvironmentTypeEnum = 'dev' | 'stage' | 'prod';


export interface EnvironmentLinks {
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline?: HalLink;
  http__ns_adobe_com_adobecloud_rel_author?: HalLink;
  http__ns_adobe_com_adobecloud_rel_publish?: HalLink;
  http__ns_adobe_com_adobecloud_rel_developerConsole?: HalLink;
  http__ns_adobe_com_adobecloud_rel_logs?: HalLink;
  http__ns_adobe_com_adobecloud_rel_variables?: HalLink;
  self?: HalLink;
}


export interface EnvironmentList {
  _totalNumberOfItems?: number;
  _embedded?: EnvironmentListEmbedded;
  _links?: ProgramListLinks;
}


export interface EnvironmentListEmbedded {
  environments?: Array<Environment>;
}


/**
 * Log from Environment
 */
export interface EnvironmentLog {
  /**
   * Name of the service
   */
  service?: string;
  /**
   * Name of the Log
   */
  name?: string;
  /**
   * date of the Log
   */
  date?: string;
  programId?: number;
  environmentId?: number;
  _links?: EnvironmentLogLinks;
}


export interface EnvironmentLogLinks {
  http__ns_adobe_com_adobecloud_rel_logs_download?: HalLink;
  http__ns_adobe_com_adobecloud_rel_logs_tail?: HalLink;
}


/**
 * Logs of an Environment
 */
export interface EnvironmentLogs {
  /**
   * Name of the service
   */
  service?: Array<string>;
  /**
   * Name of the Log
   */
  name?: Array<string>;
  /**
   * Number of days
   */
  days?: number;
  _links?: EnvironmentLogsLinks;
  _embedded?: EnvironmentLogsEmbedded;
}


export interface EnvironmentLogsEmbedded {
  /**
   * Links to logs
   */
  downloads?: Array<EnvironmentLog>;
}


export interface EnvironmentLogsLinks {
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  self?: HalLink;
}


export interface HalLink {
  href?: string;
  templated?: boolean;
  type?: string;
  deprecation?: string;
  profile?: string;
  title?: string;
  hreflang?: string;
  name?: string;
}


export interface InvalidParameter {
  /**
   * Name of the invalid parameter.
   */
  name?: string;
  /**
   * Reason of why the parameter\'s value is not accepted.
   */
  reason?: string;
}


/**
 * Describes a __Metric__
 */
export interface Metric {
  /**
   * KPI result identifier
   */
  id?: string;
  /**
   * Severity of the metric
   */
  severity?: MetricSeverityEnum;
  /**
   * Whether metric is considered passed
   */
  passed?: boolean;
  /**
   * Whether user override the failed metric
   */
  override?: boolean;
  /**
   * Expected value for the metric
   */
  actualValue?: string;
  /**
   * Expected value for the metric
   */
  expectedValue?: string;
  /**
   * Comparator used for the metric
   */
  comparator?: MetricComparatorEnum;
  /**
   * KPI identifier
   */
  kpi?: string;
}

/**
 * Enum for the severity property.
 */
export type MetricSeverityEnum = 'critical' | 'important' | 'informational';

/**
 * Enum for the comparator property.
 */
export type MetricComparatorEnum = 'GT' | 'GTE' | 'LT' | 'LTE' | 'EQ' | 'NEQ';


export interface MissingParameter {
  /**
   * Name of the missing parameter.
   */
  name?: string;
  /**
   * Type of the missing parameter.
   */
  type?: string;
}


/**
 * Describes a __CI/CD Pipeline__
 */
export interface Pipeline {
  /**
   * Identifier of the pipeline. Unique within the program.
   */
  id?: string;
  /**
   * Identifier of the program. Unique within the space.
   */
  programId?: string;
  /**
   * Name of the pipeline
   */
  name: string;
  /**
   * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
   */
  trigger?: PipelineTriggerEnum;
  /**
   * Pipeline status
   */
  status?: PipelineStatusEnum;
  /**
   * Create date
   */
  createdAt?: string;
  /**
   * Update date
   */
  updatedAt?: string;
  /**
   * Last pipeline execution start
   */
  lastStartedAt?: string;
  /**
   * Last pipeline execution end
   */
  lastFinishedAt?: string;
  /**
   * Pipeline phases in execution order
   */
  phases: Array<PipelinePhase>;
  _links?: PipelineLinks;
}

/**
 * Enum for the trigger property.
 */
export type PipelineTriggerEnum = 'ON_COMMIT' | 'MANUAL' | 'SCHEDULE';

/**
 * Enum for the status property.
 */
export type PipelineStatusEnum = 'IDLE' | 'BUSY' | 'WAITING';


/**
 * Wraps a pipeline execution
 */
export interface PipelineExecution {
  /**
   * Pipeline execution identifier
   */
  id?: string;
  /**
   * Identifier of the program. Unique within the space.
   */
  programId?: string;
  /**
   * Identifier of the pipeline. Unique within the space.
   */
  pipelineId?: string;
  /**
   * Version of the artifacts generated during this execution
   */
  artifactsVersion?: string;
  /**
   * AdobeID who started the pipeline. Empty for auto triggered builds
   */
  user?: string;
  /**
   * Status of the execution
   */
  status?: PipelineExecutionStatusEnum;
  /**
   * How the execution was triggered.
   */
  trigger?: PipelineExecutionTriggerEnum;
  /**
   * Start time
   */
  createdAt?: string;
  /**
   * Date of last status change
   */
  updatedAt?: string;
  /**
   * Date the execution reached a final state
   */
  finishedAt?: string;
  _embedded?: PipelineExecutionEmbedded;
  _links?: PipelineExecutionLinks;
}

/**
 * Enum for the status property.
 */
export type PipelineExecutionStatusEnum = 'NOT_STARTED' | 'RUNNING' | 'CANCELLING' | 'CANCELLED' | 'FINISHED' | 'ERROR' | 'FAILED';

/**
 * Enum for the trigger property.
 */
export type PipelineExecutionTriggerEnum = 'ON_COMMIT' | 'MANUAL' | 'SCHEDULE' | 'PUSH_UPGRADES';


export interface PipelineExecutionEmbedded {
  stepStates?: Array<PipelineExecutionStepState>;
}


export interface PipelineExecutionLinks {
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline?: HalLink;
  self?: HalLink;
}


/**
 * List of pipeline executions
 */
export interface PipelineExecutionListRepresentation {
  _totalNumberOfItems?: number;
  _page?: RequestedPageDetails;
  _embedded?: PipelineExecutionListRepresentationEmbedded;
  _links?: PipelineExecutionListRepresentationLinks;
}


export interface PipelineExecutionListRepresentationEmbedded {
  executions?: Array<PipelineExecution>;
}


export interface PipelineExecutionListRepresentationLinks {
  next?: HalLink;
  page?: HalLink;
  prev?: HalLink;
  self?: HalLink;
}


/**
 * Describes the status of a particular pipeline execution step for display purposes
 */
export interface PipelineExecutionStepState {
  id?: string;
  stepId?: string;
  phaseId?: string;
  /**
   * Name of the action
   */
  action?: string;
  /**
   * Target repository
   */
  repository?: string;
  /**
   * Target branch
   */
  branch?: string;
  /**
   * Target environment
   */
  environment?: string;
  /**
   * Target environment type
   */
  environmentType?: string;
  /**
   * Start time
   */
  startedAt?: string;
  /**
   * Date the execution reached a final state
   */
  finishedAt?: string;
  /**
   * Information about step result
   */
  details?: { [key: string]: object; };
  /**
   * Action status
   */
  status?: PipelineExecutionStepStateStatusEnum;
  _links?: PipelineExecutionStepStateLinks;
}

/**
 * Enum for the status property.
 */
export type PipelineExecutionStepStateStatusEnum = 'NOT_STARTED' | 'RUNNING' | 'FINISHED' | 'ERROR' | 'ROLLING_BACK' | 'ROLLED_BACK' | 'WAITING' | 'CANCELLED' | 'FAILED';


export interface PipelineExecutionStepStateLinks {
  http__ns_adobe_com_adobecloud_rel_execution?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline_logs?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline_metrics?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline_advance?: HalLink;
  http__ns_adobe_com_adobecloud_rel_pipeline_cancel?: HalLink;
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  self?: HalLink;
}


export interface PipelineLinks {
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  http__ns_adobe_com_adobecloud_rel_execution?: HalLink;
  http__ns_adobe_com_adobecloud_rel_executions?: HalLink;
  http__ns_adobe_com_adobecloud_rel_rollbackLastSuccessfulExecution?: HalLink;
  self?: HalLink;
}


export interface PipelineList {
  _totalNumberOfItems?: number;
  _embedded?: PipelineListEmbedded;
  _links?: ProgramListLinks;
}


export interface PipelineListEmbedded {
  pipelines?: Array<Pipeline>;
}


/**
 * Describes a phase of a pipeline
 */
export interface PipelinePhase {
  /**
   * Name of the phase
   */
  name?: string;
  /**
   * Type of the phase
   */
  type: PipelinePhaseTypeEnum;
  /**
   * Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD
   */
  repositoryId?: string;
  /**
   * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.
   */
  branch?: string;
  /**
   * Identifier of the target environment. Mandatory if type=DEPLOY
   */
  environmentId?: string;
}

/**
 * Enum for the type property.
 */
export type PipelinePhaseTypeEnum = 'VALIDATE' | 'BUILD' | 'DEPLOY';


export interface PipelineStepMetrics {
  /**
   * metrics
   */
  metrics?: Array<Metric>;
}


/**
 * Describes a __Program__
 */
export interface Program {
  /**
   * Identifier of the program. Unique within the space.
   */
  id?: string;
  /**
   * Name of the program
   */
  name: string;
  /**
   * Whether this Program has been enabled for Cloud Manager usage
   */
  enabled?: boolean;
  /**
   * Tenant Id
   */
  tenantId?: string;
  /**
   * Organisation Id
   */
  imsOrgId?: string;
  _links?: ProgramLinks;
}


export interface ProgramLinks {
  http__ns_adobe_com_adobecloud_rel_pipelines?: HalLink;
  http__ns_adobe_com_adobecloud_rel_environments?: HalLink;
  http__ns_adobe_com_adobecloud_rel_repositories?: HalLink;
  self?: HalLink;
}


export interface ProgramList {
  _totalNumberOfItems?: number;
  _embedded?: ProgramListEmbedded;
  _links?: ProgramListLinks;
}


export interface ProgramListEmbedded {
  programs?: Array<EmbeddedProgram>;
}


export interface ProgramListLinks {
  next?: HalLink;
  prev?: HalLink;
  self?: HalLink;
}


/**
 * A sourcecode repository
 */
export interface Repository {
  /**
   * Repository name
   */
  repo?: string;
  /**
   * description
   */
  description?: string;
  _links?: RepositoryLinks;
}


/**
 * Represents a Git Branch
 */
export interface RepositoryBranch {
  /**
   * Identifier of the program. Unique within the space
   */
  programId?: string;
  /**
   * Identifier of the repository
   */
  repositoryId?: number;
  /**
   * Name of the branch
   */
  name?: string;
  _links?: RepositoryBranchLinks;
}


export interface RepositoryBranchLinks {
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  http__ns_adobe_com_adobecloud_rel_repository?: HalLink;
}


export interface RepositoryLinks {
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  http__ns_adobe_com_adobecloud_rel_branches?: HalLink;
  self?: HalLink;
}


export interface RepositoryList {
  _totalNumberOfItems?: number;
  _embedded?: RepositoryListEmbedded;
  _links?: ProgramListLinks;
}


export interface RepositoryListEmbedded {
  repositories?: Array<Repository>;
}


/**
 * Filtering and sorting page details
 */
export interface RequestedPageDetails {
  start?: number;
  limit?: number;
  orderBy?: string;
  property?: Array<string>;
  type?: string;
  next?: number;
  prev?: number;
}


/**
 * A named value than can be set on an Environment
 */
export interface Variable {
  /**
   * Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.
   */
  name?: string;
  /**
   * Value of the variable. Read-Write for non-secrets, write-only for secrets.
   */
  value?: string;
  /**
   * Type of the variable. Default `string` if missing. Cannot be changed after creation.
   */
  type?: VariableTypeEnum;
}

/**
 * Enum for the type property.
 */
export type VariableTypeEnum = 'string' | 'secretString';


export interface VariableList {
  _totalNumberOfItems?: number;
  _embedded?: VariableListEmbedded;
  _links?: VariableListLinks;
}


export interface VariableListEmbedded {
  /**
   * Variables set on environment
   */
  variables?: Array<Variable>;
}


export interface VariableListLinks {
  http__ns_adobe_com_adobecloud_rel_environment?: HalLink;
  http__ns_adobe_com_adobecloud_rel_program?: HalLink;
  self?: HalLink;
}

