/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  PipelineList,
  Pipeline,
} from './models';

/**
 * deletePipeline - parameters interface
 */
export interface IDeletePipelineParams {
  programId: string;
  pipelineId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * getPipeline - parameters interface
 */
export interface IGetPipelineParams {
  programId: string;
  pipelineId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * getPipelines - parameters interface
 */
export interface IGetPipelinesParams {
  programId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * patchPipeline - parameters interface
 */
export interface IPatchPipelineParams {
  programId: string;
  pipelineId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  contentType: string;
  body: Pipeline;
}

/**
 * PipelinesApi - API class
 */
@autoinject()
export class PipelinesApi extends Api {

  /**
   * Creates a new PipelinesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Delete a Pipeline
   * Delete a pipeline. All the data is wiped.
   * @param params.programId Identifier of the program
   * @param params.pipelineId Identifier of the pipeline
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async deletePipeline(params: IDeletePipelineParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deletePipeline', params, 'programId');
    this.ensureParamIsSet('deletePipeline', params, 'pipelineId');
    this.ensureParamIsSet('deletePipeline', params, 'xGwImsOrgId');
    this.ensureParamIsSet('deletePipeline', params, 'authorization');
    this.ensureParamIsSet('deletePipeline', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Pipeline
   * Returns a pipeline by its id
   * @param params.programId Identifier of the program
   * @param params.pipelineId Identifier of the pipeline
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async getPipeline(params: IGetPipelineParams): Promise<Pipeline> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipeline', params, 'programId');
    this.ensureParamIsSet('getPipeline', params, 'pipelineId');
    this.ensureParamIsSet('getPipeline', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getPipeline', params, 'authorization');
    this.ensureParamIsSet('getPipeline', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Pipelines
   * Returns all the pipelines that the requesting user has access to in an program
   * @param params.programId Identifier of the program
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async getPipelines(params: IGetPipelinesParams): Promise<PipelineList> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelines', params, 'programId');
    this.ensureParamIsSet('getPipelines', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getPipelines', params, 'authorization');
    this.ensureParamIsSet('getPipelines', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipelines`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Patches Pipeline
   * Patches a pipeline within an program.
   * @param params.programId Identifier of the program
   * @param params.pipelineId Identifier of the pipeline
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.contentType Must always be application/json
   * @param params.body The updated Pipeline
   */
  async patchPipeline(params: IPatchPipelineParams): Promise<Pipeline> {
    // Verify required parameters are set
    this.ensureParamIsSet('patchPipeline', params, 'programId');
    this.ensureParamIsSet('patchPipeline', params, 'pipelineId');
    this.ensureParamIsSet('patchPipeline', params, 'xGwImsOrgId');
    this.ensureParamIsSet('patchPipeline', params, 'authorization');
    this.ensureParamIsSet('patchPipeline', params, 'xApiKey');
    this.ensureParamIsSet('patchPipeline', params, 'contentType');
    this.ensureParamIsSet('patchPipeline', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])      .withHeader('Content-Type', params['contentType'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

