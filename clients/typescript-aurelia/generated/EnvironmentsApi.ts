/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  EnvironmentLogs,
  Environment,
  EnvironmentList,
} from './models';

/**
 * deleteEnvironment - parameters interface
 */
export interface IDeleteEnvironmentParams {
  programId: string;
  environmentId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * downloadLogs - parameters interface
 */
export interface IDownloadLogsParams {
  programId: string;
  environmentId: string;
  service: string;
  name: string;
  date: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  accept?: string;
}

/**
 * getEnvironment - parameters interface
 */
export interface IGetEnvironmentParams {
  programId: string;
  environmentId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * getEnvironmentLogs - parameters interface
 */
export interface IGetEnvironmentLogsParams {
  programId: string;
  environmentId: string;
  days: number;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  service?: Array<string>;
  name?: Array<string>;
}

/**
 * getEnvironments - parameters interface
 */
export interface IGetEnvironmentsParams {
  programId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  type?: 'dev' | 'stage' | 'prod';
}

/**
 * EnvironmentsApi - API class
 */
@autoinject()
export class EnvironmentsApi extends Api {

  /**
   * Creates a new EnvironmentsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * DeleteEnvironment
   * Delete environment
   * @param params.programId Identifier of the application
   * @param params.environmentId Identifier of the environment
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async deleteEnvironment(params: IDeleteEnvironmentParams): Promise<Environment> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteEnvironment', params, 'programId');
    this.ensureParamIsSet('deleteEnvironment', params, 'environmentId');
    this.ensureParamIsSet('deleteEnvironment', params, 'xGwImsOrgId');
    this.ensureParamIsSet('deleteEnvironment', params, 'authorization');
    this.ensureParamIsSet('deleteEnvironment', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/environment/{environmentId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'environmentId'}}`, encodeURIComponent(`${params['environmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Download Logs
   * Download environment logs
   * @param params.programId Identifier of the program
   * @param params.environmentId Identifier of the environment
   * @param params.service Name of service
   * @param params.name Name of log
   * @param params.date date for which log is required
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
   */
  async downloadLogs(params: IDownloadLogsParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('downloadLogs', params, 'programId');
    this.ensureParamIsSet('downloadLogs', params, 'environmentId');
    this.ensureParamIsSet('downloadLogs', params, 'service');
    this.ensureParamIsSet('downloadLogs', params, 'name');
    this.ensureParamIsSet('downloadLogs', params, 'date');
    this.ensureParamIsSet('downloadLogs', params, 'xGwImsOrgId');
    this.ensureParamIsSet('downloadLogs', params, 'authorization');
    this.ensureParamIsSet('downloadLogs', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/environment/{environmentId}/logs/download`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'environmentId'}}`, encodeURIComponent(`${params['environmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'service': params['service'],
        'name': params['name'],
        'date': params['date'],
      })
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])      .withHeader('Accept', params['accept'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Environment
   * Returns an environment by its id
   * @param params.programId Identifier of the program
   * @param params.environmentId Identifier of the environment
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async getEnvironment(params: IGetEnvironmentParams): Promise<Environment> {
    // Verify required parameters are set
    this.ensureParamIsSet('getEnvironment', params, 'programId');
    this.ensureParamIsSet('getEnvironment', params, 'environmentId');
    this.ensureParamIsSet('getEnvironment', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getEnvironment', params, 'authorization');
    this.ensureParamIsSet('getEnvironment', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/environment/{environmentId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'environmentId'}}`, encodeURIComponent(`${params['environmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Environment Logs
   * List all logs available in environment
   * @param params.programId Identifier of the program
   * @param params.environmentId Identifier of the environment
   * @param params.days number of days for which logs are required
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.service Names of services
   * @param params.name Names of log
   */
  async getEnvironmentLogs(params: IGetEnvironmentLogsParams): Promise<EnvironmentLogs> {
    // Verify required parameters are set
    this.ensureParamIsSet('getEnvironmentLogs', params, 'programId');
    this.ensureParamIsSet('getEnvironmentLogs', params, 'environmentId');
    this.ensureParamIsSet('getEnvironmentLogs', params, 'days');
    this.ensureParamIsSet('getEnvironmentLogs', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getEnvironmentLogs', params, 'authorization');
    this.ensureParamIsSet('getEnvironmentLogs', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/environment/{environmentId}/logs`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'environmentId'}}`, encodeURIComponent(`${params['environmentId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'service': params['service'],
        'name': params['name'],
        'days': params['days'],
      })
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Environments
   * Lists all environments in an program
   * @param params.programId Identifier of the program
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.type Type of the environment
   */
  async getEnvironments(params: IGetEnvironmentsParams): Promise<EnvironmentList> {
    // Verify required parameters are set
    this.ensureParamIsSet('getEnvironments', params, 'programId');
    this.ensureParamIsSet('getEnvironments', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getEnvironments', params, 'authorization');
    this.ensureParamIsSet('getEnvironments', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/environments`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'type': params['type'],
      })
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

