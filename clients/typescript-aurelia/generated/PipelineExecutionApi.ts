/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  PipelineExecution,
  PipelineStepMetrics,
  PipelineExecutionListRepresentation,
  PipelineExecutionStepState,
} from './models';

/**
 * advancePipelineExecution - parameters interface
 */
export interface IAdvancePipelineExecutionParams {
  programId: string;
  pipelineId: string;
  executionId: string;
  phaseId: string;
  stepId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  contentType: string;
  body: object;
}

/**
 * cancelPipelineExecutionStep - parameters interface
 */
export interface ICancelPipelineExecutionStepParams {
  programId: string;
  pipelineId: string;
  executionId: string;
  phaseId: string;
  stepId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  contentType: string;
  body: object;
}

/**
 * getCurrentExecution - parameters interface
 */
export interface IGetCurrentExecutionParams {
  programId: string;
  pipelineId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * getExecution - parameters interface
 */
export interface IGetExecutionParams {
  programId: string;
  pipelineId: string;
  executionId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * getExecutions - parameters interface
 */
export interface IGetExecutionsParams {
  programId: string;
  pipelineId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  start?: string;
  limit?: number;
}

/**
 * getStepLogs - parameters interface
 */
export interface IGetStepLogsParams {
  programId: string;
  pipelineId: string;
  executionId: string;
  phaseId: string;
  stepId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  file?: string;
  accept?: string;
}

/**
 * startPipeline - parameters interface
 */
export interface IStartPipelineParams {
  programId: string;
  pipelineId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
  contentType: string;
}

/**
 * stepMetric - parameters interface
 */
export interface IStepMetricParams {
  programId: string;
  pipelineId: string;
  executionId: string;
  phaseId: string;
  stepId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * stepState - parameters interface
 */
export interface IStepStateParams {
  programId: string;
  pipelineId: string;
  executionId: string;
  phaseId: string;
  stepId: string;
  xGwImsOrgId: string;
  authorization: string;
  xApiKey: string;
}

/**
 * PipelineExecutionApi - API class
 */
@autoinject()
export class PipelineExecutionApi extends Api {

  /**
   * Creates a new PipelineExecutionApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Advance
   * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.executionId Identifier of the execution
   * @param params.phaseId Identifier of the phase
   * @param params.stepId Identifier of the step
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.contentType Must always be application/json
   * @param params.body Input for advance. See documentation for details.
   */
  async advancePipelineExecution(params: IAdvancePipelineExecutionParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('advancePipelineExecution', params, 'programId');
    this.ensureParamIsSet('advancePipelineExecution', params, 'pipelineId');
    this.ensureParamIsSet('advancePipelineExecution', params, 'executionId');
    this.ensureParamIsSet('advancePipelineExecution', params, 'phaseId');
    this.ensureParamIsSet('advancePipelineExecution', params, 'stepId');
    this.ensureParamIsSet('advancePipelineExecution', params, 'xGwImsOrgId');
    this.ensureParamIsSet('advancePipelineExecution', params, 'authorization');
    this.ensureParamIsSet('advancePipelineExecution', params, 'xApiKey');
    this.ensureParamIsSet('advancePipelineExecution', params, 'contentType');
    this.ensureParamIsSet('advancePipelineExecution', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`))
      .replace(`{${'executionId'}}`, encodeURIComponent(`${params['executionId']}`))
      .replace(`{${'phaseId'}}`, encodeURIComponent(`${params['phaseId']}`))
      .replace(`{${'stepId'}}`, encodeURIComponent(`${params['stepId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])      .withHeader('Content-Type', params['contentType'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Cancel
   * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.executionId Identifier of the execution
   * @param params.phaseId Identifier of the phase
   * @param params.stepId Identifier of the step
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.contentType Must always be application/json
   * @param params.body Input for advance. See documentation for details.
   */
  async cancelPipelineExecutionStep(params: ICancelPipelineExecutionStepParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'programId');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'pipelineId');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'executionId');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'phaseId');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'stepId');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'xGwImsOrgId');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'authorization');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'xApiKey');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'contentType');
    this.ensureParamIsSet('cancelPipelineExecutionStep', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`))
      .replace(`{${'executionId'}}`, encodeURIComponent(`${params['executionId']}`))
      .replace(`{${'phaseId'}}`, encodeURIComponent(`${params['phaseId']}`))
      .replace(`{${'stepId'}}`, encodeURIComponent(`${params['stepId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])      .withHeader('Content-Type', params['contentType'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get current pipeline execution
   * Returns current pipeline execution if any.
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async getCurrentExecution(params: IGetCurrentExecutionParams): Promise<PipelineExecution> {
    // Verify required parameters are set
    this.ensureParamIsSet('getCurrentExecution', params, 'programId');
    this.ensureParamIsSet('getCurrentExecution', params, 'pipelineId');
    this.ensureParamIsSet('getCurrentExecution', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getCurrentExecution', params, 'authorization');
    this.ensureParamIsSet('getCurrentExecution', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get pipeline execution
   * Returns a pipeline execution by id
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.executionId Identifier of the execution
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async getExecution(params: IGetExecutionParams): Promise<PipelineExecution> {
    // Verify required parameters are set
    this.ensureParamIsSet('getExecution', params, 'programId');
    this.ensureParamIsSet('getExecution', params, 'pipelineId');
    this.ensureParamIsSet('getExecution', params, 'executionId');
    this.ensureParamIsSet('getExecution', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getExecution', params, 'authorization');
    this.ensureParamIsSet('getExecution', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`))
      .replace(`{${'executionId'}}`, encodeURIComponent(`${params['executionId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List Executions
   * Returns the history of pipeline executions in a newest to oldest order
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.start Pagination start parameter
   * @param params.limit Pagination limit parameter
   */
  async getExecutions(params: IGetExecutionsParams): Promise<PipelineExecutionListRepresentation> {
    // Verify required parameters are set
    this.ensureParamIsSet('getExecutions', params, 'programId');
    this.ensureParamIsSet('getExecutions', params, 'pipelineId');
    this.ensureParamIsSet('getExecutions', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getExecutions', params, 'authorization');
    this.ensureParamIsSet('getExecutions', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/executions`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start': params['start'],
        'limit': params['limit'],
      })
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get logs
   * Get the logs associated with a step.
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.executionId Identifier of the execution
   * @param params.phaseId Identifier of the phase
   * @param params.stepId Identifier of the step
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.file Identifier of the log file
   * @param params.accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
   */
  async getStepLogs(params: IGetStepLogsParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('getStepLogs', params, 'programId');
    this.ensureParamIsSet('getStepLogs', params, 'pipelineId');
    this.ensureParamIsSet('getStepLogs', params, 'executionId');
    this.ensureParamIsSet('getStepLogs', params, 'phaseId');
    this.ensureParamIsSet('getStepLogs', params, 'stepId');
    this.ensureParamIsSet('getStepLogs', params, 'xGwImsOrgId');
    this.ensureParamIsSet('getStepLogs', params, 'authorization');
    this.ensureParamIsSet('getStepLogs', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`))
      .replace(`{${'executionId'}}`, encodeURIComponent(`${params['executionId']}`))
      .replace(`{${'phaseId'}}`, encodeURIComponent(`${params['phaseId']}`))
      .replace(`{${'stepId'}}`, encodeURIComponent(`${params['stepId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'file': params['file'],
      })
      .withHeader('Accept', params['accept'])      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Start the pipeline
   * Starts the Pipeline. This works only if the pipeline is not already started.
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param params.contentType Must always be application/json
   */
  async startPipeline(params: IStartPipelineParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('startPipeline', params, 'programId');
    this.ensureParamIsSet('startPipeline', params, 'pipelineId');
    this.ensureParamIsSet('startPipeline', params, 'xGwImsOrgId');
    this.ensureParamIsSet('startPipeline', params, 'authorization');
    this.ensureParamIsSet('startPipeline', params, 'xApiKey');
    this.ensureParamIsSet('startPipeline', params, 'contentType');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])      .withHeader('Content-Type', params['contentType'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get step metrics
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.executionId Identifier of the execution
   * @param params.phaseId Identifier of the phase
   * @param params.stepId Identifier of the step
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async stepMetric(params: IStepMetricParams): Promise<PipelineStepMetrics> {
    // Verify required parameters are set
    this.ensureParamIsSet('stepMetric', params, 'programId');
    this.ensureParamIsSet('stepMetric', params, 'pipelineId');
    this.ensureParamIsSet('stepMetric', params, 'executionId');
    this.ensureParamIsSet('stepMetric', params, 'phaseId');
    this.ensureParamIsSet('stepMetric', params, 'stepId');
    this.ensureParamIsSet('stepMetric', params, 'xGwImsOrgId');
    this.ensureParamIsSet('stepMetric', params, 'authorization');
    this.ensureParamIsSet('stepMetric', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`))
      .replace(`{${'executionId'}}`, encodeURIComponent(`${params['executionId']}`))
      .replace(`{${'phaseId'}}`, encodeURIComponent(`${params['phaseId']}`))
      .replace(`{${'stepId'}}`, encodeURIComponent(`${params['stepId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get step state
   * @param params.programId Identifier of the program.
   * @param params.pipelineId Identifier of the pipeline
   * @param params.executionId Identifier of the execution
   * @param params.phaseId Identifier of the phase
   * @param params.stepId Identifier of the step
   * @param params.xGwImsOrgId IMS organization ID that the request is being made under.
   * @param params.authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param params.xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  async stepState(params: IStepStateParams): Promise<PipelineExecutionStepState> {
    // Verify required parameters are set
    this.ensureParamIsSet('stepState', params, 'programId');
    this.ensureParamIsSet('stepState', params, 'pipelineId');
    this.ensureParamIsSet('stepState', params, 'executionId');
    this.ensureParamIsSet('stepState', params, 'phaseId');
    this.ensureParamIsSet('stepState', params, 'stepId');
    this.ensureParamIsSet('stepState', params, 'xGwImsOrgId');
    this.ensureParamIsSet('stepState', params, 'authorization');
    this.ensureParamIsSet('stepState', params, 'xApiKey');

    // Create URL to call
    const url = `${this.basePath}/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}`
      .replace(`{${'programId'}}`, encodeURIComponent(`${params['programId']}`))
      .replace(`{${'pipelineId'}}`, encodeURIComponent(`${params['pipelineId']}`))
      .replace(`{${'executionId'}}`, encodeURIComponent(`${params['executionId']}`))
      .replace(`{${'phaseId'}}`, encodeURIComponent(`${params['phaseId']}`))
      .replace(`{${'stepId'}}`, encodeURIComponent(`${params['stepId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('x-gw-ims-org-id', params['xGwImsOrgId'])      .withHeader('Authorization', params['authorization'])      .withHeader('x-api-key', params['xApiKey'])
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

