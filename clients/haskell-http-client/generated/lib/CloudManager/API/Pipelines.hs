{-
   Cloud Manager API

   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   OpenAPI Version: 3.0.3
   Cloud Manager API API version: 1.0.0
   Contact: opensource@shinesolutions.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CloudManager.API.Pipelines
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CloudManager.API.Pipelines where

import CloudManager.Core
import CloudManager.MimeTypes
import CloudManager.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Pipelines

-- *** deletePipeline

-- | @DELETE \/api\/program\/{programId}\/pipeline\/{pipelineId}@
-- 
-- Delete a Pipeline
-- 
-- Delete a pipeline. All the data is wiped.
-- 
deletePipeline 
  :: ProgramId -- ^ "programId" -  Identifier of the program
  -> PipelineId -- ^ "pipelineId" -  Identifier of the pipeline
  -> XGwImsOrgId -- ^ "xGwImsOrgId" -  IMS organization ID that the request is being made under.
  -> Authorization -- ^ "authorization" -  Bearer [token] - An access token for the technical account created through integration with Adobe IO
  -> XApiKey -- ^ "xApiKey" -  IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  -> CloudManagerRequest DeletePipeline MimeNoContent NoContent MimeNoContent
deletePipeline (ProgramId programId) (PipelineId pipelineId) (XGwImsOrgId xGwImsOrgId) (Authorization authorization) (XApiKey xApiKey) =
  _mkRequest "DELETE" ["/api/program/",toPath programId,"/pipeline/",toPath pipelineId]
    `setHeader` toHeader ("x-gw-ims-org-id", xGwImsOrgId)
    `setHeader` toHeader ("Authorization", authorization)
    `setHeader` toHeader ("x-api-key", xApiKey)

data DeletePipeline  
instance Produces DeletePipeline MimeNoContent


-- *** getPipeline

-- | @GET \/api\/program\/{programId}\/pipeline\/{pipelineId}@
-- 
-- Get Pipeline
-- 
-- Returns a pipeline by its id
-- 
getPipeline 
  :: ProgramId -- ^ "programId" -  Identifier of the program
  -> PipelineId -- ^ "pipelineId" -  Identifier of the pipeline
  -> XGwImsOrgId -- ^ "xGwImsOrgId" -  IMS organization ID that the request is being made under.
  -> Authorization -- ^ "authorization" -  Bearer [token] - An access token for the technical account created through integration with Adobe IO
  -> XApiKey -- ^ "xApiKey" -  IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  -> CloudManagerRequest GetPipeline MimeNoContent Pipeline MimeJSON
getPipeline (ProgramId programId) (PipelineId pipelineId) (XGwImsOrgId xGwImsOrgId) (Authorization authorization) (XApiKey xApiKey) =
  _mkRequest "GET" ["/api/program/",toPath programId,"/pipeline/",toPath pipelineId]
    `setHeader` toHeader ("x-gw-ims-org-id", xGwImsOrgId)
    `setHeader` toHeader ("Authorization", authorization)
    `setHeader` toHeader ("x-api-key", xApiKey)

data GetPipeline  
-- | @application/json@
instance Produces GetPipeline MimeJSON


-- *** getPipelines

-- | @GET \/api\/program\/{programId}\/pipelines@
-- 
-- List Pipelines
-- 
-- Returns all the pipelines that the requesting user has access to in an program
-- 
getPipelines 
  :: ProgramId -- ^ "programId" -  Identifier of the program
  -> XGwImsOrgId -- ^ "xGwImsOrgId" -  IMS organization ID that the request is being made under.
  -> Authorization -- ^ "authorization" -  Bearer [token] - An access token for the technical account created through integration with Adobe IO
  -> XApiKey -- ^ "xApiKey" -  IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  -> CloudManagerRequest GetPipelines MimeNoContent PipelineList MimeJSON
getPipelines (ProgramId programId) (XGwImsOrgId xGwImsOrgId) (Authorization authorization) (XApiKey xApiKey) =
  _mkRequest "GET" ["/api/program/",toPath programId,"/pipelines"]
    `setHeader` toHeader ("x-gw-ims-org-id", xGwImsOrgId)
    `setHeader` toHeader ("Authorization", authorization)
    `setHeader` toHeader ("x-api-key", xApiKey)

data GetPipelines  
-- | @application/json@
instance Produces GetPipelines MimeJSON


-- *** patchPipeline

-- | @PATCH \/api\/program\/{programId}\/pipeline\/{pipelineId}@
-- 
-- Patches Pipeline
-- 
-- Patches a pipeline within an program.
-- 
patchPipeline 
  :: (Consumes PatchPipeline MimeJSON, MimeRender MimeJSON Pipeline)
  => Pipeline -- ^ "body" -  The updated Pipeline
  -> ProgramId -- ^ "programId" -  Identifier of the program
  -> PipelineId -- ^ "pipelineId" -  Identifier of the pipeline
  -> XGwImsOrgId -- ^ "xGwImsOrgId" -  IMS organization ID that the request is being made under.
  -> Authorization -- ^ "authorization" -  Bearer [token] - An access token for the technical account created through integration with Adobe IO
  -> XApiKey -- ^ "xApiKey" -  IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
  -> ParamContentType -- ^ "_contentType" -  Must always be application/json
  -> CloudManagerRequest PatchPipeline MimeJSON Pipeline MimeJSON
patchPipeline body (ProgramId programId) (PipelineId pipelineId) (XGwImsOrgId xGwImsOrgId) (Authorization authorization) (XApiKey xApiKey) (ParamContentType _contentType) =
  _mkRequest "PATCH" ["/api/program/",toPath programId,"/pipeline/",toPath pipelineId]
    `setBodyParam` body
    `setHeader` toHeader ("x-gw-ims-org-id", xGwImsOrgId)
    `setHeader` toHeader ("Authorization", authorization)
    `setHeader` toHeader ("x-api-key", xApiKey)
    `setHeader` toHeader ("Content-Type", _contentType)

data PatchPipeline 

-- | /Body Param/ "body" - The updated Pipeline
instance HasBodyParam PatchPipeline Pipeline 

-- | @application/json@
instance Consumes PatchPipeline MimeJSON

-- | @application/json@
instance Produces PatchPipeline MimeJSON

