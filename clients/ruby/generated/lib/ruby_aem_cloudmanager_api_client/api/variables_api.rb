=begin
#Cloud Manager API

#This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

The version of the OpenAPI document: 1.0.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module AemCloudManagerApiClient
  class VariablesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List User Environment Variables
    # List the user defined variables for an environment (Cloud Service only).
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [VariableList]
    def get_environment_variables(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_environment_variables_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # List User Environment Variables
    # List the user defined variables for an environment (Cloud Service only).
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(VariableList, Integer, Hash)>] VariableList data, response status code and response headers
    def get_environment_variables_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VariablesApi.get_environment_variables ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling VariablesApi.get_environment_variables"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling VariablesApi.get_environment_variables"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling VariablesApi.get_environment_variables"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling VariablesApi.get_environment_variables"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling VariablesApi.get_environment_variables"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environment/{environmentId}/variables'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'environmentId' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VariableList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VariablesApi#get_environment_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch User Environment Variables
    # Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Array<Variable>] The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing.
    # @param [Hash] opts the optional parameters
    # @return [VariableList]
    def patch_environment_variables(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      data, _status_code, _headers = patch_environment_variables_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts)
      data
    end

    # Patch User Environment Variables
    # Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Array<Variable>] The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VariableList, Integer, Hash)>] VariableList data, response status code and response headers
    def patch_environment_variables_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VariablesApi.patch_environment_variables ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling VariablesApi.patch_environment_variables"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling VariablesApi.patch_environment_variables"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling VariablesApi.patch_environment_variables"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling VariablesApi.patch_environment_variables"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling VariablesApi.patch_environment_variables"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling VariablesApi.patch_environment_variables"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VariablesApi.patch_environment_variables"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environment/{environmentId}/variables'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'environmentId' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'VariableList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VariablesApi#patch_environment_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
