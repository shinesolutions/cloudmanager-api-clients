=begin
#Cloud Manager API

#This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

The version of the OpenAPI document: 1.0.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module AemCloudManagerApiClient
  class PipelineExecutionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Advance
    # Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Object] Input for advance. See documentation for details.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def advance_pipeline_execution(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      advance_pipeline_execution_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts)
      nil
    end

    # Advance
    # Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Object] Input for advance. See documentation for details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def advance_pipeline_execution_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.advance_pipeline_execution ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'phase_id' is set
      if @api_client.config.client_side_validation && phase_id.nil?
        fail ArgumentError, "Missing the required parameter 'phase_id' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'step_id' is set
      if @api_client.config.client_side_validation && step_id.nil?
        fail ArgumentError, "Missing the required parameter 'step_id' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PipelineExecutionApi.advance_pipeline_execution"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s)).sub('{' + 'phaseId' + '}', CGI.escape(phase_id.to_s)).sub('{' + 'stepId' + '}', CGI.escape(step_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#advance_pipeline_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel
    # Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Object] Input for advance. See documentation for details.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_pipeline_execution_step(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      cancel_pipeline_execution_step_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts)
      nil
    end

    # Cancel
    # Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Object] Input for advance. See documentation for details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_pipeline_execution_step_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.cancel_pipeline_execution_step ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'phase_id' is set
      if @api_client.config.client_side_validation && phase_id.nil?
        fail ArgumentError, "Missing the required parameter 'phase_id' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'step_id' is set
      if @api_client.config.client_side_validation && step_id.nil?
        fail ArgumentError, "Missing the required parameter 'step_id' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PipelineExecutionApi.cancel_pipeline_execution_step"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s)).sub('{' + 'phaseId' + '}', CGI.escape(phase_id.to_s)).sub('{' + 'stepId' + '}', CGI.escape(step_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#cancel_pipeline_execution_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current pipeline execution
    # Returns current pipeline execution if any.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [PipelineExecution]
    def get_current_execution(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_current_execution_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get current pipeline execution
    # Returns current pipeline execution if any.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineExecution, Integer, Hash)>] PipelineExecution data, response status code and response headers
    def get_current_execution_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.get_current_execution ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.get_current_execution"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.get_current_execution"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.get_current_execution"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.get_current_execution"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.get_current_execution"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PipelineExecution' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#get_current_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pipeline execution
    # Returns a pipeline execution by id
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [PipelineExecution]
    def get_execution(program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_execution_with_http_info(program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get pipeline execution
    # Returns a pipeline execution by id
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineExecution, Integer, Hash)>] PipelineExecution data, response status code and response headers
    def get_execution_with_http_info(program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.get_execution ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.get_execution"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.get_execution"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling PipelineExecutionApi.get_execution"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.get_execution"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.get_execution"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.get_execution"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PipelineExecution' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#get_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Executions
    # Returns the history of pipeline executions in a newest to oldest order
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Pagination start parameter
    # @option opts [Integer] :limit Pagination limit parameter
    # @return [PipelineExecutionListRepresentation]
    def get_executions(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_executions_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # List Executions
    # Returns the history of pipeline executions in a newest to oldest order
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Pagination start parameter
    # @option opts [Integer] :limit Pagination limit parameter
    # @return [Array<(PipelineExecutionListRepresentation, Integer, Hash)>] PipelineExecutionListRepresentation data, response status code and response headers
    def get_executions_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.get_executions ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.get_executions"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.get_executions"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.get_executions"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.get_executions"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.get_executions"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/executions'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PipelineExecutionListRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#get_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get logs
    # Get the logs associated with a step.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file Identifier of the log file
    # @option opts [String] :accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
    # @return [nil]
    def get_step_logs(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      get_step_logs_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      nil
    end

    # Get logs
    # Get the logs associated with a step.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file Identifier of the log file
    # @option opts [String] :accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_step_logs_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.get_step_logs ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'phase_id' is set
      if @api_client.config.client_side_validation && phase_id.nil?
        fail ArgumentError, "Missing the required parameter 'phase_id' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'step_id' is set
      if @api_client.config.client_side_validation && step_id.nil?
        fail ArgumentError, "Missing the required parameter 'step_id' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.get_step_logs"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.get_step_logs"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s)).sub('{' + 'phaseId' + '}', CGI.escape(phase_id.to_s)).sub('{' + 'stepId' + '}', CGI.escape(step_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#get_step_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start the pipeline
    # Starts the Pipeline. This works only if the pipeline is not already started.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def start_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, opts = {})
      start_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, opts)
      nil
    end

    # Start the pipeline
    # Starts the Pipeline. This works only if the pipeline is not already started.
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def start_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.start_pipeline ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.start_pipeline"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.start_pipeline"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.start_pipeline"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.start_pipeline"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.start_pipeline"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PipelineExecutionApi.start_pipeline"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#start_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get step metrics
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [PipelineStepMetrics]
    def step_metric(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = step_metric_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get step metrics
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineStepMetrics, Integer, Hash)>] PipelineStepMetrics data, response status code and response headers
    def step_metric_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.step_metric ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'phase_id' is set
      if @api_client.config.client_side_validation && phase_id.nil?
        fail ArgumentError, "Missing the required parameter 'phase_id' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'step_id' is set
      if @api_client.config.client_side_validation && step_id.nil?
        fail ArgumentError, "Missing the required parameter 'step_id' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.step_metric"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.step_metric"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s)).sub('{' + 'phaseId' + '}', CGI.escape(phase_id.to_s)).sub('{' + 'stepId' + '}', CGI.escape(step_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PipelineStepMetrics' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#step_metric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get step state
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [PipelineExecutionStepState]
    def step_state(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = step_state_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get step state
    # @param program_id [String] Identifier of the program.
    # @param pipeline_id [String] Identifier of the pipeline
    # @param execution_id [String] Identifier of the execution
    # @param phase_id [String] Identifier of the phase
    # @param step_id [String] Identifier of the step
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineExecutionStepState, Integer, Hash)>] PipelineExecutionStepState data, response status code and response headers
    def step_state_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineExecutionApi.step_state ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'phase_id' is set
      if @api_client.config.client_side_validation && phase_id.nil?
        fail ArgumentError, "Missing the required parameter 'phase_id' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'step_id' is set
      if @api_client.config.client_side_validation && step_id.nil?
        fail ArgumentError, "Missing the required parameter 'step_id' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelineExecutionApi.step_state"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelineExecutionApi.step_state"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s)).sub('{' + 'phaseId' + '}', CGI.escape(phase_id.to_s)).sub('{' + 'stepId' + '}', CGI.escape(step_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PipelineExecutionStepState' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineExecutionApi#step_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
