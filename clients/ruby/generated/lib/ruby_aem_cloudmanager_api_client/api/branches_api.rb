=begin
#Cloud Manager API

#This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

The version of the OpenAPI document: 1.0.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module AemCloudManagerApiClient
  class BranchesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Branches
    # Returns the list of branches from a repository
    # @param program_id [String] Identifier of the program.
    # @param repository_id [String] Identifier of the repository
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [BranchList]
    def get_branches(program_id, repository_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_branches_with_http_info(program_id, repository_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # List Branches
    # Returns the list of branches from a repository
    # @param program_id [String] Identifier of the program.
    # @param repository_id [String] Identifier of the repository
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(BranchList, Integer, Hash)>] BranchList data, response status code and response headers
    def get_branches_with_http_info(program_id, repository_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BranchesApi.get_branches ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling BranchesApi.get_branches"
      end
      # verify the required parameter 'repository_id' is set
      if @api_client.config.client_side_validation && repository_id.nil?
        fail ArgumentError, "Missing the required parameter 'repository_id' when calling BranchesApi.get_branches"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling BranchesApi.get_branches"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling BranchesApi.get_branches"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling BranchesApi.get_branches"
      end
      # resource path
      local_var_path = '/api/program/{programId}/repository/{repositoryId}/branches'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'repositoryId' + '}', CGI.escape(repository_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BranchList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BranchesApi#get_branches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
