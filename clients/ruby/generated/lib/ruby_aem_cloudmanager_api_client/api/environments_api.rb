=begin
#Cloud Manager API

#This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

The version of the OpenAPI document: 1.0.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module AemCloudManagerApiClient
  class EnvironmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # DeleteEnvironment
    # Delete environment
    # @param program_id [String] Identifier of the application
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Environment]
    def delete_environment(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = delete_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # DeleteEnvironment
    # Delete environment
    # @param program_id [String] Identifier of the application
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def delete_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.delete_environment ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling EnvironmentsApi.delete_environment"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.delete_environment"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling EnvironmentsApi.delete_environment"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EnvironmentsApi.delete_environment"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling EnvironmentsApi.delete_environment"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environment/{environmentId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'environmentId' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Environment' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#delete_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download Logs
    # Download environment logs
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param service [String] Name of service
    # @param name [String] Name of log
    # @param date [String] date for which log is required
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
    # @return [nil]
    def download_logs(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      download_logs_with_http_info(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, opts)
      nil
    end

    # Download Logs
    # Download environment logs
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param service [String] Name of service
    # @param name [String] Name of log
    # @param date [String] date for which log is required
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_logs_with_http_info(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.download_logs ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EnvironmentsApi.download_logs"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling EnvironmentsApi.download_logs"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environment/{environmentId}/logs/download'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'environmentId' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'service'] = service
      query_params[:'name'] = name
      query_params[:'date'] = date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#download_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Environment
    # Returns an environment by its id
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Environment]
    def get_environment(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get Environment
    # Returns an environment by its id
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(Environment, Integer, Hash)>] Environment data, response status code and response headers
    def get_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.get_environment ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling EnvironmentsApi.get_environment"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.get_environment"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling EnvironmentsApi.get_environment"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EnvironmentsApi.get_environment"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling EnvironmentsApi.get_environment"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environment/{environmentId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'environmentId' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Environment' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#get_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Environment Logs
    # List all logs available in environment
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param days [Integer] number of days for which logs are required
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :service Names of services
    # @option opts [Array<String>] :name Names of log
    # @return [EnvironmentLogs]
    def get_environment_logs(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_environment_logs_with_http_info(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get Environment Logs
    # List all logs available in environment
    # @param program_id [String] Identifier of the program
    # @param environment_id [String] Identifier of the environment
    # @param days [Integer] number of days for which logs are required
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :service Names of services
    # @option opts [Array<String>] :name Names of log
    # @return [Array<(EnvironmentLogs, Integer, Hash)>] EnvironmentLogs data, response status code and response headers
    def get_environment_logs_with_http_info(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.get_environment_logs ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling EnvironmentsApi.get_environment_logs"
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling EnvironmentsApi.get_environment_logs"
      end
      # verify the required parameter 'days' is set
      if @api_client.config.client_side_validation && days.nil?
        fail ArgumentError, "Missing the required parameter 'days' when calling EnvironmentsApi.get_environment_logs"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling EnvironmentsApi.get_environment_logs"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EnvironmentsApi.get_environment_logs"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling EnvironmentsApi.get_environment_logs"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environment/{environmentId}/logs'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'environmentId' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'days'] = days
      query_params[:'service'] = @api_client.build_collection_param(opts[:'service'], :multi) if !opts[:'service'].nil?
      query_params[:'name'] = @api_client.build_collection_param(opts[:'name'], :multi) if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EnvironmentLogs' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#get_environment_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Environments
    # Lists all environments in an program
    # @param program_id [String] Identifier of the program
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of the environment
    # @return [EnvironmentList]
    def get_environments(program_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_environments_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # List Environments
    # Lists all environments in an program
    # @param program_id [String] Identifier of the program
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of the environment
    # @return [Array<(EnvironmentList, Integer, Hash)>] EnvironmentList data, response status code and response headers
    def get_environments_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnvironmentsApi.get_environments ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling EnvironmentsApi.get_environments"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling EnvironmentsApi.get_environments"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling EnvironmentsApi.get_environments"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling EnvironmentsApi.get_environments"
      end
      allowable_values = ["dev", "stage", "prod"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/program/{programId}/environments'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EnvironmentList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnvironmentsApi#get_environments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
