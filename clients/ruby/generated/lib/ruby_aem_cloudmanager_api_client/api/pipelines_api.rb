=begin
#Cloud Manager API

#This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

The version of the OpenAPI document: 1.0.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module AemCloudManagerApiClient
  class PipelinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Pipeline
    # Delete a pipeline. All the data is wiped.
    # @param program_id [String] Identifier of the program
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      delete_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      nil
    end

    # Delete a Pipeline
    # Delete a pipeline. All the data is wiped.
    # @param program_id [String] Identifier of the program
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.delete_pipeline ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelinesApi.delete_pipeline"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelinesApi.delete_pipeline"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelinesApi.delete_pipeline"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelinesApi.delete_pipeline"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelinesApi.delete_pipeline"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#delete_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Pipeline
    # Returns a pipeline by its id
    # @param program_id [String] Identifier of the program
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def get_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # Get Pipeline
    # Returns a pipeline by its id
    # @param program_id [String] Identifier of the program
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipeline ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelinesApi.get_pipeline"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelinesApi.get_pipeline"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelinesApi.get_pipeline"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelinesApi.get_pipeline"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelinesApi.get_pipeline"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Pipeline' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Pipelines
    # Returns all the pipelines that the requesting user has access to in an program
    # @param program_id [String] Identifier of the program
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [PipelineList]
    def get_pipelines(program_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      data, _status_code, _headers = get_pipelines_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, opts)
      data
    end

    # List Pipelines
    # Returns all the pipelines that the requesting user has access to in an program
    # @param program_id [String] Identifier of the program
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param [Hash] opts the optional parameters
    # @return [Array<(PipelineList, Integer, Hash)>] PipelineList data, response status code and response headers
    def get_pipelines_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.get_pipelines ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelinesApi.get_pipelines"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelinesApi.get_pipelines"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelinesApi.get_pipelines"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelinesApi.get_pipelines"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipelines'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PipelineList' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#get_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patches Pipeline
    # Patches a pipeline within an program.
    # @param program_id [String] Identifier of the program
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Pipeline] The updated Pipeline
    # @param [Hash] opts the optional parameters
    # @return [Pipeline]
    def patch_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      data, _status_code, _headers = patch_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts)
      data
    end

    # Patches Pipeline
    # Patches a pipeline within an program.
    # @param program_id [String] Identifier of the program
    # @param pipeline_id [String] Identifier of the pipeline
    # @param x_gw_ims_org_id [String] IMS organization ID that the request is being made under.
    # @param authorization [String] Bearer [token] - An access token for the technical account created through integration with Adobe IO
    # @param x_api_key [String] IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
    # @param content_type [String] Must always be application/json
    # @param body [Pipeline] The updated Pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def patch_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelinesApi.patch_pipeline ...'
      end
      # verify the required parameter 'program_id' is set
      if @api_client.config.client_side_validation && program_id.nil?
        fail ArgumentError, "Missing the required parameter 'program_id' when calling PipelinesApi.patch_pipeline"
      end
      # verify the required parameter 'pipeline_id' is set
      if @api_client.config.client_side_validation && pipeline_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_id' when calling PipelinesApi.patch_pipeline"
      end
      # verify the required parameter 'x_gw_ims_org_id' is set
      if @api_client.config.client_side_validation && x_gw_ims_org_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_gw_ims_org_id' when calling PipelinesApi.patch_pipeline"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling PipelinesApi.patch_pipeline"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling PipelinesApi.patch_pipeline"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PipelinesApi.patch_pipeline"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PipelinesApi.patch_pipeline"
      end
      # resource path
      local_var_path = '/api/program/{programId}/pipeline/{pipelineId}'.sub('{' + 'programId' + '}', CGI.escape(program_id.to_s)).sub('{' + 'pipelineId' + '}', CGI.escape(pipeline_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-gw-ims-org-id'] = x_gw_ims_org_id
      header_params[:'Authorization'] = authorization
      header_params[:'x-api-key'] = x_api_key
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Pipeline' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelinesApi#patch_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
