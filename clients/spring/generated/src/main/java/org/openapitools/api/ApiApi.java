/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BadRequestError;
import org.openapitools.model.BranchList;
import org.openapitools.model.Environment;
import org.openapitools.model.EnvironmentList;
import org.openapitools.model.EnvironmentLogs;
import java.util.List;
import org.openapitools.model.Pipeline;
import org.openapitools.model.PipelineExecution;
import org.openapitools.model.PipelineExecutionListRepresentation;
import org.openapitools.model.PipelineExecutionStepState;
import org.openapitools.model.PipelineList;
import org.openapitools.model.PipelineStepMetrics;
import org.openapitools.model.Program;
import org.openapitools.model.ProgramList;
import org.openapitools.model.Repository;
import org.openapitools.model.RepositoryList;
import org.openapitools.model.Variable;
import org.openapitools.model.VariableList;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-22T02:57:04.825Z[GMT]")

@Validated
@Api(value = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance : Advance
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @return Successful resume of pipeline execution (status code 202)
     *         or Missing permission for user to advance the pipeline execution (status code 403)
     *         or No pipeline execution exits or unknown pipeline or program (status code 404)
     */
    @ApiOperation(value = "Advance", nickname = "advancePipelineExecution", notes = "Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.", tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful resume of pipeline execution"),
        @ApiResponse(code = 403, message = "Missing permission for user to advance the pipeline execution"),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or program") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> advancePipelineExecution(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Input for advance. See documentation for details." ,required=true )  @Valid @RequestBody Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel : Cancel
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @return Successful cancel of pipeline execution (status code 202)
     *         or Missing permission for user to cancel the current pipeline execution (status code 403)
     *         or No pipeline execution exits or unknown pipeline or program (status code 404)
     */
    @ApiOperation(value = "Cancel", nickname = "cancelPipelineExecutionStep", notes = "Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.", tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful cancel of pipeline execution"),
        @ApiResponse(code = 403, message = "Missing permission for user to cancel the current pipeline execution"),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or program") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> cancelPipelineExecutionStep(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Input for advance. See documentation for details." ,required=true )  @Valid @RequestBody Object body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/program/{programId}/environment/{environmentId} : DeleteEnvironment
     * Delete environment
     *
     * @param programId Identifier of the application (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Environment deleted (status code 201)
     *         or Environment deletion in progress (status code 400)
     *         or Environment not found (status code 404)
     */
    @ApiOperation(value = "DeleteEnvironment", nickname = "deleteEnvironment", notes = "Delete environment", response = Environment.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Environment deleted", response = Environment.class),
        @ApiResponse(code = 400, message = "Environment deletion in progress", response = BadRequestError.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Environment> deleteEnvironment(@ApiParam(value = "Identifier of the application",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true) @PathVariable("environmentId") String environmentId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/author\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/publish\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/variables\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/developerConsole\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"name\" : \"AcmeCorp Dev1 Environment\", \"description\" : \"This is our primary development environment\", \"id\" : \"id\", \"type\" : \"dev\", \"programId\" : \"14\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/program/{programId}/pipeline/{pipelineId} : Delete a Pipeline
     * Delete a pipeline. All the data is wiped.
     *
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Delete a Pipeline", nickname = "deletePipeline", notes = "Delete a pipeline. All the data is wiped.", tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePipeline(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/program/{programId} : Delete Program
     * Delete an program
     *
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     *         or Delete was successful. (status code 202)
     *         or Forbidden. (status code 403)
     *         or Program not found. (status code 404)
     *         or Deletion not supported (status code 412)
     */
    @ApiOperation(value = "Delete Program", nickname = "deleteProgram", notes = "Delete an program", response = Program.class, tags={ "Programs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Program.class),
        @ApiResponse(code = 202, message = "Delete was successful.", response = Program.class),
        @ApiResponse(code = 403, message = "Forbidden."),
        @ApiResponse(code = 404, message = "Program not found."),
        @ApiResponse(code = 412, message = "Deletion not supported") })
    @RequestMapping(value = "/api/program/{programId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Program> deleteProgram(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/environments\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/repositories\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipelines\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"name\" : \"AcmeCorp Main Site\", \"tenantId\" : \"acmeCorp\", \"id\" : \"14\", \"enabled\" : false, \"imsOrgId\" : \"6522A55453334E247F120101@AdobeOrg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/environment/{environmentId}/logs/download : Download Logs
     * Download environment logs
     *
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param service Name of service (required)
     * @param name Name of log (required)
     * @param date date for which log is required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @return Successful retrieval of logs (status code 200)
     *         or invalid parameters (status code 400)
     *         or Environment not found (status code 404)
     */
    @ApiOperation(value = "Download Logs", nickname = "downloadLogs", notes = "Download environment logs", tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of logs"),
        @ApiResponse(code = 400, message = "invalid parameters", response = BadRequestError.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}/logs/download",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> downloadLogs(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true) @PathVariable("environmentId") String environmentId,@NotNull @ApiParam(value = "Name of service", required = true) @Valid @RequestParam(value = "service", required = true) String service,@NotNull @ApiParam(value = "Name of log", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "date for which log is required", required = true) @Valid @RequestParam(value = "date", required = true) String date,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header." ) @RequestHeader(value="Accept", required=false) String accept) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/repository/{repositoryId}/branches : List Branches
     * Returns the list of branches from a repository
     *
     * @param programId Identifier of the program. (required)
     * @param repositoryId Identifier of the repository (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of the list of repository branches (status code 200)
     */
    @ApiOperation(value = "List Branches", nickname = "getBranches", notes = "Returns the list of branches from a repository", response = BranchList.class, tags={ "Branches", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of the list of repository branches", response = BranchList.class) })
    @RequestMapping(value = "/api/program/{programId}/repository/{repositoryId}/branches",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<BranchList> getBranches(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the repository",required=true) @PathVariable("repositoryId") String repositoryId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 0, \"_embedded\" : { \"branches\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/repository\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"repositoryId\" : 2, \"name\" : \"master\", \"programId\" : \"14\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/repository\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"repositoryId\" : 2, \"name\" : \"master\", \"programId\" : \"14\" } ] }, \"_links\" : { \"next\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"prev\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId}/execution : Get current pipeline execution
     * Returns current pipeline execution if any.
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of current execution (status code 200)
     *         or No pipeline execution exits or unknown pipeline or program (status code 404)
     */
    @ApiOperation(value = "Get current pipeline execution", nickname = "getCurrentExecution", notes = "Returns current pipeline execution if any.", response = PipelineExecution.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of current execution", response = PipelineExecution.class),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or program") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineExecution> getCurrentExecution(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"artifactsVersion\" : \"artifactsVersion\", \"_embedded\" : { \"stepStates\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" } ] }, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"id\" : \"id\", \"trigger\" : \"ON_COMMIT\", \"user\" : \"0123456789ABCDE@AdobeID\", \"programId\" : \"14\", \"pipelineId\" : \"10\", \"status\" : \"NOT_STARTED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/environment/{environmentId} : Get Environment
     * Returns an environment by its id
     *
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get Environment", nickname = "getEnvironment", notes = "Returns an environment by its id", response = Environment.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Environment.class) })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Environment> getEnvironment(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true) @PathVariable("environmentId") String environmentId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/author\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/publish\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/variables\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/developerConsole\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"name\" : \"AcmeCorp Dev1 Environment\", \"description\" : \"This is our primary development environment\", \"id\" : \"id\", \"type\" : \"dev\", \"programId\" : \"14\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/environment/{environmentId}/logs : Get Environment Logs
     * List all logs available in environment
     *
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param days number of days for which logs are required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param service Names of services (optional, default to new ArrayList&lt;&gt;())
     * @param name Names of log (optional, default to new ArrayList&lt;&gt;())
     * @return Successful retrieval of logs for an environment (status code 200)
     *         or invalid parameters (status code 400)
     *         or Environment not found (status code 404)
     */
    @ApiOperation(value = "Get Environment Logs", nickname = "getEnvironmentLogs", notes = "List all logs available in environment", response = EnvironmentLogs.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of logs for an environment", response = EnvironmentLogs.class),
        @ApiResponse(code = 400, message = "invalid parameters", response = BadRequestError.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}/logs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EnvironmentLogs> getEnvironmentLogs(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true) @PathVariable("environmentId") String environmentId,@NotNull @ApiParam(value = "number of days for which logs are required", required = true) @Valid @RequestParam(value = "days", required = true) Integer days,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Names of services") @Valid @RequestParam(value = "service", required = false) List<String> service,@ApiParam(value = "Names of log") @Valid @RequestParam(value = "name", required = false) List<String> name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"_embedded\" : { \"downloads\" : [ { \"date\" : \"2019-04-05\", \"environmentId\" : 6, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/logs/tail\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/logs/download\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"service\" : \"author\", \"name\" : \"aemerror\", \"programId\" : 0 }, { \"date\" : \"2019-04-05\", \"environmentId\" : 6, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/logs/tail\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/logs/download\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"service\" : \"author\", \"name\" : \"aemerror\", \"programId\" : 0 } ] }, \"service\" : \"author\", \"name\" : \"aemerror\", \"days\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/environment/{environmentId}/variables : List User Environment Variables
     * List the user defined variables for an environment (Cloud Service only).
     *
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of environment variables (status code 200)
     *         or Environment not found (status code 404)
     */
    @ApiOperation(value = "List User Environment Variables", nickname = "getEnvironmentVariables", notes = "List the user defined variables for an environment (Cloud Service only).", response = VariableList.class, tags={ "Variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of environment variables", response = VariableList.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}/variables",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<VariableList> getEnvironmentVariables(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true) @PathVariable("environmentId") String environmentId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 1, \"_embedded\" : { \"variables\" : \"[{ 'name':'variable1Name', 'value':'variable1Value'}, { 'name':'variable2Name', 'type':'secretString', 'value':'variable2SecretValue'}]\" }, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/environment\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/environments : List Environments
     * Lists all environments in an program
     *
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param type Type of the environment (optional)
     * @return Successful retrieval of environment list (status code 200)
     *         or Program not found (status code 404)
     */
    @ApiOperation(value = "List Environments", nickname = "getEnvironments", notes = "Lists all environments in an program", response = EnvironmentList.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of environment list", response = EnvironmentList.class),
        @ApiResponse(code = 404, message = "Program not found") })
    @RequestMapping(value = "/api/program/{programId}/environments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<EnvironmentList> getEnvironments(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Type of the environment", allowableValues = "dev, stage, prod") @Valid @RequestParam(value = "type", required = false) String type) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 0, \"_embedded\" : { \"environments\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/author\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/publish\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/variables\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/developerConsole\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"name\" : \"AcmeCorp Dev1 Environment\", \"description\" : \"This is our primary development environment\", \"id\" : \"id\", \"type\" : \"dev\", \"programId\" : \"14\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/author\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/publish\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/variables\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/developerConsole\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"name\" : \"AcmeCorp Dev1 Environment\", \"description\" : \"This is our primary development environment\", \"id\" : \"id\", \"type\" : \"dev\", \"programId\" : \"14\" } ] }, \"_links\" : { \"next\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"prev\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId} : Get pipeline execution
     * Returns a pipeline execution by id
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of execution (status code 200)
     *         or No pipeline execution exits or unknown pipeline or application (status code 404)
     */
    @ApiOperation(value = "Get pipeline execution", nickname = "getExecution", notes = "Returns a pipeline execution by id", response = PipelineExecution.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of execution", response = PipelineExecution.class),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or application") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineExecution> getExecution(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"artifactsVersion\" : \"artifactsVersion\", \"_embedded\" : { \"stepStates\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" } ] }, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"id\" : \"id\", \"trigger\" : \"ON_COMMIT\", \"user\" : \"0123456789ABCDE@AdobeID\", \"programId\" : \"14\", \"pipelineId\" : \"10\", \"status\" : \"NOT_STARTED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId}/executions : List Executions
     * Returns the history of pipeline executions in a newest to oldest order
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param start Pagination start parameter (optional)
     * @param limit Pagination limit parameter (optional)
     * @return Successful retrieval of execution history (status code 200)
     *         or Missing permission for user to read executions (status code 403)
     *         or Pipeline does not exist (status code 404)
     */
    @ApiOperation(value = "List Executions", nickname = "getExecutions", notes = "Returns the history of pipeline executions in a newest to oldest order", response = PipelineExecutionListRepresentation.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of execution history", response = PipelineExecutionListRepresentation.class),
        @ApiResponse(code = 403, message = "Missing permission for user to read executions"),
        @ApiResponse(code = 404, message = "Pipeline does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/executions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineExecutionListRepresentation> getExecutions(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Pagination start parameter") @Valid @RequestParam(value = "start", required = false) String start,@ApiParam(value = "Pagination limit parameter") @Valid @RequestParam(value = "limit", required = false) Integer limit) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_page\" : { \"next\" : 5, \"prev\" : 5, \"start\" : 6, \"limit\" : 1, \"property\" : [ \"property\", \"property\" ], \"orderBy\" : \"orderBy\", \"type\" : \"type\" }, \"_totalNumberOfItems\" : 0, \"_embedded\" : { \"executions\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"artifactsVersion\" : \"artifactsVersion\", \"_embedded\" : { \"stepStates\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" } ] }, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"id\" : \"id\", \"trigger\" : \"ON_COMMIT\", \"user\" : \"0123456789ABCDE@AdobeID\", \"programId\" : \"14\", \"pipelineId\" : \"10\", \"status\" : \"NOT_STARTED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"artifactsVersion\" : \"artifactsVersion\", \"_embedded\" : { \"stepStates\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" } ] }, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"id\" : \"id\", \"trigger\" : \"ON_COMMIT\", \"user\" : \"0123456789ABCDE@AdobeID\", \"programId\" : \"14\", \"pipelineId\" : \"10\", \"status\" : \"NOT_STARTED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, \"_links\" : { \"next\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"prev\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"page\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId} : Get Pipeline
     * Returns a pipeline by its id
     *
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of pipeline (status code 200)
     *         or Pipeline not found (status code 404)
     */
    @ApiOperation(value = "Get Pipeline", nickname = "getPipeline", notes = "Returns a pipeline by its id", response = Pipeline.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of pipeline", response = Pipeline.class),
        @ApiResponse(code = 404, message = "Pipeline not found") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Pipeline> getPipeline(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/executions\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"lastStartedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"AcmeCorp Main Pipeline\", \"lastFinishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"29\", \"trigger\" : \"MANUAL\", \"programId\" : \"14\", \"phases\" : [ { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" } ], \"status\" : \"RUNNING,FAILED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipelines : List Pipelines
     * Returns all the pipelines that the requesting user has access to in an program
     *
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "List Pipelines", nickname = "getPipelines", notes = "Returns all the pipelines that the requesting user has access to in an program", response = PipelineList.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PipelineList.class) })
    @RequestMapping(value = "/api/program/{programId}/pipelines",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineList> getPipelines(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 0, \"_embedded\" : { \"pipelines\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/executions\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"lastStartedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"AcmeCorp Main Pipeline\", \"lastFinishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"29\", \"trigger\" : \"MANUAL\", \"programId\" : \"14\", \"phases\" : [ { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" } ], \"status\" : \"RUNNING,FAILED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/executions\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"lastStartedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"AcmeCorp Main Pipeline\", \"lastFinishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"29\", \"trigger\" : \"MANUAL\", \"programId\" : \"14\", \"phases\" : [ { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" } ], \"status\" : \"RUNNING,FAILED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, \"_links\" : { \"next\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"prev\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId} : Get Program
     * Returns a program by its id
     *
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of program (status code 200)
     *         or Program not found (status code 404)
     */
    @ApiOperation(value = "Get Program", nickname = "getProgram", notes = "Returns a program by its id", response = Program.class, tags={ "Programs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of program", response = Program.class),
        @ApiResponse(code = 404, message = "Program not found") })
    @RequestMapping(value = "/api/program/{programId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Program> getProgram(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/environments\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/repositories\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipelines\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"name\" : \"AcmeCorp Main Site\", \"tenantId\" : \"acmeCorp\", \"id\" : \"14\", \"enabled\" : false, \"imsOrgId\" : \"6522A55453334E247F120101@AdobeOrg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/programs : Lists Programs
     * Returns all programs that the requesting user has access to
     *
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Lists Programs", nickname = "getPrograms", notes = "Returns all programs that the requesting user has access to", response = ProgramList.class, tags={ "Programs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ProgramList.class) })
    @RequestMapping(value = "/api/programs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProgramList> getPrograms(@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 0, \"_embedded\" : { \"programs\" : [ { \"name\" : \"AcmeCorp Main Site\", \"tenantId\" : \"acmeCorp\", \"id\" : \"14\", \"enabled\" : false }, { \"name\" : \"AcmeCorp Main Site\", \"tenantId\" : \"acmeCorp\", \"id\" : \"14\", \"enabled\" : false } ] }, \"_links\" : { \"next\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"prev\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/repositories : Lists Repositories
     * Lists all Repositories in an program
     *
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Lists Repositories", nickname = "getRepositories", notes = "Lists all Repositories in an program", response = RepositoryList.class, tags={ "Repositories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RepositoryList.class) })
    @RequestMapping(value = "/api/program/{programId}/repositories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<RepositoryList> getRepositories(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 0, \"_embedded\" : { \"repositories\" : [ { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/branches\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"repo\" : \"Adobe-Marketing-Cloud\", \"description\" : \"Description\" }, { \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/branches\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"repo\" : \"Adobe-Marketing-Cloud\", \"description\" : \"Description\" } ] }, \"_links\" : { \"next\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"prev\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/repository/{repositoryId} : Get Repository
     * Returns an repository by its id
     *
     * @param programId Identifier of the program (required)
     * @param repositoryId Identifier of the repository (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get Repository", nickname = "getRepository", notes = "Returns an repository by its id", response = Repository.class, tags={ "Repositories", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Repository.class) })
    @RequestMapping(value = "/api/program/{programId}/repository/{repositoryId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Repository> getRepository(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the repository",required=true) @PathVariable("repositoryId") String repositoryId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/branches\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"repo\" : \"Adobe-Marketing-Cloud\", \"description\" : \"Description\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs : Get logs
     * Get the logs associated with a step.
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param file Identifier of the log file (optional)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @return Successful retrieval of logs (status code 200)
     *         or Missing permission for user to read logs (status code 403)
     *         or Pipeline execution does not exist (status code 404)
     */
    @ApiOperation(value = "Get logs", nickname = "getStepLogs", notes = "Get the logs associated with a step.", tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of logs"),
        @ApiResponse(code = 403, message = "Missing permission for user to read logs"),
        @ApiResponse(code = 404, message = "Pipeline execution does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs",
        method = RequestMethod.GET)
    default ResponseEntity<Void> getStepLogs(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Identifier of the log file") @Valid @RequestParam(value = "file", required = false) String file,@ApiParam(value = "Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header." ) @RequestHeader(value="Accept", required=false) String accept) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/program/{programId}/environment/{environmentId}/variables : Patch User Environment Variables
     * Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
     *
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. (required)
     * @return Successful update of environment variables (status code 200)
     *         or Environment not found (status code 404)
     */
    @ApiOperation(value = "Patch User Environment Variables", nickname = "patchEnvironmentVariables", notes = "Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.", response = VariableList.class, tags={ "Variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful update of environment variables", response = VariableList.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}/variables",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<VariableList> patchEnvironmentVariables(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true) @PathVariable("environmentId") String environmentId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing." ,required=true )  @Valid @RequestBody List<Variable> body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_totalNumberOfItems\" : 1, \"_embedded\" : { \"variables\" : \"[{ 'name':'variable1Name', 'value':'variable1Value'}, { 'name':'variable2Name', 'type':'secretString', 'value':'variable2SecretValue'}]\" }, \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/environment\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/program/{programId}/pipeline/{pipelineId} : Patches Pipeline
     * Patches a pipeline within an program.
     *
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body The updated Pipeline (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Patches Pipeline", nickname = "patchPipeline", notes = "Patches a pipeline within an program.", response = Pipeline.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Pipeline.class) })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Pipeline> patchPipeline(@ApiParam(value = "Identifier of the program",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "The updated Pipeline" ,required=true )  @Valid @RequestBody Pipeline body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/executions\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"lastStartedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"AcmeCorp Main Pipeline\", \"lastFinishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"29\", \"trigger\" : \"MANUAL\", \"programId\" : \"14\", \"phases\" : [ { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" }, { \"environmentId\" : \"environmentId\", \"name\" : \"DEV Build\", \"repositoryId\" : \"repositoryId\", \"type\" : \"DEPLOY\", \"branch\" : \"branch\" } ], \"status\" : \"RUNNING,FAILED\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/program/{programId}/pipeline/{pipelineId}/execution : Start the pipeline
     * Starts the Pipeline. This works only if the pipeline is not already started.
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @return Successful started pipeline execution (status code 201)
     *         or Request conflicts with the expected state of pipeline (status code 400)
     *         or No pipeline execution exits or unknown pipeline or application (status code 404)
     *         or Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress. (status code 412)
     */
    @ApiOperation(value = "Start the pipeline", nickname = "startPipeline", notes = "Starts the Pipeline. This works only if the pipeline is not already started.", tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful started pipeline execution"),
        @ApiResponse(code = 400, message = "Request conflicts with the expected state of pipeline"),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or application"),
        @ApiResponse(code = 412, message = "Cannot start execution: programId={programId}, pipelineId={pipelineId} currentExecutionId={executionId}, reason='Execution already in progress.") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> startPipeline(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics : Get step metrics
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of metrics (status code 200)
     *         or Missing permission for user to read metrics (status code 403)
     *         or Pipeline execution does not exist (status code 404)
     */
    @ApiOperation(value = "Get step metrics", nickname = "stepMetric", notes = "", response = PipelineStepMetrics.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of metrics", response = PipelineStepMetrics.class),
        @ApiResponse(code = 403, message = "Missing permission for user to read metrics"),
        @ApiResponse(code = 404, message = "Pipeline execution does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineStepMetrics> stepMetric(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metrics\" : [ { \"severity\" : \"critical\", \"comparator\" : \"GT\", \"kpi\" : \"kpi\", \"actualValue\" : \"actualValue\", \"expectedValue\" : \"expectedValue\", \"id\" : \"id\", \"passed\" : false, \"override\" : false }, { \"severity\" : \"critical\", \"comparator\" : \"GT\", \"kpi\" : \"kpi\", \"actualValue\" : \"actualValue\", \"expectedValue\" : \"expectedValue\", \"id\" : \"id\", \"passed\" : false, \"override\" : false } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId} : Get step state
     *
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Successful retrieval of step state (status code 200)
     *         or Missing permission for user to read step (status code 403)
     *         or Pipeline execution does not exist (status code 404)
     */
    @ApiOperation(value = "Get step state", nickname = "stepState", notes = "", response = PipelineExecutionStepState.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of step state", response = PipelineExecutionStepState.class),
        @ApiResponse(code = 403, message = "Missing permission for user to read step"),
        @ApiResponse(code = 404, message = "Pipeline execution does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineExecutionStepState> stepState(@ApiParam(value = "Identifier of the program.",required=true) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"http://ns.adobe.com/adobecloud/rel/pipeline/advance\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/logs\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/program\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/cancel\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"self\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/pipeline/metrics\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" }, \"http://ns.adobe.com/adobecloud/rel/execution\" : { \"hreflang\" : \"hreflang\", \"templated\" : false, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"type\" : \"type\", \"deprecation\" : \"deprecation\", \"title\" : \"title\" } }, \"environmentType\" : \"environmentType\", \"stepId\" : \"stepId\", \"phaseId\" : \"phaseId\", \"startedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"repository\" : \"repository\", \"branch\" : \"branch\", \"finishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"environment\" : \"environment\", \"action\" : \"build\", \"details\" : \"scheduled time\", \"id\" : \"id\", \"status\" : \"NOT_STARTED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
