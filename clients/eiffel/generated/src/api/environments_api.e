note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ENVIRONMENTS_API

inherit

    API_I


feature -- API Access


	delete_environment (program_id: STRING_32; environment_id: STRING_32; x_gw_ims_org_id: STRING_32; authorization: STRING_32; x_api_key: STRING_32): detachable ENVIRONMENT
			-- DeleteEnvironment
			-- Delete environment
			-- 
			-- argument: program_id Identifier of the application (required)
			-- 
			-- argument: environment_id Identifier of the environment (required)
			-- 
			-- argument: x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
			-- 
			-- argument: authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
			-- 
			-- argument: x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
			-- 
			-- 
			-- Result ENVIRONMENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/program/{programId}/environment/{environmentId}"
			l_path.replace_substring_all ("{"+"programId"+"}", api_client.url_encode (program_id.out))
			l_path.replace_substring_all ("{"+"environmentId"+"}", api_client.url_encode (environment_id.out))

			if attached x_gw_ims_org_id as l_x_gw_ims_org_id then
				l_request.add_header(l_x_gw_ims_org_id.out,"x-gw-ims-org-id");
			end
			if attached authorization as l_authorization then
				l_request.add_header(l_authorization.out,"Authorization");
			end
			if attached x_api_key as l_x_api_key then
				l_request.add_header(l_x_api_key.out,"x-api-key");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ENVIRONMENT } l_response.data ({ ENVIRONMENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	download_logs (program_id: STRING_32; environment_id: STRING_32; service: STRING_32; name: STRING_32; date: STRING_32; x_gw_ims_org_id: STRING_32; authorization: STRING_32; x_api_key: STRING_32; accept: STRING_32)
			-- Download Logs
			-- Download environment logs
			-- 
			-- argument: program_id Identifier of the program (required)
			-- 
			-- argument: environment_id Identifier of the environment (required)
			-- 
			-- argument: service Name of service (required)
			-- 
			-- argument: name Name of log (required)
			-- 
			-- argument: date date for which log is required (required)
			-- 
			-- argument: x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
			-- 
			-- argument: authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
			-- 
			-- argument: x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
			-- 
			-- argument: accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/program/{programId}/environment/{environmentId}/logs/download"
			l_path.replace_substring_all ("{"+"programId"+"}", api_client.url_encode (program_id.out))
			l_path.replace_substring_all ("{"+"environmentId"+"}", api_client.url_encode (environment_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "service", service));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));

			if attached x_gw_ims_org_id as l_x_gw_ims_org_id then
				l_request.add_header(l_x_gw_ims_org_id.out,"x-gw-ims-org-id");
			end
			if attached authorization as l_authorization then
				l_request.add_header(l_authorization.out,"Authorization");
			end
			if attached x_api_key as l_x_api_key then
				l_request.add_header(l_x_api_key.out,"x-api-key");
			end
			if attached accept as l_accept then
				l_request.add_header(l_accept.out,"Accept");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	environment (program_id: STRING_32; environment_id: STRING_32; x_gw_ims_org_id: STRING_32; authorization: STRING_32; x_api_key: STRING_32): detachable ENVIRONMENT
			-- Get Environment
			-- Returns an environment by its id
			-- 
			-- argument: program_id Identifier of the program (required)
			-- 
			-- argument: environment_id Identifier of the environment (required)
			-- 
			-- argument: x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
			-- 
			-- argument: authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
			-- 
			-- argument: x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
			-- 
			-- 
			-- Result ENVIRONMENT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/program/{programId}/environment/{environmentId}"
			l_path.replace_substring_all ("{"+"programId"+"}", api_client.url_encode (program_id.out))
			l_path.replace_substring_all ("{"+"environmentId"+"}", api_client.url_encode (environment_id.out))

			if attached x_gw_ims_org_id as l_x_gw_ims_org_id then
				l_request.add_header(l_x_gw_ims_org_id.out,"x-gw-ims-org-id");
			end
			if attached authorization as l_authorization then
				l_request.add_header(l_authorization.out,"Authorization");
			end
			if attached x_api_key as l_x_api_key then
				l_request.add_header(l_x_api_key.out,"x-api-key");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ENVIRONMENT } l_response.data ({ ENVIRONMENT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	environment_logs (program_id: STRING_32; environment_id: STRING_32; days: INTEGER_32; x_gw_ims_org_id: STRING_32; authorization: STRING_32; x_api_key: STRING_32; service: detachable LIST [STRING_32]; name: detachable LIST [STRING_32]): detachable ENVIRONMENT_LOGS
			-- Get Environment Logs
			-- List all logs available in environment
			-- 
			-- argument: program_id Identifier of the program (required)
			-- 
			-- argument: environment_id Identifier of the environment (required)
			-- 
			-- argument: days number of days for which logs are required (required)
			-- 
			-- argument: x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
			-- 
			-- argument: authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
			-- 
			-- argument: x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
			-- 
			-- argument: service Names of services (optional, default to null)
			-- 
			-- argument: name Names of log (optional, default to null)
			-- 
			-- 
			-- Result ENVIRONMENT_LOGS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/program/{programId}/environment/{environmentId}/logs"
			l_path.replace_substring_all ("{"+"programId"+"}", api_client.url_encode (program_id.out))
			l_path.replace_substring_all ("{"+"environmentId"+"}", api_client.url_encode (environment_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "service", service));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "days", days));

			if attached x_gw_ims_org_id as l_x_gw_ims_org_id then
				l_request.add_header(l_x_gw_ims_org_id.out,"x-gw-ims-org-id");
			end
			if attached authorization as l_authorization then
				l_request.add_header(l_authorization.out,"Authorization");
			end
			if attached x_api_key as l_x_api_key then
				l_request.add_header(l_x_api_key.out,"x-api-key");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ENVIRONMENT_LOGS } l_response.data ({ ENVIRONMENT_LOGS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	environments (program_id: STRING_32; x_gw_ims_org_id: STRING_32; authorization: STRING_32; x_api_key: STRING_32; type: STRING_32): detachable ENVIRONMENT_LIST
			-- List Environments
			-- Lists all environments in an program
			-- 
			-- argument: program_id Identifier of the program (required)
			-- 
			-- argument: x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
			-- 
			-- argument: authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
			-- 
			-- argument: x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
			-- 
			-- argument: type Type of the environment (optional, default to null)
			-- 
			-- 
			-- Result ENVIRONMENT_LIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/program/{programId}/environments"
			l_path.replace_substring_all ("{"+"programId"+"}", api_client.url_encode (program_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "type", type));

			if attached x_gw_ims_org_id as l_x_gw_ims_org_id then
				l_request.add_header(l_x_gw_ims_org_id.out,"x-gw-ims-org-id");
			end
			if attached authorization as l_authorization then
				l_request.add_header(l_authorization.out,"Authorization");
			end
			if attached x_api_key as l_x_api_key then
				l_request.add_header(l_x_api_key.out,"x-api-key");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ENVIRONMENT_LIST } l_response.data ({ ENVIRONMENT_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
