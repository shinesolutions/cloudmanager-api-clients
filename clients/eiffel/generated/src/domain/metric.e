note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class METRIC 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    id: detachable STRING_32 
      -- KPI result identifier
    severity: detachable STRING_32 
      -- Severity of the metric
    passed: BOOLEAN 
      -- Whether metric is considered passed
    override: BOOLEAN 
      -- Whether user override the failed metric
    actual_value: detachable STRING_32 
      -- Expected value for the metric
    expected_value: detachable STRING_32 
      -- Expected value for the metric
    comparator: detachable STRING_32 
      -- Comparator used for the metric
    kpi: detachable STRING_32 
      -- KPI identifier

feature -- Change Element  
 
    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_severity (a_name: like severity)
        -- Set 'severity' with 'a_name'.
      do
        severity := a_name
      ensure
        severity_set: severity = a_name		
      end

    set_passed (a_name: like passed)
        -- Set 'passed' with 'a_name'.
      do
        passed := a_name
      ensure
        passed_set: passed = a_name		
      end

    set_override (a_name: like override)
        -- Set 'override' with 'a_name'.
      do
        override := a_name
      ensure
        override_set: override = a_name		
      end

    set_actual_value (a_name: like actual_value)
        -- Set 'actual_value' with 'a_name'.
      do
        actual_value := a_name
      ensure
        actual_value_set: actual_value = a_name		
      end

    set_expected_value (a_name: like expected_value)
        -- Set 'expected_value' with 'a_name'.
      do
        expected_value := a_name
      ensure
        expected_value_set: expected_value = a_name		
      end

    set_comparator (a_name: like comparator)
        -- Set 'comparator' with 'a_name'.
      do
        comparator := a_name
      ensure
        comparator_set: comparator = a_name		
      end

    set_kpi (a_name: like kpi)
        -- Set 'kpi' with 'a_name'.
      do
        kpi := a_name
      ensure
        kpi_set: kpi = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass METRIC%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached severity as l_severity then
          Result.append ("%Nseverity:")
          Result.append (l_severity.out)
          Result.append ("%N")    
        end  
        if attached passed as l_passed then
          Result.append ("%Npassed:")
          Result.append (l_passed.out)
          Result.append ("%N")    
        end  
        if attached override as l_override then
          Result.append ("%Noverride:")
          Result.append (l_override.out)
          Result.append ("%N")    
        end  
        if attached actual_value as l_actual_value then
          Result.append ("%Nactual_value:")
          Result.append (l_actual_value.out)
          Result.append ("%N")    
        end  
        if attached expected_value as l_expected_value then
          Result.append ("%Nexpected_value:")
          Result.append (l_expected_value.out)
          Result.append ("%N")    
        end  
        if attached comparator as l_comparator then
          Result.append ("%Ncomparator:")
          Result.append (l_comparator.out)
          Result.append ("%N")    
        end  
        if attached kpi as l_kpi then
          Result.append ("%Nkpi:")
          Result.append (l_kpi.out)
          Result.append ("%N")    
        end  
      end
end


