note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ENVIRONMENT_LOG 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    service: detachable STRING_32 
      -- Name of the service
    name: detachable STRING_32 
      -- Name of the Log
    date: detachable STRING_32 
      -- date of the Log
    program_id: INTEGER_64 
      
    environment_id: INTEGER_64 
      
    var_links: detachable ENVIRONMENT_LOG__LINKS 
      

feature -- Change Element  
 
    set_service (a_name: like service)
        -- Set 'service' with 'a_name'.
      do
        service := a_name
      ensure
        service_set: service = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_date (a_name: like date)
        -- Set 'date' with 'a_name'.
      do
        date := a_name
      ensure
        date_set: date = a_name		
      end

    set_program_id (a_name: like program_id)
        -- Set 'program_id' with 'a_name'.
      do
        program_id := a_name
      ensure
        program_id_set: program_id = a_name		
      end

    set_environment_id (a_name: like environment_id)
        -- Set 'environment_id' with 'a_name'.
      do
        environment_id := a_name
      ensure
        environment_id_set: environment_id = a_name		
      end

    set_var_links (a_name: like var_links)
        -- Set 'var_links' with 'a_name'.
      do
        var_links := a_name
      ensure
        var_links_set: var_links = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ENVIRONMENT_LOG%N")
        if attached service as l_service then
          Result.append ("%Nservice:")
          Result.append (l_service.out)
          Result.append ("%N")    
        end  
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached date as l_date then
          Result.append ("%Ndate:")
          Result.append (l_date.out)
          Result.append ("%N")    
        end  
        if attached program_id as l_program_id then
          Result.append ("%Nprogram_id:")
          Result.append (l_program_id.out)
          Result.append ("%N")    
        end  
        if attached environment_id as l_environment_id then
          Result.append ("%Nenvironment_id:")
          Result.append (l_environment_id.out)
          Result.append ("%N")    
        end  
        if attached var_links as l_var_links then
          Result.append ("%Nvar_links:")
          Result.append (l_var_links.out)
          Result.append ("%N")    
        end  
      end
end


