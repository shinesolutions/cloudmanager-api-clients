note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ENVIRONMENT_LOGS 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    service: detachable LIST [STRING_32] 
      -- Name of the service
    name: detachable LIST [STRING_32] 
      -- Name of the Log
    days: INTEGER_32 
      -- Number of days
    var_links: detachable ENVIRONMENT_LOGS__LINKS 
      
    var_embedded: detachable ENVIRONMENT_LOGS__EMBEDDED 
      

feature -- Change Element  
 
    set_service (a_name: like service)
        -- Set 'service' with 'a_name'.
      do
        service := a_name
      ensure
        service_set: service = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_days (a_name: like days)
        -- Set 'days' with 'a_name'.
      do
        days := a_name
      ensure
        days_set: days = a_name		
      end

    set_var_links (a_name: like var_links)
        -- Set 'var_links' with 'a_name'.
      do
        var_links := a_name
      ensure
        var_links_set: var_links = a_name		
      end

    set_var_embedded (a_name: like var_embedded)
        -- Set 'var_embedded' with 'a_name'.
      do
        var_embedded := a_name
      ensure
        var_embedded_set: var_embedded = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ENVIRONMENT_LOGS%N")
        if attached service as l_service then
          across l_service as ic loop
            Result.append ("%N service:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached name as l_name then
          across l_name as ic loop
            Result.append ("%N name:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached days as l_days then
          Result.append ("%Ndays:")
          Result.append (l_days.out)
          Result.append ("%N")    
        end  
        if attached var_links as l_var_links then
          Result.append ("%Nvar_links:")
          Result.append (l_var_links.out)
          Result.append ("%N")    
        end  
        if attached var_embedded as l_var_embedded then
          Result.append ("%Nvar_embedded:")
          Result.append (l_var_embedded.out)
          Result.append ("%N")    
        end  
      end
end


