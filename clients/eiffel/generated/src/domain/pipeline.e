note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PIPELINE 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    id: detachable STRING_32 
      -- Identifier of the pipeline. Unique within the program.
    program_id: detachable STRING_32 
      -- Identifier of the program. Unique within the space.
    name: detachable STRING_32 
      -- Name of the pipeline
    trigger: detachable STRING_32 
      -- How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
    status: detachable STRING_32 
      -- Pipeline status
    created_at: detachable DATE_TIME 
      -- Create date
    updated_at: detachable DATE_TIME 
      -- Update date
    last_started_at: detachable DATE_TIME 
      -- Last pipeline execution start
    last_finished_at: detachable DATE_TIME 
      -- Last pipeline execution end
    phases: detachable LIST [PIPELINE_PHASE] 
      -- Pipeline phases in execution order
    var_links: detachable PIPELINE__LINKS 
      

feature -- Change Element  
 
    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_program_id (a_name: like program_id)
        -- Set 'program_id' with 'a_name'.
      do
        program_id := a_name
      ensure
        program_id_set: program_id = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_trigger (a_name: like trigger)
        -- Set 'trigger' with 'a_name'.
      do
        trigger := a_name
      ensure
        trigger_set: trigger = a_name		
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name		
      end

    set_created_at (a_name: like created_at)
        -- Set 'created_at' with 'a_name'.
      do
        created_at := a_name
      ensure
        created_at_set: created_at = a_name		
      end

    set_updated_at (a_name: like updated_at)
        -- Set 'updated_at' with 'a_name'.
      do
        updated_at := a_name
      ensure
        updated_at_set: updated_at = a_name		
      end

    set_last_started_at (a_name: like last_started_at)
        -- Set 'last_started_at' with 'a_name'.
      do
        last_started_at := a_name
      ensure
        last_started_at_set: last_started_at = a_name		
      end

    set_last_finished_at (a_name: like last_finished_at)
        -- Set 'last_finished_at' with 'a_name'.
      do
        last_finished_at := a_name
      ensure
        last_finished_at_set: last_finished_at = a_name		
      end

    set_phases (a_name: like phases)
        -- Set 'phases' with 'a_name'.
      do
        phases := a_name
      ensure
        phases_set: phases = a_name		
      end

    set_var_links (a_name: like var_links)
        -- Set 'var_links' with 'a_name'.
      do
        var_links := a_name
      ensure
        var_links_set: var_links = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PIPELINE%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached program_id as l_program_id then
          Result.append ("%Nprogram_id:")
          Result.append (l_program_id.out)
          Result.append ("%N")    
        end  
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached trigger as l_trigger then
          Result.append ("%Ntrigger:")
          Result.append (l_trigger.out)
          Result.append ("%N")    
        end  
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")    
        end  
        if attached created_at as l_created_at then
          Result.append ("%Ncreated_at:")
          Result.append (l_created_at.out)
          Result.append ("%N")    
        end  
        if attached updated_at as l_updated_at then
          Result.append ("%Nupdated_at:")
          Result.append (l_updated_at.out)
          Result.append ("%N")    
        end  
        if attached last_started_at as l_last_started_at then
          Result.append ("%Nlast_started_at:")
          Result.append (l_last_started_at.out)
          Result.append ("%N")    
        end  
        if attached last_finished_at as l_last_finished_at then
          Result.append ("%Nlast_finished_at:")
          Result.append (l_last_finished_at.out)
          Result.append ("%N")    
        end  
        if attached phases as l_phases then
          across l_phases as ic loop
            Result.append ("%N phases:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached var_links as l_var_links then
          Result.append ("%Nvar_links:")
          Result.append (l_var_links.out)
          Result.append ("%N")    
        end  
      end
end


