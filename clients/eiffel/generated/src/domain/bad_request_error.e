note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class BAD_REQUEST_ERROR 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    status: INTEGER_32 
      -- HTTP status code of the response.
    type: detachable STRING_32 
      -- Error type identifier.
    title: detachable STRING_32 
      -- A short summary of the error.
    missing_params: detachable LIST [MISSING_PARAMETER] 
      -- Request's missing parameters.
    invalid_params: detachable LIST [INVALID_PARAMETER] 
      -- Request's invalid parameters.

feature -- Change Element  
 
    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name		
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name		
      end

    set_title (a_name: like title)
        -- Set 'title' with 'a_name'.
      do
        title := a_name
      ensure
        title_set: title = a_name		
      end

    set_missing_params (a_name: like missing_params)
        -- Set 'missing_params' with 'a_name'.
      do
        missing_params := a_name
      ensure
        missing_params_set: missing_params = a_name		
      end

    set_invalid_params (a_name: like invalid_params)
        -- Set 'invalid_params' with 'a_name'.
      do
        invalid_params := a_name
      ensure
        invalid_params_set: invalid_params = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass BAD_REQUEST_ERROR%N")
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")    
        end  
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")    
        end  
        if attached title as l_title then
          Result.append ("%Ntitle:")
          Result.append (l_title.out)
          Result.append ("%N")    
        end  
        if attached missing_params as l_missing_params then
          across l_missing_params as ic loop
            Result.append ("%N missing_params:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached invalid_params as l_invalid_params then
          across l_invalid_params as ic loop
            Result.append ("%N invalid_params:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


