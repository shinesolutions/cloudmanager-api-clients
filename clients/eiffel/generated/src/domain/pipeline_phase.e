note
 description:"[
		Cloud Manager API
 		This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PIPELINE_PHASE 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    name: detachable STRING_32 
      -- Name of the phase
    type: detachable STRING_32 
      -- Type of the phase
    repository_id: detachable STRING_32 
      -- Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD
    branch: detachable STRING_32 
      -- Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.
    environment_id: detachable STRING_32 
      -- Identifier of the target environment. Mandatory if type=DEPLOY

feature -- Change Element  
 
    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name		
      end

    set_repository_id (a_name: like repository_id)
        -- Set 'repository_id' with 'a_name'.
      do
        repository_id := a_name
      ensure
        repository_id_set: repository_id = a_name		
      end

    set_branch (a_name: like branch)
        -- Set 'branch' with 'a_name'.
      do
        branch := a_name
      ensure
        branch_set: branch = a_name		
      end

    set_environment_id (a_name: like environment_id)
        -- Set 'environment_id' with 'a_name'.
      do
        environment_id := a_name
      ensure
        environment_id_set: environment_id = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PIPELINE_PHASE%N")
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")    
        end  
        if attached repository_id as l_repository_id then
          Result.append ("%Nrepository_id:")
          Result.append (l_repository_id.out)
          Result.append ("%N")    
        end  
        if attached branch as l_branch then
          Result.append ("%Nbranch:")
          Result.append (l_branch.out)
          Result.append ("%N")    
        end  
        if attached environment_id as l_environment_id then
          Result.append ("%Nenvironment_id:")
          Result.append (l_environment_id.out)
          Result.append ("%N")    
        end  
      end
end


