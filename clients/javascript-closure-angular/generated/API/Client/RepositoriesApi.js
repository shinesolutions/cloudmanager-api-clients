/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.RepositoriesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license The Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.RepositoriesApi');

goog.require('API.Client.Repository');
goog.require('API.Client.repositoryList');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.RepositoriesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('RepositoriesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('RepositoriesApiBasePath')) :
                   'https://cloudmanager.adobe.io';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('RepositoriesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('RepositoriesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.RepositoriesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Lists Repositories
 * Lists all Repositories in an program
 * @param {!string} programId Identifier of the program
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.repositoryList>}
 */
API.Client.RepositoriesApi.prototype.getRepositories = function(programId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/repositories'
      .replace('{' + 'programId' + '}', String(programId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getRepositories');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getRepositories');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getRepositories');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getRepositories');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Repository
 * Returns an repository by its id
 * @param {!string} programId Identifier of the program
 * @param {!string} repositoryId Identifier of the repository
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Repository>}
 */
API.Client.RepositoriesApi.prototype.getRepository = function(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/repository/{repositoryId}'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'repositoryId' + '}', String(repositoryId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getRepository');
  }
  // verify required parameter 'repositoryId' is set
  if (!repositoryId) {
    throw new Error('Missing required parameter repositoryId when calling getRepository');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getRepository');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getRepository');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getRepository');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
