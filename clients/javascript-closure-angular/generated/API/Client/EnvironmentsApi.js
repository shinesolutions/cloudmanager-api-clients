/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.EnvironmentsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license The Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.EnvironmentsApi');

goog.require('API.Client.BadRequestError');
goog.require('API.Client.Environment');
goog.require('API.Client.EnvironmentLogs');
goog.require('API.Client.environmentList');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.EnvironmentsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('EnvironmentsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('EnvironmentsApiBasePath')) :
                   'https://cloudmanager.adobe.io';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('EnvironmentsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('EnvironmentsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.EnvironmentsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * DeleteEnvironment
 * Delete environment
 * @param {!string} programId Identifier of the application
 * @param {!string} environmentId Identifier of the environment
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Environment>}
 */
API.Client.EnvironmentsApi.prototype.deleteEnvironment = function(programId, environmentId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/environment/{environmentId}'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'environmentId' + '}', String(environmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling deleteEnvironment');
  }
  // verify required parameter 'environmentId' is set
  if (!environmentId) {
    throw new Error('Missing required parameter environmentId when calling deleteEnvironment');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling deleteEnvironment');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling deleteEnvironment');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling deleteEnvironment');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Download Logs
 * Download environment logs
 * @param {!string} programId Identifier of the program
 * @param {!string} environmentId Identifier of the environment
 * @param {!string} service Name of service
 * @param {!string} name Name of log
 * @param {!string} date date for which log is required
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string=} opt_accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.EnvironmentsApi.prototype.downloadLogs = function(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, opt_accept, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/environment/{environmentId}/logs/download'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'environmentId' + '}', String(environmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling downloadLogs');
  }
  // verify required parameter 'environmentId' is set
  if (!environmentId) {
    throw new Error('Missing required parameter environmentId when calling downloadLogs');
  }
  // verify required parameter 'service' is set
  if (!service) {
    throw new Error('Missing required parameter service when calling downloadLogs');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling downloadLogs');
  }
  // verify required parameter 'date' is set
  if (!date) {
    throw new Error('Missing required parameter date when calling downloadLogs');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling downloadLogs');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling downloadLogs');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling downloadLogs');
  }
  if (service !== undefined) {
    queryParameters['service'] = service;
  }

  if (name !== undefined) {
    queryParameters['name'] = name;
  }

  if (date !== undefined) {
    queryParameters['date'] = date;
  }

  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  headerParams['Accept'] = opt_accept;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Environment
 * Returns an environment by its id
 * @param {!string} programId Identifier of the program
 * @param {!string} environmentId Identifier of the environment
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Environment>}
 */
API.Client.EnvironmentsApi.prototype.getEnvironment = function(programId, environmentId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/environment/{environmentId}'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'environmentId' + '}', String(environmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getEnvironment');
  }
  // verify required parameter 'environmentId' is set
  if (!environmentId) {
    throw new Error('Missing required parameter environmentId when calling getEnvironment');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getEnvironment');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getEnvironment');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getEnvironment');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Environment Logs
 * List all logs available in environment
 * @param {!string} programId Identifier of the program
 * @param {!string} environmentId Identifier of the environment
 * @param {!number} days number of days for which logs are required
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!Array<!string>=} opt_service Names of services
 * @param {!Array<!string>=} opt_name Names of log
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.EnvironmentLogs>}
 */
API.Client.EnvironmentsApi.prototype.getEnvironmentLogs = function(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, opt_service, opt_name, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/environment/{environmentId}/logs'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'environmentId' + '}', String(environmentId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getEnvironmentLogs');
  }
  // verify required parameter 'environmentId' is set
  if (!environmentId) {
    throw new Error('Missing required parameter environmentId when calling getEnvironmentLogs');
  }
  // verify required parameter 'days' is set
  if (!days) {
    throw new Error('Missing required parameter days when calling getEnvironmentLogs');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getEnvironmentLogs');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getEnvironmentLogs');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getEnvironmentLogs');
  }
  if (opt_service !== undefined) {
    queryParameters['service'] = opt_service;
  }

  if (opt_name !== undefined) {
    queryParameters['name'] = opt_name;
  }

  if (days !== undefined) {
    queryParameters['days'] = days;
  }

  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Environments
 * Lists all environments in an program
 * @param {!string} programId Identifier of the program
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string=} opt_type Type of the environment
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.environmentList>}
 */
API.Client.EnvironmentsApi.prototype.getEnvironments = function(programId, xGwImsOrgId, authorization, xApiKey, opt_type, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/environments'
      .replace('{' + 'programId' + '}', String(programId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getEnvironments');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getEnvironments');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getEnvironments');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getEnvironments');
  }
  if (opt_type !== undefined) {
    queryParameters['type'] = opt_type;
  }

  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
