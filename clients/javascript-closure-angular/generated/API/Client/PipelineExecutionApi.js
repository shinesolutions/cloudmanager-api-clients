/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PipelineExecutionApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license The Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.PipelineExecutionApi');

goog.require('API.Client.PipelineExecutionListRepresentation');
goog.require('API.Client.pipelineExecution');
goog.require('API.Client.pipelineExecutionStepState');
goog.require('API.Client.pipelineStepMetrics');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PipelineExecutionApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PipelineExecutionApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PipelineExecutionApiBasePath')) :
                   'https://cloudmanager.adobe.io';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PipelineExecutionApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PipelineExecutionApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PipelineExecutionApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Advance
 * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} executionId Identifier of the execution
 * @param {!string} phaseId Identifier of the phase
 * @param {!string} stepId Identifier of the step
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string} contentType Must always be application/json
 * @param {!API.Client.Object} body Input for advance. See documentation for details.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PipelineExecutionApi.prototype.advancePipelineExecution = function(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId))
      .replace('{' + 'executionId' + '}', String(executionId))
      .replace('{' + 'phaseId' + '}', String(phaseId))
      .replace('{' + 'stepId' + '}', String(stepId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling advancePipelineExecution');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling advancePipelineExecution');
  }
  // verify required parameter 'executionId' is set
  if (!executionId) {
    throw new Error('Missing required parameter executionId when calling advancePipelineExecution');
  }
  // verify required parameter 'phaseId' is set
  if (!phaseId) {
    throw new Error('Missing required parameter phaseId when calling advancePipelineExecution');
  }
  // verify required parameter 'stepId' is set
  if (!stepId) {
    throw new Error('Missing required parameter stepId when calling advancePipelineExecution');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling advancePipelineExecution');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling advancePipelineExecution');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling advancePipelineExecution');
  }
  // verify required parameter 'contentType' is set
  if (!contentType) {
    throw new Error('Missing required parameter contentType when calling advancePipelineExecution');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling advancePipelineExecution');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  headerParams['Content-Type'] = contentType;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Cancel
 * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} executionId Identifier of the execution
 * @param {!string} phaseId Identifier of the phase
 * @param {!string} stepId Identifier of the step
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string} contentType Must always be application/json
 * @param {!API.Client.Object} body Input for advance. See documentation for details.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PipelineExecutionApi.prototype.cancelPipelineExecutionStep = function(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId))
      .replace('{' + 'executionId' + '}', String(executionId))
      .replace('{' + 'phaseId' + '}', String(phaseId))
      .replace('{' + 'stepId' + '}', String(stepId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'executionId' is set
  if (!executionId) {
    throw new Error('Missing required parameter executionId when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'phaseId' is set
  if (!phaseId) {
    throw new Error('Missing required parameter phaseId when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'stepId' is set
  if (!stepId) {
    throw new Error('Missing required parameter stepId when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'contentType' is set
  if (!contentType) {
    throw new Error('Missing required parameter contentType when calling cancelPipelineExecutionStep');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling cancelPipelineExecutionStep');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  headerParams['Content-Type'] = contentType;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get current pipeline execution
 * Returns current pipeline execution if any.
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.pipelineExecution>}
 */
API.Client.PipelineExecutionApi.prototype.getCurrentExecution = function(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getCurrentExecution');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling getCurrentExecution');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getCurrentExecution');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getCurrentExecution');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getCurrentExecution');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get pipeline execution
 * Returns a pipeline execution by id
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} executionId Identifier of the execution
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.pipelineExecution>}
 */
API.Client.PipelineExecutionApi.prototype.getExecution = function(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId))
      .replace('{' + 'executionId' + '}', String(executionId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getExecution');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling getExecution');
  }
  // verify required parameter 'executionId' is set
  if (!executionId) {
    throw new Error('Missing required parameter executionId when calling getExecution');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getExecution');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getExecution');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getExecution');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List Executions
 * Returns the history of pipeline executions in a newest to oldest order
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string=} opt_start Pagination start parameter
 * @param {!number=} opt_limit Pagination limit parameter
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineExecutionListRepresentation>}
 */
API.Client.PipelineExecutionApi.prototype.getExecutions = function(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, opt_start, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/executions'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getExecutions');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling getExecutions');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getExecutions');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getExecutions');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getExecutions');
  }
  if (opt_start !== undefined) {
    queryParameters['start'] = opt_start;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get logs
 * Get the logs associated with a step.
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} executionId Identifier of the execution
 * @param {!string} phaseId Identifier of the phase
 * @param {!string} stepId Identifier of the step
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string=} opt_file Identifier of the log file
 * @param {!string=} opt_accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PipelineExecutionApi.prototype.getStepLogs = function(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, opt_file, opt_accept, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId))
      .replace('{' + 'executionId' + '}', String(executionId))
      .replace('{' + 'phaseId' + '}', String(phaseId))
      .replace('{' + 'stepId' + '}', String(stepId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling getStepLogs');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling getStepLogs');
  }
  // verify required parameter 'executionId' is set
  if (!executionId) {
    throw new Error('Missing required parameter executionId when calling getStepLogs');
  }
  // verify required parameter 'phaseId' is set
  if (!phaseId) {
    throw new Error('Missing required parameter phaseId when calling getStepLogs');
  }
  // verify required parameter 'stepId' is set
  if (!stepId) {
    throw new Error('Missing required parameter stepId when calling getStepLogs');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling getStepLogs');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling getStepLogs');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling getStepLogs');
  }
  if (opt_file !== undefined) {
    queryParameters['file'] = opt_file;
  }

  headerParams['Accept'] = opt_accept;

  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Start the pipeline
 * Starts the Pipeline. This works only if the pipeline is not already started.
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!string} contentType Must always be application/json
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PipelineExecutionApi.prototype.startPipeline = function(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling startPipeline');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling startPipeline');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling startPipeline');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling startPipeline');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling startPipeline');
  }
  // verify required parameter 'contentType' is set
  if (!contentType) {
    throw new Error('Missing required parameter contentType when calling startPipeline');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  headerParams['Content-Type'] = contentType;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get step metrics
 * 
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} executionId Identifier of the execution
 * @param {!string} phaseId Identifier of the phase
 * @param {!string} stepId Identifier of the step
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.pipelineStepMetrics>}
 */
API.Client.PipelineExecutionApi.prototype.stepMetric = function(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId))
      .replace('{' + 'executionId' + '}', String(executionId))
      .replace('{' + 'phaseId' + '}', String(phaseId))
      .replace('{' + 'stepId' + '}', String(stepId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling stepMetric');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling stepMetric');
  }
  // verify required parameter 'executionId' is set
  if (!executionId) {
    throw new Error('Missing required parameter executionId when calling stepMetric');
  }
  // verify required parameter 'phaseId' is set
  if (!phaseId) {
    throw new Error('Missing required parameter phaseId when calling stepMetric');
  }
  // verify required parameter 'stepId' is set
  if (!stepId) {
    throw new Error('Missing required parameter stepId when calling stepMetric');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling stepMetric');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling stepMetric');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling stepMetric');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get step state
 * 
 * @param {!string} programId Identifier of the program.
 * @param {!string} pipelineId Identifier of the pipeline
 * @param {!string} executionId Identifier of the execution
 * @param {!string} phaseId Identifier of the phase
 * @param {!string} stepId Identifier of the step
 * @param {!string} xGwImsOrgId IMS organization ID that the request is being made under.
 * @param {!string} authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
 * @param {!string} xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.pipelineExecutionStepState>}
 */
API.Client.PipelineExecutionApi.prototype.stepState = function(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}'
      .replace('{' + 'programId' + '}', String(programId))
      .replace('{' + 'pipelineId' + '}', String(pipelineId))
      .replace('{' + 'executionId' + '}', String(executionId))
      .replace('{' + 'phaseId' + '}', String(phaseId))
      .replace('{' + 'stepId' + '}', String(stepId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'programId' is set
  if (!programId) {
    throw new Error('Missing required parameter programId when calling stepState');
  }
  // verify required parameter 'pipelineId' is set
  if (!pipelineId) {
    throw new Error('Missing required parameter pipelineId when calling stepState');
  }
  // verify required parameter 'executionId' is set
  if (!executionId) {
    throw new Error('Missing required parameter executionId when calling stepState');
  }
  // verify required parameter 'phaseId' is set
  if (!phaseId) {
    throw new Error('Missing required parameter phaseId when calling stepState');
  }
  // verify required parameter 'stepId' is set
  if (!stepId) {
    throw new Error('Missing required parameter stepId when calling stepState');
  }
  // verify required parameter 'xGwImsOrgId' is set
  if (!xGwImsOrgId) {
    throw new Error('Missing required parameter xGwImsOrgId when calling stepState');
  }
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling stepState');
  }
  // verify required parameter 'xApiKey' is set
  if (!xApiKey) {
    throw new Error('Missing required parameter xApiKey when calling stepState');
  }
  headerParams['x-gw-ims-org-id'] = xGwImsOrgId;

  headerParams['Authorization'] = authorization;

  headerParams['x-api-key'] = xApiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
