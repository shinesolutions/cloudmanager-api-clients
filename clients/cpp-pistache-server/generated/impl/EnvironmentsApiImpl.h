/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* EnvironmentsApiImpl.h
*
* 
*/

#ifndef ENVIRONMENTS_API_IMPL_H_
#define ENVIRONMENTS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>

#include <EnvironmentsApi.h>

#include <pistache/optional.h>

#include "BadRequestError.h"
#include "Environment.h"
#include "EnvironmentList.h"
#include "EnvironmentLogs.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class EnvironmentsApiImpl : public org::openapitools::server::api::EnvironmentsApi {
public:
    EnvironmentsApiImpl(std::shared_ptr<Pistache::Rest::Router>);
    ~EnvironmentsApiImpl() {}

    void delete_environment(const std::string &programId, const std::string &environmentId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response);
    void download_logs(const std::string &programId, const std::string &environmentId, const Pistache::Optional<std::string> &service, const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &date, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<Pistache::Http::Header::Raw> &accept, Pistache::Http::ResponseWriter &response);
    void get_environment(const std::string &programId, const std::string &environmentId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response);
    void get_environment_logs(const std::string &programId, const std::string &environmentId, const Pistache::Optional<int32_t> &days, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<std::vector<std::string>> &service, const Pistache::Optional<std::vector<std::string>> &name, Pistache::Http::ResponseWriter &response);
    void get_environments(const std::string &programId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<std::string> &type, Pistache::Http::ResponseWriter &response);

};

}
}
}
}



#endif