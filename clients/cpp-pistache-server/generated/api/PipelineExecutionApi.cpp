/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "PipelineExecutionApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

PipelineExecutionApi::PipelineExecutionApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
}

void PipelineExecutionApi::init() {
    setupRoutes();
}

void PipelineExecutionApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Put(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/advance", Routes::bind(&PipelineExecutionApi::advance_pipeline_execution_handler, this));
    Routes::Put(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/cancel", Routes::bind(&PipelineExecutionApi::cancel_pipeline_execution_step_handler, this));
    Routes::Get(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution", Routes::bind(&PipelineExecutionApi::get_current_execution_handler, this));
    Routes::Get(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution/:executionId", Routes::bind(&PipelineExecutionApi::get_execution_handler, this));
    Routes::Get(*router, base + "/api/program/:programId/pipeline/:pipelineId/executions", Routes::bind(&PipelineExecutionApi::get_executions_handler, this));
    Routes::Get(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/logs", Routes::bind(&PipelineExecutionApi::get_step_logs_handler, this));
    Routes::Put(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution", Routes::bind(&PipelineExecutionApi::start_pipeline_handler, this));
    Routes::Get(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/metrics", Routes::bind(&PipelineExecutionApi::step_metric_handler, this));
    Routes::Get(*router, base + "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId", Routes::bind(&PipelineExecutionApi::step_state_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&PipelineExecutionApi::pipeline_execution_api_default_handler, this));
}

void PipelineExecutionApi::advance_pipeline_execution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    auto executionId = request.param(":executionId").as<std::string>();
    auto phaseId = request.param(":phaseId").as<std::string>();
    auto stepId = request.param(":stepId").as<std::string>();
    
    // Getting the body param
    
    Object body;
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");
    auto contentType = request.headers().tryGetRaw("Content-Type");

    try {
      body = request.body();
      this->advance_pipeline_execution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::cancel_pipeline_execution_step_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    auto executionId = request.param(":executionId").as<std::string>();
    auto phaseId = request.param(":phaseId").as<std::string>();
    auto stepId = request.param(":stepId").as<std::string>();
    
    // Getting the body param
    
    Object body;
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");
    auto contentType = request.headers().tryGetRaw("Content-Type");

    try {
      body = request.body();
      this->cancel_pipeline_execution_step(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::get_current_execution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");

    try {
      this->get_current_execution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::get_execution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    auto executionId = request.param(":executionId").as<std::string>();
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");

    try {
      this->get_execution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::get_executions_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    
    // Getting the query params
    auto startQuery = request.query().get("start");
    Pistache::Optional<std::string> start;
    if(!startQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(startQuery.get(), valueQuery_instance)){
            start = Pistache::Some(valueQuery_instance);
        }
    }
    auto limitQuery = request.query().get("limit");
    Pistache::Optional<int32_t> limit;
    if(!limitQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(limitQuery.get(), valueQuery_instance)){
            limit = Pistache::Some(valueQuery_instance);
        }
    }
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");

    try {
      this->get_executions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::get_step_logs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    auto executionId = request.param(":executionId").as<std::string>();
    auto phaseId = request.param(":phaseId").as<std::string>();
    auto stepId = request.param(":stepId").as<std::string>();
    
    // Getting the query params
    auto fileQuery = request.query().get("file");
    Pistache::Optional<std::string> file;
    if(!fileQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(fileQuery.get(), valueQuery_instance)){
            file = Pistache::Some(valueQuery_instance);
        }
    }
    
    // Getting the header params
    auto accept = request.headers().tryGetRaw("Accept");
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");

    try {
      this->get_step_logs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::start_pipeline_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");
    auto contentType = request.headers().tryGetRaw("Content-Type");

    try {
      this->start_pipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::step_metric_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    auto executionId = request.param(":executionId").as<std::string>();
    auto phaseId = request.param(":phaseId").as<std::string>();
    auto stepId = request.param(":stepId").as<std::string>();
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");

    try {
      this->step_metric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}
void PipelineExecutionApi::step_state_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto programId = request.param(":programId").as<std::string>();
    auto pipelineId = request.param(":pipelineId").as<std::string>();
    auto executionId = request.param(":executionId").as<std::string>();
    auto phaseId = request.param(":phaseId").as<std::string>();
    auto stepId = request.param(":stepId").as<std::string>();
    
    // Getting the header params
    auto xGwImsOrgId = request.headers().tryGetRaw("x-gw-ims-org-id");
    auto authorization = request.headers().tryGetRaw("Authorization");
    auto xApiKey = request.headers().tryGetRaw("x-api-key");

    try {
      this->step_state(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void PipelineExecutionApi::pipeline_execution_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

