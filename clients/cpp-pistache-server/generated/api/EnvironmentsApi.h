/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EnvironmentsApi.h
 *
 * 
 */

#ifndef EnvironmentsApi_H_
#define EnvironmentsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "BadRequestError.h"
#include "Environment.h"
#include "EnvironmentList.h"
#include "EnvironmentLogs.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  EnvironmentsApi {
public:
    EnvironmentsApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~EnvironmentsApi() {}
    void init();

    const std::string base = "";

private:
    void setupRoutes();

    void delete_environment_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void download_logs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_environment_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_environment_logs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_environments_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void environments_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// DeleteEnvironment
    /// </summary>
    /// <remarks>
    /// Delete environment
    /// </remarks>
    /// <param name="programId">Identifier of the application</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    virtual void delete_environment(const std::string &programId, const std::string &environmentId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Download Logs
    /// </summary>
    /// <remarks>
    /// Download environment logs
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="service">Name of service</param>
    /// <param name="name">Name of log</param>
    /// <param name="date">date for which log is required</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional, default to &quot;&quot;)</param>
    virtual void download_logs(const std::string &programId, const std::string &environmentId, const Pistache::Optional<std::string> &service, const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &date, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<Pistache::Http::Header::Raw> &accept, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get Environment
    /// </summary>
    /// <remarks>
    /// Returns an environment by its id
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    virtual void get_environment(const std::string &programId, const std::string &environmentId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get Environment Logs
    /// </summary>
    /// <remarks>
    /// List all logs available in environment
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="environmentId">Identifier of the environment</param>
    /// <param name="days">number of days for which logs are required</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="service">Names of services (optional, default to std::vector&lt;std::string&gt;())</param>
    /// <param name="name">Names of log (optional, default to std::vector&lt;std::string&gt;())</param>
    virtual void get_environment_logs(const std::string &programId, const std::string &environmentId, const Pistache::Optional<int32_t> &days, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<std::vector<std::string>> &service, const Pistache::Optional<std::vector<std::string>> &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// List Environments
    /// </summary>
    /// <remarks>
    /// Lists all environments in an program
    /// </remarks>
    /// <param name="programId">Identifier of the program</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="type">Type of the environment (optional, default to &quot;&quot;)</param>
    virtual void get_environments(const std::string &programId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<std::string> &type, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* EnvironmentsApi_H_ */

