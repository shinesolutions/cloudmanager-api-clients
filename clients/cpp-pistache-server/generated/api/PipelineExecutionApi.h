/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PipelineExecutionApi.h
 *
 * 
 */

#ifndef PipelineExecutionApi_H_
#define PipelineExecutionApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "PipelineExecution.h"
#include "PipelineExecutionListRepresentation.h"
#include "PipelineExecutionStepState.h"
#include "PipelineStepMetrics.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  PipelineExecutionApi {
public:
    PipelineExecutionApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~PipelineExecutionApi() {}
    void init();

    const std::string base = "";

private:
    void setupRoutes();

    void advance_pipeline_execution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void cancel_pipeline_execution_step_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_current_execution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_execution_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_executions_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_step_logs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void start_pipeline_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void step_metric_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void step_state_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void pipeline_execution_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Advance
    /// </summary>
    /// <remarks>
    /// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="contentType">Must always be application/json</param>
    /// <param name="body">Input for advance. See documentation for details.</param>
    virtual void advance_pipeline_execution(const std::string &programId, const std::string &pipelineId, const std::string &executionId, const std::string &phaseId, const std::string &stepId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<Pistache::Http::Header::Raw> &contentType, const Object &body, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Cancel
    /// </summary>
    /// <remarks>
    /// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="contentType">Must always be application/json</param>
    /// <param name="body">Input for advance. See documentation for details.</param>
    virtual void cancel_pipeline_execution_step(const std::string &programId, const std::string &pipelineId, const std::string &executionId, const std::string &phaseId, const std::string &stepId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<Pistache::Http::Header::Raw> &contentType, const Object &body, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get current pipeline execution
    /// </summary>
    /// <remarks>
    /// Returns current pipeline execution if any.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    virtual void get_current_execution(const std::string &programId, const std::string &pipelineId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get pipeline execution
    /// </summary>
    /// <remarks>
    /// Returns a pipeline execution by id
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    virtual void get_execution(const std::string &programId, const std::string &pipelineId, const std::string &executionId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// List Executions
    /// </summary>
    /// <remarks>
    /// Returns the history of pipeline executions in a newest to oldest order
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="start">Pagination start parameter (optional, default to &quot;&quot;)</param>
    /// <param name="limit">Pagination limit parameter (optional, default to 0)</param>
    virtual void get_executions(const std::string &programId, const std::string &pipelineId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<std::string> &start, const Pistache::Optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get logs
    /// </summary>
    /// <remarks>
    /// Get the logs associated with a step.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="file">Identifier of the log file (optional, default to &quot;&quot;)</param>
    /// <param name="accept">Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional, default to &quot;&quot;)</param>
    virtual void get_step_logs(const std::string &programId, const std::string &pipelineId, const std::string &executionId, const std::string &phaseId, const std::string &stepId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<std::string> &file, const Pistache::Optional<Pistache::Http::Header::Raw> &accept, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Start the pipeline
    /// </summary>
    /// <remarks>
    /// Starts the Pipeline. This works only if the pipeline is not already started.
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    /// <param name="contentType">Must always be application/json</param>
    virtual void start_pipeline(const std::string &programId, const std::string &pipelineId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, const Pistache::Optional<Pistache::Http::Header::Raw> &contentType, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get step metrics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    virtual void step_metric(const std::string &programId, const std::string &pipelineId, const std::string &executionId, const std::string &phaseId, const std::string &stepId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get step state
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="programId">Identifier of the program.</param>
    /// <param name="pipelineId">Identifier of the pipeline</param>
    /// <param name="executionId">Identifier of the execution</param>
    /// <param name="phaseId">Identifier of the phase</param>
    /// <param name="stepId">Identifier of the step</param>
    /// <param name="xGwImsOrgId">IMS organization ID that the request is being made under.</param>
    /// <param name="authorization">Bearer [token] - An access token for the technical account created through integration with Adobe IO</param>
    /// <param name="xApiKey">IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io</param>
    virtual void step_state(const std::string &programId, const std::string &pipelineId, const std::string &executionId, const std::string &phaseId, const std::string &stepId, const Pistache::Optional<Pistache::Http::Header::Raw> &xGwImsOrgId, const Pistache::Optional<Pistache::Http::Header::Raw> &authorization, const Pistache::Optional<Pistache::Http::Header::Raw> &xApiKey, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* PipelineExecutionApi_H_ */

