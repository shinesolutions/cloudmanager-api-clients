/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PipelineExecutionListRepresentation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineExecutionListRepresentation::PipelineExecutionListRepresentation()
{
    m__totalNumberOfItems = 0;
    m__totalNumberOfItemsIsSet = false;
    m__pageIsSet = false;
    m__embeddedIsSet = false;
    m__linksIsSet = false;
    
}

PipelineExecutionListRepresentation::~PipelineExecutionListRepresentation()
{
}

void PipelineExecutionListRepresentation::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const PipelineExecutionListRepresentation& o)
{
    j = nlohmann::json();
    if(o.totalNumberOfItemsIsSet())
        j["_totalNumberOfItems"] = o.m__totalNumberOfItems;
    if(o.pageIsSet())
        j["_page"] = o.m__page;
    if(o.embeddedIsSet())
        j["_embedded"] = o.m__embedded;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
}

void from_json(const nlohmann::json& j, PipelineExecutionListRepresentation& o)
{
    if(j.find("_totalNumberOfItems") != j.end())
    {
        j.at("_totalNumberOfItems").get_to(o.m__totalNumberOfItems);
        o.m__totalNumberOfItemsIsSet = true;
    } 
    if(j.find("_page") != j.end())
    {
        j.at("_page").get_to(o.m__page);
        o.m__pageIsSet = true;
    } 
    if(j.find("_embedded") != j.end())
    {
        j.at("_embedded").get_to(o.m__embedded);
        o.m__embeddedIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
}

int32_t PipelineExecutionListRepresentation::getTotalNumberOfItems() const
{
    return m__totalNumberOfItems;
}
void PipelineExecutionListRepresentation::setTotalNumberOfItems(int32_t const value)
{
    m__totalNumberOfItems = value;
    m__totalNumberOfItemsIsSet = true;
}
bool PipelineExecutionListRepresentation::totalNumberOfItemsIsSet() const
{
    return m__totalNumberOfItemsIsSet;
}
void PipelineExecutionListRepresentation::unset_totalNumberOfItems()
{
    m__totalNumberOfItemsIsSet = false;
}
RequestedPageDetails PipelineExecutionListRepresentation::getPage() const
{
    return m__page;
}
void PipelineExecutionListRepresentation::setPage(RequestedPageDetails const& value)
{
    m__page = value;
    m__pageIsSet = true;
}
bool PipelineExecutionListRepresentation::pageIsSet() const
{
    return m__pageIsSet;
}
void PipelineExecutionListRepresentation::unset_page()
{
    m__pageIsSet = false;
}
PipelineExecutionListRepresentation__embedded PipelineExecutionListRepresentation::getEmbedded() const
{
    return m__embedded;
}
void PipelineExecutionListRepresentation::setEmbedded(PipelineExecutionListRepresentation__embedded const& value)
{
    m__embedded = value;
    m__embeddedIsSet = true;
}
bool PipelineExecutionListRepresentation::embeddedIsSet() const
{
    return m__embeddedIsSet;
}
void PipelineExecutionListRepresentation::unset_embedded()
{
    m__embeddedIsSet = false;
}
PipelineExecutionListRepresentation__links PipelineExecutionListRepresentation::getLinks() const
{
    return m__links;
}
void PipelineExecutionListRepresentation::setLinks(PipelineExecutionListRepresentation__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool PipelineExecutionListRepresentation::linksIsSet() const
{
    return m__linksIsSet;
}
void PipelineExecutionListRepresentation::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}

