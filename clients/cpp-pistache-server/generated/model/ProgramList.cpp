/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ProgramList.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProgramList::ProgramList()
{
    m__totalNumberOfItems = 0;
    m__totalNumberOfItemsIsSet = false;
    m__embeddedIsSet = false;
    m__linksIsSet = false;
    
}

ProgramList::~ProgramList()
{
}

void ProgramList::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const ProgramList& o)
{
    j = nlohmann::json();
    if(o.totalNumberOfItemsIsSet())
        j["_totalNumberOfItems"] = o.m__totalNumberOfItems;
    if(o.embeddedIsSet())
        j["_embedded"] = o.m__embedded;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
}

void from_json(const nlohmann::json& j, ProgramList& o)
{
    if(j.find("_totalNumberOfItems") != j.end())
    {
        j.at("_totalNumberOfItems").get_to(o.m__totalNumberOfItems);
        o.m__totalNumberOfItemsIsSet = true;
    } 
    if(j.find("_embedded") != j.end())
    {
        j.at("_embedded").get_to(o.m__embedded);
        o.m__embeddedIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
}

int32_t ProgramList::getTotalNumberOfItems() const
{
    return m__totalNumberOfItems;
}
void ProgramList::setTotalNumberOfItems(int32_t const value)
{
    m__totalNumberOfItems = value;
    m__totalNumberOfItemsIsSet = true;
}
bool ProgramList::totalNumberOfItemsIsSet() const
{
    return m__totalNumberOfItemsIsSet;
}
void ProgramList::unset_totalNumberOfItems()
{
    m__totalNumberOfItemsIsSet = false;
}
ProgramList__embedded ProgramList::getEmbedded() const
{
    return m__embedded;
}
void ProgramList::setEmbedded(ProgramList__embedded const& value)
{
    m__embedded = value;
    m__embeddedIsSet = true;
}
bool ProgramList::embeddedIsSet() const
{
    return m__embeddedIsSet;
}
void ProgramList::unset_embedded()
{
    m__embeddedIsSet = false;
}
ProgramList__links ProgramList::getLinks() const
{
    return m__links;
}
void ProgramList::setLinks(ProgramList__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool ProgramList::linksIsSet() const
{
    return m__linksIsSet;
}
void ProgramList::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}

