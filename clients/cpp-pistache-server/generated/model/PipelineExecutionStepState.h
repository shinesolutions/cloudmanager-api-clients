/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PipelineExecutionStepState.h
 *
 * Describes the status of a particular pipeline execution step for display purposes
 */

#ifndef PipelineExecutionStepState_H_
#define PipelineExecutionStepState_H_


#include "PipelineExecutionStepState__links.h"
#include <string>
#include "Object.h"
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes the status of a particular pipeline execution step for display purposes
/// </summary>
class  PipelineExecutionStepState
{
public:
    PipelineExecutionStepState();
    virtual ~PipelineExecutionStepState();

    void validate();

    /////////////////////////////////////////////
    /// PipelineExecutionStepState members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    std::string getStepId() const;
    void setStepId(std::string const& value);
    bool stepIdIsSet() const;
    void unsetStepId();
    /// <summary>
    /// 
    /// </summary>
    std::string getPhaseId() const;
    void setPhaseId(std::string const& value);
    bool phaseIdIsSet() const;
    void unsetPhaseId();
    /// <summary>
    /// Name of the action
    /// </summary>
    std::string getAction() const;
    void setAction(std::string const& value);
    bool actionIsSet() const;
    void unsetAction();
    /// <summary>
    /// Target repository
    /// </summary>
    std::string getRepository() const;
    void setRepository(std::string const& value);
    bool repositoryIsSet() const;
    void unsetRepository();
    /// <summary>
    /// Target branch
    /// </summary>
    std::string getBranch() const;
    void setBranch(std::string const& value);
    bool branchIsSet() const;
    void unsetBranch();
    /// <summary>
    /// Target environment
    /// </summary>
    std::string getEnvironment() const;
    void setEnvironment(std::string const& value);
    bool environmentIsSet() const;
    void unsetEnvironment();
    /// <summary>
    /// Target environment type
    /// </summary>
    std::string getEnvironmentType() const;
    void setEnvironmentType(std::string const& value);
    bool environmentTypeIsSet() const;
    void unsetEnvironmentType();
    /// <summary>
    /// Start time
    /// </summary>
    std::string getStartedAt() const;
    void setStartedAt(std::string const& value);
    bool startedAtIsSet() const;
    void unsetStartedAt();
    /// <summary>
    /// Date the execution reached a final state
    /// </summary>
    std::string getFinishedAt() const;
    void setFinishedAt(std::string const& value);
    bool finishedAtIsSet() const;
    void unsetFinishedAt();
    /// <summary>
    /// Information about step result
    /// </summary>
    std::map<std::string, Object>& getDetails();
    void setDetails(std::map<std::string, Object> const& value);
    bool detailsIsSet() const;
    void unsetDetails();
    /// <summary>
    /// Action status
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    PipelineExecutionStepState__links getLinks() const;
    void setLinks(PipelineExecutionStepState__links const& value);
    bool linksIsSet() const;
    void unset_links();

    friend void to_json(nlohmann::json& j, const PipelineExecutionStepState& o);
    friend void from_json(const nlohmann::json& j, PipelineExecutionStepState& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_StepId;
    bool m_StepIdIsSet;
    std::string m_PhaseId;
    bool m_PhaseIdIsSet;
    std::string m_Action;
    bool m_ActionIsSet;
    std::string m_Repository;
    bool m_RepositoryIsSet;
    std::string m_Branch;
    bool m_BranchIsSet;
    std::string m_Environment;
    bool m_EnvironmentIsSet;
    std::string m_EnvironmentType;
    bool m_EnvironmentTypeIsSet;
    std::string m_StartedAt;
    bool m_StartedAtIsSet;
    std::string m_FinishedAt;
    bool m_FinishedAtIsSet;
    std::map<std::string, Object> m_Details;
    bool m_DetailsIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    PipelineExecutionStepState__links m__links;
    bool m__linksIsSet;
};

}
}
}
}

#endif /* PipelineExecutionStepState_H_ */
