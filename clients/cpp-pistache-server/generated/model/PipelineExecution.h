/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PipelineExecution.h
 *
 * Wraps a pipeline execution
 */

#ifndef PipelineExecution_H_
#define PipelineExecution_H_


#include <string>
#include "PipelineExecution__embedded.h"
#include "PipelineExecution__links.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Wraps a pipeline execution
/// </summary>
class  PipelineExecution
{
public:
    PipelineExecution();
    virtual ~PipelineExecution();

    void validate();

    /////////////////////////////////////////////
    /// PipelineExecution members

    /// <summary>
    /// Pipeline execution identifier
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    std::string getProgramId() const;
    void setProgramId(std::string const& value);
    bool programIdIsSet() const;
    void unsetProgramId();
    /// <summary>
    /// Identifier of the pipeline. Unique within the space.
    /// </summary>
    std::string getPipelineId() const;
    void setPipelineId(std::string const& value);
    bool pipelineIdIsSet() const;
    void unsetPipelineId();
    /// <summary>
    /// Version of the artifacts generated during this execution
    /// </summary>
    std::string getArtifactsVersion() const;
    void setArtifactsVersion(std::string const& value);
    bool artifactsVersionIsSet() const;
    void unsetArtifactsVersion();
    /// <summary>
    /// AdobeID who started the pipeline. Empty for auto triggered builds
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    bool userIsSet() const;
    void unsetUser();
    /// <summary>
    /// Status of the execution
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// How the execution was triggered.
    /// </summary>
    std::string getTrigger() const;
    void setTrigger(std::string const& value);
    bool triggerIsSet() const;
    void unsetTrigger();
    /// <summary>
    /// Start time
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreatedAt();
    /// <summary>
    /// Date of last status change
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();
    /// <summary>
    /// Date the execution reached a final state
    /// </summary>
    std::string getFinishedAt() const;
    void setFinishedAt(std::string const& value);
    bool finishedAtIsSet() const;
    void unsetFinishedAt();
    /// <summary>
    /// 
    /// </summary>
    PipelineExecution__embedded getEmbedded() const;
    void setEmbedded(PipelineExecution__embedded const& value);
    bool embeddedIsSet() const;
    void unset_embedded();
    /// <summary>
    /// 
    /// </summary>
    PipelineExecution__links getLinks() const;
    void setLinks(PipelineExecution__links const& value);
    bool linksIsSet() const;
    void unset_links();

    friend void to_json(nlohmann::json& j, const PipelineExecution& o);
    friend void from_json(const nlohmann::json& j, PipelineExecution& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_ProgramId;
    bool m_ProgramIdIsSet;
    std::string m_PipelineId;
    bool m_PipelineIdIsSet;
    std::string m_ArtifactsVersion;
    bool m_ArtifactsVersionIsSet;
    std::string m_User;
    bool m_UserIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    std::string m_Trigger;
    bool m_TriggerIsSet;
    std::string m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::string m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    std::string m_FinishedAt;
    bool m_FinishedAtIsSet;
    PipelineExecution__embedded m__embedded;
    bool m__embeddedIsSet;
    PipelineExecution__links m__links;
    bool m__linksIsSet;
};

}
}
}
}

#endif /* PipelineExecution_H_ */
