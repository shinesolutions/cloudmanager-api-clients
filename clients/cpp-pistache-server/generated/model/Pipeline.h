/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Pipeline.h
 *
 * Describes a __CI/CD Pipeline__
 */

#ifndef Pipeline_H_
#define Pipeline_H_


#include "Pipeline__links.h"
#include <string>
#include <vector>
#include "PipelinePhase.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes a __CI/CD Pipeline__
/// </summary>
class  Pipeline
{
public:
    Pipeline();
    virtual ~Pipeline();

    void validate();

    /////////////////////////////////////////////
    /// Pipeline members

    /// <summary>
    /// Identifier of the pipeline. Unique within the program.
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Identifier of the program. Unique within the space.
    /// </summary>
    std::string getProgramId() const;
    void setProgramId(std::string const& value);
    bool programIdIsSet() const;
    void unsetProgramId();
    /// <summary>
    /// Name of the pipeline
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
    /// </summary>
    std::string getTrigger() const;
    void setTrigger(std::string const& value);
    bool triggerIsSet() const;
    void unsetTrigger();
    /// <summary>
    /// Pipeline status
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// Create date
    /// </summary>
    std::string getCreatedAt() const;
    void setCreatedAt(std::string const& value);
    bool createdAtIsSet() const;
    void unsetCreatedAt();
    /// <summary>
    /// Update date
    /// </summary>
    std::string getUpdatedAt() const;
    void setUpdatedAt(std::string const& value);
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();
    /// <summary>
    /// Last pipeline execution start
    /// </summary>
    std::string getLastStartedAt() const;
    void setLastStartedAt(std::string const& value);
    bool lastStartedAtIsSet() const;
    void unsetLastStartedAt();
    /// <summary>
    /// Last pipeline execution end
    /// </summary>
    std::string getLastFinishedAt() const;
    void setLastFinishedAt(std::string const& value);
    bool lastFinishedAtIsSet() const;
    void unsetLastFinishedAt();
    /// <summary>
    /// Pipeline phases in execution order
    /// </summary>
    std::vector<PipelinePhase>& getPhases();
    void setPhases(std::vector<PipelinePhase> const& value);
    /// <summary>
    /// 
    /// </summary>
    Pipeline__links getLinks() const;
    void setLinks(Pipeline__links const& value);
    bool linksIsSet() const;
    void unset_links();

    friend void to_json(nlohmann::json& j, const Pipeline& o);
    friend void from_json(const nlohmann::json& j, Pipeline& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_ProgramId;
    bool m_ProgramIdIsSet;
    std::string m_Name;

    std::string m_Trigger;
    bool m_TriggerIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    std::string m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::string m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    std::string m_LastStartedAt;
    bool m_LastStartedAtIsSet;
    std::string m_LastFinishedAt;
    bool m_LastFinishedAtIsSet;
    std::vector<PipelinePhase> m_Phases;

    Pipeline__links m__links;
    bool m__linksIsSet;
};

}
}
}
}

#endif /* Pipeline_H_ */
