/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestedPageDetails.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestedPageDetails::RequestedPageDetails()
{
    m_Start = 0;
    m_StartIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_OrderBy = "";
    m_OrderByIsSet = false;
    m_PropertyIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Next = 0;
    m_NextIsSet = false;
    m_Prev = 0;
    m_PrevIsSet = false;
    
}

RequestedPageDetails::~RequestedPageDetails()
{
}

void RequestedPageDetails::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RequestedPageDetails& o)
{
    j = nlohmann::json();
    if(o.startIsSet())
        j["start"] = o.m_Start;
    if(o.limitIsSet())
        j["limit"] = o.m_Limit;
    if(o.orderByIsSet())
        j["orderBy"] = o.m_OrderBy;
    if(o.propertyIsSet() || !o.m_Property.empty())
        j["property"] = o.m_Property;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.nextIsSet())
        j["next"] = o.m_Next;
    if(o.prevIsSet())
        j["prev"] = o.m_Prev;
}

void from_json(const nlohmann::json& j, RequestedPageDetails& o)
{
    if(j.find("start") != j.end())
    {
        j.at("start").get_to(o.m_Start);
        o.m_StartIsSet = true;
    } 
    if(j.find("limit") != j.end())
    {
        j.at("limit").get_to(o.m_Limit);
        o.m_LimitIsSet = true;
    } 
    if(j.find("orderBy") != j.end())
    {
        j.at("orderBy").get_to(o.m_OrderBy);
        o.m_OrderByIsSet = true;
    } 
    if(j.find("property") != j.end())
    {
        j.at("property").get_to(o.m_Property);
        o.m_PropertyIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("next") != j.end())
    {
        j.at("next").get_to(o.m_Next);
        o.m_NextIsSet = true;
    } 
    if(j.find("prev") != j.end())
    {
        j.at("prev").get_to(o.m_Prev);
        o.m_PrevIsSet = true;
    } 
}

int32_t RequestedPageDetails::getStart() const
{
    return m_Start;
}
void RequestedPageDetails::setStart(int32_t const value)
{
    m_Start = value;
    m_StartIsSet = true;
}
bool RequestedPageDetails::startIsSet() const
{
    return m_StartIsSet;
}
void RequestedPageDetails::unsetStart()
{
    m_StartIsSet = false;
}
int32_t RequestedPageDetails::getLimit() const
{
    return m_Limit;
}
void RequestedPageDetails::setLimit(int32_t const value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}
bool RequestedPageDetails::limitIsSet() const
{
    return m_LimitIsSet;
}
void RequestedPageDetails::unsetLimit()
{
    m_LimitIsSet = false;
}
std::string RequestedPageDetails::getOrderBy() const
{
    return m_OrderBy;
}
void RequestedPageDetails::setOrderBy(std::string const& value)
{
    m_OrderBy = value;
    m_OrderByIsSet = true;
}
bool RequestedPageDetails::orderByIsSet() const
{
    return m_OrderByIsSet;
}
void RequestedPageDetails::unsetOrderBy()
{
    m_OrderByIsSet = false;
}
std::vector<std::string>& RequestedPageDetails::getProperty()
{
    return m_Property;
}
void RequestedPageDetails::setProperty(std::vector<std::string> const& value)
{
    m_Property = value;
    m_PropertyIsSet = true;
}
bool RequestedPageDetails::propertyIsSet() const
{
    return m_PropertyIsSet;
}
void RequestedPageDetails::unsetProperty()
{
    m_PropertyIsSet = false;
}
std::string RequestedPageDetails::getType() const
{
    return m_Type;
}
void RequestedPageDetails::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool RequestedPageDetails::typeIsSet() const
{
    return m_TypeIsSet;
}
void RequestedPageDetails::unsetType()
{
    m_TypeIsSet = false;
}
int32_t RequestedPageDetails::getNext() const
{
    return m_Next;
}
void RequestedPageDetails::setNext(int32_t const value)
{
    m_Next = value;
    m_NextIsSet = true;
}
bool RequestedPageDetails::nextIsSet() const
{
    return m_NextIsSet;
}
void RequestedPageDetails::unsetNext()
{
    m_NextIsSet = false;
}
int32_t RequestedPageDetails::getPrev() const
{
    return m_Prev;
}
void RequestedPageDetails::setPrev(int32_t const value)
{
    m_Prev = value;
    m_PrevIsSet = true;
}
bool RequestedPageDetails::prevIsSet() const
{
    return m_PrevIsSet;
}
void RequestedPageDetails::unsetPrev()
{
    m_PrevIsSet = false;
}

}
}
}
}

