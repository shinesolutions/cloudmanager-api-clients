/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PipelinePhase.h
 *
 * Describes a phase of a pipeline
 */

#ifndef PipelinePhase_H_
#define PipelinePhase_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes a phase of a pipeline
/// </summary>
class  PipelinePhase
{
public:
    PipelinePhase();
    virtual ~PipelinePhase();

    void validate();

    /////////////////////////////////////////////
    /// PipelinePhase members

    /// <summary>
    /// Name of the phase
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Type of the phase
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD
    /// </summary>
    std::string getRepositoryId() const;
    void setRepositoryId(std::string const& value);
    bool repositoryIdIsSet() const;
    void unsetRepositoryId();
    /// <summary>
    /// Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing.
    /// </summary>
    std::string getBranch() const;
    void setBranch(std::string const& value);
    bool branchIsSet() const;
    void unsetBranch();
    /// <summary>
    /// Identifier of the target environment. Mandatory if type&#x3D;DEPLOY
    /// </summary>
    std::string getEnvironmentId() const;
    void setEnvironmentId(std::string const& value);
    bool environmentIdIsSet() const;
    void unsetEnvironmentId();

    friend void to_json(nlohmann::json& j, const PipelinePhase& o);
    friend void from_json(const nlohmann::json& j, PipelinePhase& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Type;

    std::string m_RepositoryId;
    bool m_RepositoryIdIsSet;
    std::string m_Branch;
    bool m_BranchIsSet;
    std::string m_EnvironmentId;
    bool m_EnvironmentIdIsSet;
};

}
}
}
}

#endif /* PipelinePhase_H_ */
