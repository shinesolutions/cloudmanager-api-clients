/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EnvironmentLogs.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EnvironmentLogs::EnvironmentLogs()
{
    m_ServiceIsSet = false;
    m_NameIsSet = false;
    m_Days = 0;
    m_DaysIsSet = false;
    m__linksIsSet = false;
    m__embeddedIsSet = false;
    
}

EnvironmentLogs::~EnvironmentLogs()
{
}

void EnvironmentLogs::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const EnvironmentLogs& o)
{
    j = nlohmann::json();
    if(o.serviceIsSet() || !o.m_Service.empty())
        j["service"] = o.m_Service;
    if(o.nameIsSet() || !o.m_Name.empty())
        j["name"] = o.m_Name;
    if(o.daysIsSet())
        j["days"] = o.m_Days;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
    if(o.embeddedIsSet())
        j["_embedded"] = o.m__embedded;
}

void from_json(const nlohmann::json& j, EnvironmentLogs& o)
{
    if(j.find("service") != j.end())
    {
        j.at("service").get_to(o.m_Service);
        o.m_ServiceIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("days") != j.end())
    {
        j.at("days").get_to(o.m_Days);
        o.m_DaysIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
    if(j.find("_embedded") != j.end())
    {
        j.at("_embedded").get_to(o.m__embedded);
        o.m__embeddedIsSet = true;
    } 
}

std::vector<std::string>& EnvironmentLogs::getService()
{
    return m_Service;
}
void EnvironmentLogs::setService(std::vector<std::string> const& value)
{
    m_Service = value;
    m_ServiceIsSet = true;
}
bool EnvironmentLogs::serviceIsSet() const
{
    return m_ServiceIsSet;
}
void EnvironmentLogs::unsetService()
{
    m_ServiceIsSet = false;
}
std::vector<std::string>& EnvironmentLogs::getName()
{
    return m_Name;
}
void EnvironmentLogs::setName(std::vector<std::string> const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool EnvironmentLogs::nameIsSet() const
{
    return m_NameIsSet;
}
void EnvironmentLogs::unsetName()
{
    m_NameIsSet = false;
}
int32_t EnvironmentLogs::getDays() const
{
    return m_Days;
}
void EnvironmentLogs::setDays(int32_t const value)
{
    m_Days = value;
    m_DaysIsSet = true;
}
bool EnvironmentLogs::daysIsSet() const
{
    return m_DaysIsSet;
}
void EnvironmentLogs::unsetDays()
{
    m_DaysIsSet = false;
}
EnvironmentLogs__links EnvironmentLogs::getLinks() const
{
    return m__links;
}
void EnvironmentLogs::setLinks(EnvironmentLogs__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool EnvironmentLogs::linksIsSet() const
{
    return m__linksIsSet;
}
void EnvironmentLogs::unset_links()
{
    m__linksIsSet = false;
}
EnvironmentLogs__embedded EnvironmentLogs::getEmbedded() const
{
    return m__embedded;
}
void EnvironmentLogs::setEmbedded(EnvironmentLogs__embedded const& value)
{
    m__embedded = value;
    m__embeddedIsSet = true;
}
bool EnvironmentLogs::embeddedIsSet() const
{
    return m__embeddedIsSet;
}
void EnvironmentLogs::unset_embedded()
{
    m__embeddedIsSet = false;
}

}
}
}
}

