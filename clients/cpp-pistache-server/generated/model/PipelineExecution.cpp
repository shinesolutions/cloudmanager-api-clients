/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PipelineExecution.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineExecution::PipelineExecution()
{
    m_Id = "";
    m_IdIsSet = false;
    m_ProgramId = "";
    m_ProgramIdIsSet = false;
    m_PipelineId = "";
    m_PipelineIdIsSet = false;
    m_ArtifactsVersion = "";
    m_ArtifactsVersionIsSet = false;
    m_User = "";
    m_UserIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Trigger = "";
    m_TriggerIsSet = false;
    m_CreatedAt = "";
    m_CreatedAtIsSet = false;
    m_UpdatedAt = "";
    m_UpdatedAtIsSet = false;
    m_FinishedAt = "";
    m_FinishedAtIsSet = false;
    m__embeddedIsSet = false;
    m__linksIsSet = false;
    
}

PipelineExecution::~PipelineExecution()
{
}

void PipelineExecution::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const PipelineExecution& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.programIdIsSet())
        j["programId"] = o.m_ProgramId;
    if(o.pipelineIdIsSet())
        j["pipelineId"] = o.m_PipelineId;
    if(o.artifactsVersionIsSet())
        j["artifactsVersion"] = o.m_ArtifactsVersion;
    if(o.userIsSet())
        j["user"] = o.m_User;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.triggerIsSet())
        j["trigger"] = o.m_Trigger;
    if(o.createdAtIsSet())
        j["createdAt"] = o.m_CreatedAt;
    if(o.updatedAtIsSet())
        j["updatedAt"] = o.m_UpdatedAt;
    if(o.finishedAtIsSet())
        j["finishedAt"] = o.m_FinishedAt;
    if(o.embeddedIsSet())
        j["_embedded"] = o.m__embedded;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
}

void from_json(const nlohmann::json& j, PipelineExecution& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("programId") != j.end())
    {
        j.at("programId").get_to(o.m_ProgramId);
        o.m_ProgramIdIsSet = true;
    } 
    if(j.find("pipelineId") != j.end())
    {
        j.at("pipelineId").get_to(o.m_PipelineId);
        o.m_PipelineIdIsSet = true;
    } 
    if(j.find("artifactsVersion") != j.end())
    {
        j.at("artifactsVersion").get_to(o.m_ArtifactsVersion);
        o.m_ArtifactsVersionIsSet = true;
    } 
    if(j.find("user") != j.end())
    {
        j.at("user").get_to(o.m_User);
        o.m_UserIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("trigger") != j.end())
    {
        j.at("trigger").get_to(o.m_Trigger);
        o.m_TriggerIsSet = true;
    } 
    if(j.find("createdAt") != j.end())
    {
        j.at("createdAt").get_to(o.m_CreatedAt);
        o.m_CreatedAtIsSet = true;
    } 
    if(j.find("updatedAt") != j.end())
    {
        j.at("updatedAt").get_to(o.m_UpdatedAt);
        o.m_UpdatedAtIsSet = true;
    } 
    if(j.find("finishedAt") != j.end())
    {
        j.at("finishedAt").get_to(o.m_FinishedAt);
        o.m_FinishedAtIsSet = true;
    } 
    if(j.find("_embedded") != j.end())
    {
        j.at("_embedded").get_to(o.m__embedded);
        o.m__embeddedIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
}

std::string PipelineExecution::getId() const
{
    return m_Id;
}
void PipelineExecution::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PipelineExecution::idIsSet() const
{
    return m_IdIsSet;
}
void PipelineExecution::unsetId()
{
    m_IdIsSet = false;
}
std::string PipelineExecution::getProgramId() const
{
    return m_ProgramId;
}
void PipelineExecution::setProgramId(std::string const& value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}
bool PipelineExecution::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}
void PipelineExecution::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
std::string PipelineExecution::getPipelineId() const
{
    return m_PipelineId;
}
void PipelineExecution::setPipelineId(std::string const& value)
{
    m_PipelineId = value;
    m_PipelineIdIsSet = true;
}
bool PipelineExecution::pipelineIdIsSet() const
{
    return m_PipelineIdIsSet;
}
void PipelineExecution::unsetPipelineId()
{
    m_PipelineIdIsSet = false;
}
std::string PipelineExecution::getArtifactsVersion() const
{
    return m_ArtifactsVersion;
}
void PipelineExecution::setArtifactsVersion(std::string const& value)
{
    m_ArtifactsVersion = value;
    m_ArtifactsVersionIsSet = true;
}
bool PipelineExecution::artifactsVersionIsSet() const
{
    return m_ArtifactsVersionIsSet;
}
void PipelineExecution::unsetArtifactsVersion()
{
    m_ArtifactsVersionIsSet = false;
}
std::string PipelineExecution::getUser() const
{
    return m_User;
}
void PipelineExecution::setUser(std::string const& value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool PipelineExecution::userIsSet() const
{
    return m_UserIsSet;
}
void PipelineExecution::unsetUser()
{
    m_UserIsSet = false;
}
std::string PipelineExecution::getStatus() const
{
    return m_Status;
}
void PipelineExecution::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool PipelineExecution::statusIsSet() const
{
    return m_StatusIsSet;
}
void PipelineExecution::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string PipelineExecution::getTrigger() const
{
    return m_Trigger;
}
void PipelineExecution::setTrigger(std::string const& value)
{
    m_Trigger = value;
    m_TriggerIsSet = true;
}
bool PipelineExecution::triggerIsSet() const
{
    return m_TriggerIsSet;
}
void PipelineExecution::unsetTrigger()
{
    m_TriggerIsSet = false;
}
std::string PipelineExecution::getCreatedAt() const
{
    return m_CreatedAt;
}
void PipelineExecution::setCreatedAt(std::string const& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}
bool PipelineExecution::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}
void PipelineExecution::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::string PipelineExecution::getUpdatedAt() const
{
    return m_UpdatedAt;
}
void PipelineExecution::setUpdatedAt(std::string const& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}
bool PipelineExecution::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}
void PipelineExecution::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
std::string PipelineExecution::getFinishedAt() const
{
    return m_FinishedAt;
}
void PipelineExecution::setFinishedAt(std::string const& value)
{
    m_FinishedAt = value;
    m_FinishedAtIsSet = true;
}
bool PipelineExecution::finishedAtIsSet() const
{
    return m_FinishedAtIsSet;
}
void PipelineExecution::unsetFinishedAt()
{
    m_FinishedAtIsSet = false;
}
PipelineExecution__embedded PipelineExecution::getEmbedded() const
{
    return m__embedded;
}
void PipelineExecution::setEmbedded(PipelineExecution__embedded const& value)
{
    m__embedded = value;
    m__embeddedIsSet = true;
}
bool PipelineExecution::embeddedIsSet() const
{
    return m__embeddedIsSet;
}
void PipelineExecution::unset_embedded()
{
    m__embeddedIsSet = false;
}
PipelineExecution__links PipelineExecution::getLinks() const
{
    return m__links;
}
void PipelineExecution::setLinks(PipelineExecution__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool PipelineExecution::linksIsSet() const
{
    return m__linksIsSet;
}
void PipelineExecution::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}

