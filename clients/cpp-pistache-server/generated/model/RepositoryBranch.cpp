/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RepositoryBranch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RepositoryBranch::RepositoryBranch()
{
    m_ProgramId = "";
    m_ProgramIdIsSet = false;
    m_RepositoryId = 0L;
    m_RepositoryIdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m__linksIsSet = false;
    
}

RepositoryBranch::~RepositoryBranch()
{
}

void RepositoryBranch::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RepositoryBranch& o)
{
    j = nlohmann::json();
    if(o.programIdIsSet())
        j["programId"] = o.m_ProgramId;
    if(o.repositoryIdIsSet())
        j["repositoryId"] = o.m_RepositoryId;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
}

void from_json(const nlohmann::json& j, RepositoryBranch& o)
{
    if(j.find("programId") != j.end())
    {
        j.at("programId").get_to(o.m_ProgramId);
        o.m_ProgramIdIsSet = true;
    } 
    if(j.find("repositoryId") != j.end())
    {
        j.at("repositoryId").get_to(o.m_RepositoryId);
        o.m_RepositoryIdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
}

std::string RepositoryBranch::getProgramId() const
{
    return m_ProgramId;
}
void RepositoryBranch::setProgramId(std::string const& value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}
bool RepositoryBranch::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}
void RepositoryBranch::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
int64_t RepositoryBranch::getRepositoryId() const
{
    return m_RepositoryId;
}
void RepositoryBranch::setRepositoryId(int64_t const value)
{
    m_RepositoryId = value;
    m_RepositoryIdIsSet = true;
}
bool RepositoryBranch::repositoryIdIsSet() const
{
    return m_RepositoryIdIsSet;
}
void RepositoryBranch::unsetRepositoryId()
{
    m_RepositoryIdIsSet = false;
}
std::string RepositoryBranch::getName() const
{
    return m_Name;
}
void RepositoryBranch::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool RepositoryBranch::nameIsSet() const
{
    return m_NameIsSet;
}
void RepositoryBranch::unsetName()
{
    m_NameIsSet = false;
}
RepositoryBranch__links RepositoryBranch::getLinks() const
{
    return m__links;
}
void RepositoryBranch::setLinks(RepositoryBranch__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool RepositoryBranch::linksIsSet() const
{
    return m__linksIsSet;
}
void RepositoryBranch::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}

