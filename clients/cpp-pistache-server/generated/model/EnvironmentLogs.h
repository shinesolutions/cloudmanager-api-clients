/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EnvironmentLogs.h
 *
 * Logs of an Environment
 */

#ifndef EnvironmentLogs_H_
#define EnvironmentLogs_H_


#include "EnvironmentLogs__embedded.h"
#include <string>
#include "EnvironmentLogs__links.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Logs of an Environment
/// </summary>
class  EnvironmentLogs
{
public:
    EnvironmentLogs();
    virtual ~EnvironmentLogs();

    void validate();

    /////////////////////////////////////////////
    /// EnvironmentLogs members

    /// <summary>
    /// Name of the service
    /// </summary>
    std::vector<std::string>& getService();
    void setService(std::vector<std::string> const& value);
    bool serviceIsSet() const;
    void unsetService();
    /// <summary>
    /// Name of the Log
    /// </summary>
    std::vector<std::string>& getName();
    void setName(std::vector<std::string> const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Number of days
    /// </summary>
    int32_t getDays() const;
    void setDays(int32_t const value);
    bool daysIsSet() const;
    void unsetDays();
    /// <summary>
    /// 
    /// </summary>
    EnvironmentLogs__links getLinks() const;
    void setLinks(EnvironmentLogs__links const& value);
    bool linksIsSet() const;
    void unset_links();
    /// <summary>
    /// 
    /// </summary>
    EnvironmentLogs__embedded getEmbedded() const;
    void setEmbedded(EnvironmentLogs__embedded const& value);
    bool embeddedIsSet() const;
    void unset_embedded();

    friend void to_json(nlohmann::json& j, const EnvironmentLogs& o);
    friend void from_json(const nlohmann::json& j, EnvironmentLogs& o);
protected:
    std::vector<std::string> m_Service;
    bool m_ServiceIsSet;
    std::vector<std::string> m_Name;
    bool m_NameIsSet;
    int32_t m_Days;
    bool m_DaysIsSet;
    EnvironmentLogs__links m__links;
    bool m__linksIsSet;
    EnvironmentLogs__embedded m__embedded;
    bool m__embeddedIsSet;
};

}
}
}
}

#endif /* EnvironmentLogs_H_ */
