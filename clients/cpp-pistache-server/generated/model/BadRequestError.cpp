/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BadRequestError.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

BadRequestError::BadRequestError()
{
    m_Status = 0;
    m_StatusIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_MissingParamsIsSet = false;
    m_InvalidParamsIsSet = false;
    
}

BadRequestError::~BadRequestError()
{
}

void BadRequestError::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const BadRequestError& o)
{
    j = nlohmann::json();
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.missingParamsIsSet() || !o.m_MissingParams.empty())
        j["missingParams"] = o.m_MissingParams;
    if(o.invalidParamsIsSet() || !o.m_InvalidParams.empty())
        j["invalidParams"] = o.m_InvalidParams;
}

void from_json(const nlohmann::json& j, BadRequestError& o)
{
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("missingParams") != j.end())
    {
        j.at("missingParams").get_to(o.m_MissingParams);
        o.m_MissingParamsIsSet = true;
    } 
    if(j.find("invalidParams") != j.end())
    {
        j.at("invalidParams").get_to(o.m_InvalidParams);
        o.m_InvalidParamsIsSet = true;
    } 
}

int32_t BadRequestError::getStatus() const
{
    return m_Status;
}
void BadRequestError::setStatus(int32_t const value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool BadRequestError::statusIsSet() const
{
    return m_StatusIsSet;
}
void BadRequestError::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string BadRequestError::getType() const
{
    return m_Type;
}
void BadRequestError::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool BadRequestError::typeIsSet() const
{
    return m_TypeIsSet;
}
void BadRequestError::unsetType()
{
    m_TypeIsSet = false;
}
std::string BadRequestError::getTitle() const
{
    return m_Title;
}
void BadRequestError::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool BadRequestError::titleIsSet() const
{
    return m_TitleIsSet;
}
void BadRequestError::unsetTitle()
{
    m_TitleIsSet = false;
}
std::vector<MissingParameter>& BadRequestError::getMissingParams()
{
    return m_MissingParams;
}
void BadRequestError::setMissingParams(std::vector<MissingParameter> const& value)
{
    m_MissingParams = value;
    m_MissingParamsIsSet = true;
}
bool BadRequestError::missingParamsIsSet() const
{
    return m_MissingParamsIsSet;
}
void BadRequestError::unsetMissingParams()
{
    m_MissingParamsIsSet = false;
}
std::vector<InvalidParameter>& BadRequestError::getInvalidParams()
{
    return m_InvalidParams;
}
void BadRequestError::setInvalidParams(std::vector<InvalidParameter> const& value)
{
    m_InvalidParams = value;
    m_InvalidParamsIsSet = true;
}
bool BadRequestError::invalidParamsIsSet() const
{
    return m_InvalidParamsIsSet;
}
void BadRequestError::unsetInvalidParams()
{
    m_InvalidParamsIsSet = false;
}

}
}
}
}

