/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EmbeddedProgram.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EmbeddedProgram::EmbeddedProgram()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_TenantId = "";
    m_TenantIdIsSet = false;
    
}

EmbeddedProgram::~EmbeddedProgram()
{
}

void EmbeddedProgram::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const EmbeddedProgram& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.enabledIsSet())
        j["enabled"] = o.m_Enabled;
    if(o.tenantIdIsSet())
        j["tenantId"] = o.m_TenantId;
}

void from_json(const nlohmann::json& j, EmbeddedProgram& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("enabled") != j.end())
    {
        j.at("enabled").get_to(o.m_Enabled);
        o.m_EnabledIsSet = true;
    } 
    if(j.find("tenantId") != j.end())
    {
        j.at("tenantId").get_to(o.m_TenantId);
        o.m_TenantIdIsSet = true;
    } 
}

std::string EmbeddedProgram::getId() const
{
    return m_Id;
}
void EmbeddedProgram::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool EmbeddedProgram::idIsSet() const
{
    return m_IdIsSet;
}
void EmbeddedProgram::unsetId()
{
    m_IdIsSet = false;
}
std::string EmbeddedProgram::getName() const
{
    return m_Name;
}
void EmbeddedProgram::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool EmbeddedProgram::nameIsSet() const
{
    return m_NameIsSet;
}
void EmbeddedProgram::unsetName()
{
    m_NameIsSet = false;
}
bool EmbeddedProgram::isEnabled() const
{
    return m_Enabled;
}
void EmbeddedProgram::setEnabled(bool const value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool EmbeddedProgram::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void EmbeddedProgram::unsetEnabled()
{
    m_EnabledIsSet = false;
}
std::string EmbeddedProgram::getTenantId() const
{
    return m_TenantId;
}
void EmbeddedProgram::setTenantId(std::string const& value)
{
    m_TenantId = value;
    m_TenantIdIsSet = true;
}
bool EmbeddedProgram::tenantIdIsSet() const
{
    return m_TenantIdIsSet;
}
void EmbeddedProgram::unsetTenantId()
{
    m_TenantIdIsSet = false;
}

}
}
}
}

