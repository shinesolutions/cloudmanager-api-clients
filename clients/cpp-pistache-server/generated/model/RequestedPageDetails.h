/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RequestedPageDetails.h
 *
 * Filtering and sorting page details
 */

#ifndef RequestedPageDetails_H_
#define RequestedPageDetails_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Filtering and sorting page details
/// </summary>
class  RequestedPageDetails
{
public:
    RequestedPageDetails();
    virtual ~RequestedPageDetails();

    void validate();

    /////////////////////////////////////////////
    /// RequestedPageDetails members

    /// <summary>
    /// 
    /// </summary>
    int32_t getStart() const;
    void setStart(int32_t const value);
    bool startIsSet() const;
    void unsetStart();
    /// <summary>
    /// 
    /// </summary>
    int32_t getLimit() const;
    void setLimit(int32_t const value);
    bool limitIsSet() const;
    void unsetLimit();
    /// <summary>
    /// 
    /// </summary>
    std::string getOrderBy() const;
    void setOrderBy(std::string const& value);
    bool orderByIsSet() const;
    void unsetOrderBy();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string>& getProperty();
    void setProperty(std::vector<std::string> const& value);
    bool propertyIsSet() const;
    void unsetProperty();
    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNext() const;
    void setNext(int32_t const value);
    bool nextIsSet() const;
    void unsetNext();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPrev() const;
    void setPrev(int32_t const value);
    bool prevIsSet() const;
    void unsetPrev();

    friend void to_json(nlohmann::json& j, const RequestedPageDetails& o);
    friend void from_json(const nlohmann::json& j, RequestedPageDetails& o);
protected:
    int32_t m_Start;
    bool m_StartIsSet;
    int32_t m_Limit;
    bool m_LimitIsSet;
    std::string m_OrderBy;
    bool m_OrderByIsSet;
    std::vector<std::string> m_Property;
    bool m_PropertyIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    int32_t m_Next;
    bool m_NextIsSet;
    int32_t m_Prev;
    bool m_PrevIsSet;
};

}
}
}
}

#endif /* RequestedPageDetails_H_ */
