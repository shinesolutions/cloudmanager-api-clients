/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Program__links.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Program__links::Program__links()
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = false;
    m_SelfIsSet = false;
    
}

Program__links::~Program__links()
{
}

void Program__links::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Program__links& o)
{
    j = nlohmann::json();
    if(o.httpNsAdobeComAdobecloudRelPipelinesIsSet())
        j["http://ns.adobe.com/adobecloud/rel/pipelines"] = o.m_Http__ns_adobe_com_adobecloud_rel_pipelines;
    if(o.httpNsAdobeComAdobecloudRelEnvironmentsIsSet())
        j["http://ns.adobe.com/adobecloud/rel/environments"] = o.m_Http__ns_adobe_com_adobecloud_rel_environments;
    if(o.httpNsAdobeComAdobecloudRelRepositoriesIsSet())
        j["http://ns.adobe.com/adobecloud/rel/repositories"] = o.m_Http__ns_adobe_com_adobecloud_rel_repositories;
    if(o.selfIsSet())
        j["self"] = o.m_Self;
}

void from_json(const nlohmann::json& j, Program__links& o)
{
    if(j.find("http://ns.adobe.com/adobecloud/rel/pipelines") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/pipelines").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_pipelines);
        o.m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/environments") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/environments").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_environments);
        o.m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/repositories") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/repositories").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_repositories);
        o.m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = true;
    } 
    if(j.find("self") != j.end())
    {
        j.at("self").get_to(o.m_Self);
        o.m_SelfIsSet = true;
    } 
}

HalLink Program__links::getHttpNsAdobeComAdobecloudRelPipelines() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipelines;
}
void Program__links::setHttpNsAdobeComAdobecloudRelPipelines(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelines = value;
    m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = true;
}
bool Program__links::httpNsAdobeComAdobecloudRelPipelinesIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet;
}
void Program__links::unsetHttp__ns_adobe_com_adobecloud_rel_pipelines()
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelinesIsSet = false;
}
HalLink Program__links::getHttpNsAdobeComAdobecloudRelEnvironments() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_environments;
}
void Program__links::setHttpNsAdobeComAdobecloudRelEnvironments(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_environments = value;
    m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = true;
}
bool Program__links::httpNsAdobeComAdobecloudRelEnvironmentsIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet;
}
void Program__links::unsetHttp__ns_adobe_com_adobecloud_rel_environments()
{
    m_Http__ns_adobe_com_adobecloud_rel_environmentsIsSet = false;
}
HalLink Program__links::getHttpNsAdobeComAdobecloudRelRepositories() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_repositories;
}
void Program__links::setHttpNsAdobeComAdobecloudRelRepositories(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_repositories = value;
    m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = true;
}
bool Program__links::httpNsAdobeComAdobecloudRelRepositoriesIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet;
}
void Program__links::unsetHttp__ns_adobe_com_adobecloud_rel_repositories()
{
    m_Http__ns_adobe_com_adobecloud_rel_repositoriesIsSet = false;
}
HalLink Program__links::getSelf() const
{
    return m_Self;
}
void Program__links::setSelf(HalLink const& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}
bool Program__links::selfIsSet() const
{
    return m_SelfIsSet;
}
void Program__links::unsetSelf()
{
    m_SelfIsSet = false;
}

}
}
}
}

