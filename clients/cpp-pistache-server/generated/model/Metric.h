/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Metric.h
 *
 * Describes a __Metric__
 */

#ifndef Metric_H_
#define Metric_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes a __Metric__
/// </summary>
class  Metric
{
public:
    Metric();
    virtual ~Metric();

    void validate();

    /////////////////////////////////////////////
    /// Metric members

    /// <summary>
    /// KPI result identifier
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Severity of the metric
    /// </summary>
    std::string getSeverity() const;
    void setSeverity(std::string const& value);
    bool severityIsSet() const;
    void unsetSeverity();
    /// <summary>
    /// Whether metric is considered passed
    /// </summary>
    bool isPassed() const;
    void setPassed(bool const value);
    bool passedIsSet() const;
    void unsetPassed();
    /// <summary>
    /// Whether user override the failed metric
    /// </summary>
    bool isOverride() const;
    void setOverride(bool const value);
    bool overrideIsSet() const;
    void unsetOverride();
    /// <summary>
    /// Expected value for the metric
    /// </summary>
    std::string getActualValue() const;
    void setActualValue(std::string const& value);
    bool actualValueIsSet() const;
    void unsetActualValue();
    /// <summary>
    /// Expected value for the metric
    /// </summary>
    std::string getExpectedValue() const;
    void setExpectedValue(std::string const& value);
    bool expectedValueIsSet() const;
    void unsetExpectedValue();
    /// <summary>
    /// Comparator used for the metric
    /// </summary>
    std::string getComparator() const;
    void setComparator(std::string const& value);
    bool comparatorIsSet() const;
    void unsetComparator();
    /// <summary>
    /// KPI identifier
    /// </summary>
    std::string getKpi() const;
    void setKpi(std::string const& value);
    bool kpiIsSet() const;
    void unsetKpi();

    friend void to_json(nlohmann::json& j, const Metric& o);
    friend void from_json(const nlohmann::json& j, Metric& o);
protected:
    std::string m_Id;
    bool m_IdIsSet;
    std::string m_Severity;
    bool m_SeverityIsSet;
    bool m_Passed;
    bool m_PassedIsSet;
    bool m_Override;
    bool m_OverrideIsSet;
    std::string m_ActualValue;
    bool m_ActualValueIsSet;
    std::string m_ExpectedValue;
    bool m_ExpectedValueIsSet;
    std::string m_Comparator;
    bool m_ComparatorIsSet;
    std::string m_Kpi;
    bool m_KpiIsSet;
};

}
}
}
}

#endif /* Metric_H_ */
