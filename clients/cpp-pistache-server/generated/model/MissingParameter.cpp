/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MissingParameter.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MissingParameter::MissingParameter()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    
}

MissingParameter::~MissingParameter()
{
}

void MissingParameter::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const MissingParameter& o)
{
    j = nlohmann::json();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
}

void from_json(const nlohmann::json& j, MissingParameter& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
}

std::string MissingParameter::getName() const
{
    return m_Name;
}
void MissingParameter::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool MissingParameter::nameIsSet() const
{
    return m_NameIsSet;
}
void MissingParameter::unsetName()
{
    m_NameIsSet = false;
}
std::string MissingParameter::getType() const
{
    return m_Type;
}
void MissingParameter::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool MissingParameter::typeIsSet() const
{
    return m_TypeIsSet;
}
void MissingParameter::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

