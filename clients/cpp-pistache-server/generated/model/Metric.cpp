/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Metric.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Metric::Metric()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Severity = "";
    m_SeverityIsSet = false;
    m_Passed = false;
    m_PassedIsSet = false;
    m_Override = false;
    m_OverrideIsSet = false;
    m_ActualValue = "";
    m_ActualValueIsSet = false;
    m_ExpectedValue = "";
    m_ExpectedValueIsSet = false;
    m_Comparator = "";
    m_ComparatorIsSet = false;
    m_Kpi = "";
    m_KpiIsSet = false;
    
}

Metric::~Metric()
{
}

void Metric::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Metric& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.severityIsSet())
        j["severity"] = o.m_Severity;
    if(o.passedIsSet())
        j["passed"] = o.m_Passed;
    if(o.overrideIsSet())
        j["override"] = o.m_Override;
    if(o.actualValueIsSet())
        j["actualValue"] = o.m_ActualValue;
    if(o.expectedValueIsSet())
        j["expectedValue"] = o.m_ExpectedValue;
    if(o.comparatorIsSet())
        j["comparator"] = o.m_Comparator;
    if(o.kpiIsSet())
        j["kpi"] = o.m_Kpi;
}

void from_json(const nlohmann::json& j, Metric& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("severity") != j.end())
    {
        j.at("severity").get_to(o.m_Severity);
        o.m_SeverityIsSet = true;
    } 
    if(j.find("passed") != j.end())
    {
        j.at("passed").get_to(o.m_Passed);
        o.m_PassedIsSet = true;
    } 
    if(j.find("override") != j.end())
    {
        j.at("override").get_to(o.m_Override);
        o.m_OverrideIsSet = true;
    } 
    if(j.find("actualValue") != j.end())
    {
        j.at("actualValue").get_to(o.m_ActualValue);
        o.m_ActualValueIsSet = true;
    } 
    if(j.find("expectedValue") != j.end())
    {
        j.at("expectedValue").get_to(o.m_ExpectedValue);
        o.m_ExpectedValueIsSet = true;
    } 
    if(j.find("comparator") != j.end())
    {
        j.at("comparator").get_to(o.m_Comparator);
        o.m_ComparatorIsSet = true;
    } 
    if(j.find("kpi") != j.end())
    {
        j.at("kpi").get_to(o.m_Kpi);
        o.m_KpiIsSet = true;
    } 
}

std::string Metric::getId() const
{
    return m_Id;
}
void Metric::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Metric::idIsSet() const
{
    return m_IdIsSet;
}
void Metric::unsetId()
{
    m_IdIsSet = false;
}
std::string Metric::getSeverity() const
{
    return m_Severity;
}
void Metric::setSeverity(std::string const& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}
bool Metric::severityIsSet() const
{
    return m_SeverityIsSet;
}
void Metric::unsetSeverity()
{
    m_SeverityIsSet = false;
}
bool Metric::isPassed() const
{
    return m_Passed;
}
void Metric::setPassed(bool const value)
{
    m_Passed = value;
    m_PassedIsSet = true;
}
bool Metric::passedIsSet() const
{
    return m_PassedIsSet;
}
void Metric::unsetPassed()
{
    m_PassedIsSet = false;
}
bool Metric::isOverride() const
{
    return m_Override;
}
void Metric::setOverride(bool const value)
{
    m_Override = value;
    m_OverrideIsSet = true;
}
bool Metric::overrideIsSet() const
{
    return m_OverrideIsSet;
}
void Metric::unsetOverride()
{
    m_OverrideIsSet = false;
}
std::string Metric::getActualValue() const
{
    return m_ActualValue;
}
void Metric::setActualValue(std::string const& value)
{
    m_ActualValue = value;
    m_ActualValueIsSet = true;
}
bool Metric::actualValueIsSet() const
{
    return m_ActualValueIsSet;
}
void Metric::unsetActualValue()
{
    m_ActualValueIsSet = false;
}
std::string Metric::getExpectedValue() const
{
    return m_ExpectedValue;
}
void Metric::setExpectedValue(std::string const& value)
{
    m_ExpectedValue = value;
    m_ExpectedValueIsSet = true;
}
bool Metric::expectedValueIsSet() const
{
    return m_ExpectedValueIsSet;
}
void Metric::unsetExpectedValue()
{
    m_ExpectedValueIsSet = false;
}
std::string Metric::getComparator() const
{
    return m_Comparator;
}
void Metric::setComparator(std::string const& value)
{
    m_Comparator = value;
    m_ComparatorIsSet = true;
}
bool Metric::comparatorIsSet() const
{
    return m_ComparatorIsSet;
}
void Metric::unsetComparator()
{
    m_ComparatorIsSet = false;
}
std::string Metric::getKpi() const
{
    return m_Kpi;
}
void Metric::setKpi(std::string const& value)
{
    m_Kpi = value;
    m_KpiIsSet = true;
}
bool Metric::kpiIsSet() const
{
    return m_KpiIsSet;
}
void Metric::unsetKpi()
{
    m_KpiIsSet = false;
}

}
}
}
}

