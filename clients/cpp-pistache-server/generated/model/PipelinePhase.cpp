/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PipelinePhase.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelinePhase::PipelinePhase()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Type = "";
    m_RepositoryId = "";
    m_RepositoryIdIsSet = false;
    m_Branch = "";
    m_BranchIsSet = false;
    m_EnvironmentId = "";
    m_EnvironmentIdIsSet = false;
    
}

PipelinePhase::~PipelinePhase()
{
}

void PipelinePhase::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const PipelinePhase& o)
{
    j = nlohmann::json();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    j["type"] = o.m_Type;
    if(o.repositoryIdIsSet())
        j["repositoryId"] = o.m_RepositoryId;
    if(o.branchIsSet())
        j["branch"] = o.m_Branch;
    if(o.environmentIdIsSet())
        j["environmentId"] = o.m_EnvironmentId;
}

void from_json(const nlohmann::json& j, PipelinePhase& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    j.at("type").get_to(o.m_Type);
    if(j.find("repositoryId") != j.end())
    {
        j.at("repositoryId").get_to(o.m_RepositoryId);
        o.m_RepositoryIdIsSet = true;
    } 
    if(j.find("branch") != j.end())
    {
        j.at("branch").get_to(o.m_Branch);
        o.m_BranchIsSet = true;
    } 
    if(j.find("environmentId") != j.end())
    {
        j.at("environmentId").get_to(o.m_EnvironmentId);
        o.m_EnvironmentIdIsSet = true;
    } 
}

std::string PipelinePhase::getName() const
{
    return m_Name;
}
void PipelinePhase::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool PipelinePhase::nameIsSet() const
{
    return m_NameIsSet;
}
void PipelinePhase::unsetName()
{
    m_NameIsSet = false;
}
std::string PipelinePhase::getType() const
{
    return m_Type;
}
void PipelinePhase::setType(std::string const& value)
{
    m_Type = value;
}
std::string PipelinePhase::getRepositoryId() const
{
    return m_RepositoryId;
}
void PipelinePhase::setRepositoryId(std::string const& value)
{
    m_RepositoryId = value;
    m_RepositoryIdIsSet = true;
}
bool PipelinePhase::repositoryIdIsSet() const
{
    return m_RepositoryIdIsSet;
}
void PipelinePhase::unsetRepositoryId()
{
    m_RepositoryIdIsSet = false;
}
std::string PipelinePhase::getBranch() const
{
    return m_Branch;
}
void PipelinePhase::setBranch(std::string const& value)
{
    m_Branch = value;
    m_BranchIsSet = true;
}
bool PipelinePhase::branchIsSet() const
{
    return m_BranchIsSet;
}
void PipelinePhase::unsetBranch()
{
    m_BranchIsSet = false;
}
std::string PipelinePhase::getEnvironmentId() const
{
    return m_EnvironmentId;
}
void PipelinePhase::setEnvironmentId(std::string const& value)
{
    m_EnvironmentId = value;
    m_EnvironmentIdIsSet = true;
}
bool PipelinePhase::environmentIdIsSet() const
{
    return m_EnvironmentIdIsSet;
}
void PipelinePhase::unsetEnvironmentId()
{
    m_EnvironmentIdIsSet = false;
}

}
}
}
}

