/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EnvironmentLog.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EnvironmentLog::EnvironmentLog()
{
    m_Service = "";
    m_ServiceIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_date = "";
    m_dateIsSet = false;
    m_ProgramId = 0L;
    m_ProgramIdIsSet = false;
    m_EnvironmentId = 0L;
    m_EnvironmentIdIsSet = false;
    m__linksIsSet = false;
    
}

EnvironmentLog::~EnvironmentLog()
{
}

void EnvironmentLog::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const EnvironmentLog& o)
{
    j = nlohmann::json();
    if(o.serviceIsSet())
        j["service"] = o.m_Service;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.dateIsSet())
        j["date"] = o.m_date;
    if(o.programIdIsSet())
        j["programId"] = o.m_ProgramId;
    if(o.environmentIdIsSet())
        j["environmentId"] = o.m_EnvironmentId;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
}

void from_json(const nlohmann::json& j, EnvironmentLog& o)
{
    if(j.find("service") != j.end())
    {
        j.at("service").get_to(o.m_Service);
        o.m_ServiceIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("date") != j.end())
    {
        j.at("date").get_to(o.m_date);
        o.m_dateIsSet = true;
    } 
    if(j.find("programId") != j.end())
    {
        j.at("programId").get_to(o.m_ProgramId);
        o.m_ProgramIdIsSet = true;
    } 
    if(j.find("environmentId") != j.end())
    {
        j.at("environmentId").get_to(o.m_EnvironmentId);
        o.m_EnvironmentIdIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
}

std::string EnvironmentLog::getService() const
{
    return m_Service;
}
void EnvironmentLog::setService(std::string const& value)
{
    m_Service = value;
    m_ServiceIsSet = true;
}
bool EnvironmentLog::serviceIsSet() const
{
    return m_ServiceIsSet;
}
void EnvironmentLog::unsetService()
{
    m_ServiceIsSet = false;
}
std::string EnvironmentLog::getName() const
{
    return m_Name;
}
void EnvironmentLog::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool EnvironmentLog::nameIsSet() const
{
    return m_NameIsSet;
}
void EnvironmentLog::unsetName()
{
    m_NameIsSet = false;
}
std::string EnvironmentLog::getDate() const
{
    return m_date;
}
void EnvironmentLog::setDate(std::string const& value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool EnvironmentLog::dateIsSet() const
{
    return m_dateIsSet;
}
void EnvironmentLog::unsetdate()
{
    m_dateIsSet = false;
}
int64_t EnvironmentLog::getProgramId() const
{
    return m_ProgramId;
}
void EnvironmentLog::setProgramId(int64_t const value)
{
    m_ProgramId = value;
    m_ProgramIdIsSet = true;
}
bool EnvironmentLog::programIdIsSet() const
{
    return m_ProgramIdIsSet;
}
void EnvironmentLog::unsetProgramId()
{
    m_ProgramIdIsSet = false;
}
int64_t EnvironmentLog::getEnvironmentId() const
{
    return m_EnvironmentId;
}
void EnvironmentLog::setEnvironmentId(int64_t const value)
{
    m_EnvironmentId = value;
    m_EnvironmentIdIsSet = true;
}
bool EnvironmentLog::environmentIdIsSet() const
{
    return m_EnvironmentIdIsSet;
}
void EnvironmentLog::unsetEnvironmentId()
{
    m_EnvironmentIdIsSet = false;
}
EnvironmentLog__links EnvironmentLog::getLinks() const
{
    return m__links;
}
void EnvironmentLog::setLinks(EnvironmentLog__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool EnvironmentLog::linksIsSet() const
{
    return m__linksIsSet;
}
void EnvironmentLog::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}

