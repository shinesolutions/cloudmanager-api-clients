/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "HalLink.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

HalLink::HalLink()
{
    m_Href = "";
    m_HrefIsSet = false;
    m_Templated = false;
    m_TemplatedIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Deprecation = "";
    m_DeprecationIsSet = false;
    m_Profile = "";
    m_ProfileIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Hreflang = "";
    m_HreflangIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    
}

HalLink::~HalLink()
{
}

void HalLink::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const HalLink& o)
{
    j = nlohmann::json();
    if(o.hrefIsSet())
        j["href"] = o.m_Href;
    if(o.templatedIsSet())
        j["templated"] = o.m_Templated;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.deprecationIsSet())
        j["deprecation"] = o.m_Deprecation;
    if(o.profileIsSet())
        j["profile"] = o.m_Profile;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.hreflangIsSet())
        j["hreflang"] = o.m_Hreflang;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
}

void from_json(const nlohmann::json& j, HalLink& o)
{
    if(j.find("href") != j.end())
    {
        j.at("href").get_to(o.m_Href);
        o.m_HrefIsSet = true;
    } 
    if(j.find("templated") != j.end())
    {
        j.at("templated").get_to(o.m_Templated);
        o.m_TemplatedIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("deprecation") != j.end())
    {
        j.at("deprecation").get_to(o.m_Deprecation);
        o.m_DeprecationIsSet = true;
    } 
    if(j.find("profile") != j.end())
    {
        j.at("profile").get_to(o.m_Profile);
        o.m_ProfileIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("hreflang") != j.end())
    {
        j.at("hreflang").get_to(o.m_Hreflang);
        o.m_HreflangIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
}

std::string HalLink::getHref() const
{
    return m_Href;
}
void HalLink::setHref(std::string const& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}
bool HalLink::hrefIsSet() const
{
    return m_HrefIsSet;
}
void HalLink::unsetHref()
{
    m_HrefIsSet = false;
}
bool HalLink::isTemplated() const
{
    return m_Templated;
}
void HalLink::setTemplated(bool const value)
{
    m_Templated = value;
    m_TemplatedIsSet = true;
}
bool HalLink::templatedIsSet() const
{
    return m_TemplatedIsSet;
}
void HalLink::unsetTemplated()
{
    m_TemplatedIsSet = false;
}
std::string HalLink::getType() const
{
    return m_Type;
}
void HalLink::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool HalLink::typeIsSet() const
{
    return m_TypeIsSet;
}
void HalLink::unsetType()
{
    m_TypeIsSet = false;
}
std::string HalLink::getDeprecation() const
{
    return m_Deprecation;
}
void HalLink::setDeprecation(std::string const& value)
{
    m_Deprecation = value;
    m_DeprecationIsSet = true;
}
bool HalLink::deprecationIsSet() const
{
    return m_DeprecationIsSet;
}
void HalLink::unsetDeprecation()
{
    m_DeprecationIsSet = false;
}
std::string HalLink::getProfile() const
{
    return m_Profile;
}
void HalLink::setProfile(std::string const& value)
{
    m_Profile = value;
    m_ProfileIsSet = true;
}
bool HalLink::profileIsSet() const
{
    return m_ProfileIsSet;
}
void HalLink::unsetProfile()
{
    m_ProfileIsSet = false;
}
std::string HalLink::getTitle() const
{
    return m_Title;
}
void HalLink::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool HalLink::titleIsSet() const
{
    return m_TitleIsSet;
}
void HalLink::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string HalLink::getHreflang() const
{
    return m_Hreflang;
}
void HalLink::setHreflang(std::string const& value)
{
    m_Hreflang = value;
    m_HreflangIsSet = true;
}
bool HalLink::hreflangIsSet() const
{
    return m_HreflangIsSet;
}
void HalLink::unsetHreflang()
{
    m_HreflangIsSet = false;
}
std::string HalLink::getName() const
{
    return m_Name;
}
void HalLink::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool HalLink::nameIsSet() const
{
    return m_NameIsSet;
}
void HalLink::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

