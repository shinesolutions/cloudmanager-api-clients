/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Environment__links.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Environment__links::Environment__links()
{
    m_Http__ns_adobe_com_adobecloud_rel_programIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_pipelineIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_authorIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_publishIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_developerConsoleIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_logsIsSet = false;
    m_Http__ns_adobe_com_adobecloud_rel_variablesIsSet = false;
    m_SelfIsSet = false;
    
}

Environment__links::~Environment__links()
{
}

void Environment__links::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Environment__links& o)
{
    j = nlohmann::json();
    if(o.httpNsAdobeComAdobecloudRelProgramIsSet())
        j["http://ns.adobe.com/adobecloud/rel/program"] = o.m_Http__ns_adobe_com_adobecloud_rel_program;
    if(o.httpNsAdobeComAdobecloudRelPipelineIsSet())
        j["http://ns.adobe.com/adobecloud/rel/pipeline"] = o.m_Http__ns_adobe_com_adobecloud_rel_pipeline;
    if(o.httpNsAdobeComAdobecloudRelAuthorIsSet())
        j["http://ns.adobe.com/adobecloud/rel/author"] = o.m_Http__ns_adobe_com_adobecloud_rel_author;
    if(o.httpNsAdobeComAdobecloudRelPublishIsSet())
        j["http://ns.adobe.com/adobecloud/rel/publish"] = o.m_Http__ns_adobe_com_adobecloud_rel_publish;
    if(o.httpNsAdobeComAdobecloudRelDeveloperConsoleIsSet())
        j["http://ns.adobe.com/adobecloud/rel/developerConsole"] = o.m_Http__ns_adobe_com_adobecloud_rel_developerConsole;
    if(o.httpNsAdobeComAdobecloudRelLogsIsSet())
        j["http://ns.adobe.com/adobecloud/rel/logs"] = o.m_Http__ns_adobe_com_adobecloud_rel_logs;
    if(o.httpNsAdobeComAdobecloudRelVariablesIsSet())
        j["http://ns.adobe.com/adobecloud/rel/variables"] = o.m_Http__ns_adobe_com_adobecloud_rel_variables;
    if(o.selfIsSet())
        j["self"] = o.m_Self;
}

void from_json(const nlohmann::json& j, Environment__links& o)
{
    if(j.find("http://ns.adobe.com/adobecloud/rel/program") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/program").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_program);
        o.m_Http__ns_adobe_com_adobecloud_rel_programIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/pipeline") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/pipeline").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_pipeline);
        o.m_Http__ns_adobe_com_adobecloud_rel_pipelineIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/author") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/author").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_author);
        o.m_Http__ns_adobe_com_adobecloud_rel_authorIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/publish") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/publish").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_publish);
        o.m_Http__ns_adobe_com_adobecloud_rel_publishIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/developerConsole") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/developerConsole").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_developerConsole);
        o.m_Http__ns_adobe_com_adobecloud_rel_developerConsoleIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/logs") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/logs").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_logs);
        o.m_Http__ns_adobe_com_adobecloud_rel_logsIsSet = true;
    } 
    if(j.find("http://ns.adobe.com/adobecloud/rel/variables") != j.end())
    {
        j.at("http://ns.adobe.com/adobecloud/rel/variables").get_to(o.m_Http__ns_adobe_com_adobecloud_rel_variables);
        o.m_Http__ns_adobe_com_adobecloud_rel_variablesIsSet = true;
    } 
    if(j.find("self") != j.end())
    {
        j.at("self").get_to(o.m_Self);
        o.m_SelfIsSet = true;
    } 
}

HalLink Environment__links::getHttpNsAdobeComAdobecloudRelProgram() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_program;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelProgram(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_program = value;
    m_Http__ns_adobe_com_adobecloud_rel_programIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelProgramIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_programIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_program()
{
    m_Http__ns_adobe_com_adobecloud_rel_programIsSet = false;
}
HalLink Environment__links::getHttpNsAdobeComAdobecloudRelPipeline() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipeline;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelPipeline(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_pipeline = value;
    m_Http__ns_adobe_com_adobecloud_rel_pipelineIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelPipelineIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_pipelineIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_pipeline()
{
    m_Http__ns_adobe_com_adobecloud_rel_pipelineIsSet = false;
}
HalLink Environment__links::getHttpNsAdobeComAdobecloudRelAuthor() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_author;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelAuthor(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_author = value;
    m_Http__ns_adobe_com_adobecloud_rel_authorIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelAuthorIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_authorIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_author()
{
    m_Http__ns_adobe_com_adobecloud_rel_authorIsSet = false;
}
HalLink Environment__links::getHttpNsAdobeComAdobecloudRelPublish() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_publish;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelPublish(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_publish = value;
    m_Http__ns_adobe_com_adobecloud_rel_publishIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelPublishIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_publishIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_publish()
{
    m_Http__ns_adobe_com_adobecloud_rel_publishIsSet = false;
}
HalLink Environment__links::getHttpNsAdobeComAdobecloudRelDeveloperConsole() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_developerConsole;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelDeveloperConsole(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_developerConsole = value;
    m_Http__ns_adobe_com_adobecloud_rel_developerConsoleIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelDeveloperConsoleIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_developerConsoleIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_developerConsole()
{
    m_Http__ns_adobe_com_adobecloud_rel_developerConsoleIsSet = false;
}
HalLink Environment__links::getHttpNsAdobeComAdobecloudRelLogs() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_logs;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelLogs(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_logs = value;
    m_Http__ns_adobe_com_adobecloud_rel_logsIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelLogsIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_logsIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_logs()
{
    m_Http__ns_adobe_com_adobecloud_rel_logsIsSet = false;
}
HalLink Environment__links::getHttpNsAdobeComAdobecloudRelVariables() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_variables;
}
void Environment__links::setHttpNsAdobeComAdobecloudRelVariables(HalLink const& value)
{
    m_Http__ns_adobe_com_adobecloud_rel_variables = value;
    m_Http__ns_adobe_com_adobecloud_rel_variablesIsSet = true;
}
bool Environment__links::httpNsAdobeComAdobecloudRelVariablesIsSet() const
{
    return m_Http__ns_adobe_com_adobecloud_rel_variablesIsSet;
}
void Environment__links::unsetHttp__ns_adobe_com_adobecloud_rel_variables()
{
    m_Http__ns_adobe_com_adobecloud_rel_variablesIsSet = false;
}
HalLink Environment__links::getSelf() const
{
    return m_Self;
}
void Environment__links::setSelf(HalLink const& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}
bool Environment__links::selfIsSet() const
{
    return m_SelfIsSet;
}
void Environment__links::unsetSelf()
{
    m_SelfIsSet = false;
}

}
}
}
}

