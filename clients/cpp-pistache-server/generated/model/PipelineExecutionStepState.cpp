/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PipelineExecutionStepState.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineExecutionStepState::PipelineExecutionStepState()
{
    m_Id = "";
    m_IdIsSet = false;
    m_StepId = "";
    m_StepIdIsSet = false;
    m_PhaseId = "";
    m_PhaseIdIsSet = false;
    m_Action = "";
    m_ActionIsSet = false;
    m_Repository = "";
    m_RepositoryIsSet = false;
    m_Branch = "";
    m_BranchIsSet = false;
    m_Environment = "";
    m_EnvironmentIsSet = false;
    m_EnvironmentType = "";
    m_EnvironmentTypeIsSet = false;
    m_StartedAt = "";
    m_StartedAtIsSet = false;
    m_FinishedAt = "";
    m_FinishedAtIsSet = false;
    m_DetailsIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m__linksIsSet = false;
    
}

PipelineExecutionStepState::~PipelineExecutionStepState()
{
}

void PipelineExecutionStepState::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const PipelineExecutionStepState& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.stepIdIsSet())
        j["stepId"] = o.m_StepId;
    if(o.phaseIdIsSet())
        j["phaseId"] = o.m_PhaseId;
    if(o.actionIsSet())
        j["action"] = o.m_Action;
    if(o.repositoryIsSet())
        j["repository"] = o.m_Repository;
    if(o.branchIsSet())
        j["branch"] = o.m_Branch;
    if(o.environmentIsSet())
        j["environment"] = o.m_Environment;
    if(o.environmentTypeIsSet())
        j["environmentType"] = o.m_EnvironmentType;
    if(o.startedAtIsSet())
        j["startedAt"] = o.m_StartedAt;
    if(o.finishedAtIsSet())
        j["finishedAt"] = o.m_FinishedAt;
    if(o.detailsIsSet() || !o.m_Details.empty())
        j["details"] = o.m_Details;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
}

void from_json(const nlohmann::json& j, PipelineExecutionStepState& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("stepId") != j.end())
    {
        j.at("stepId").get_to(o.m_StepId);
        o.m_StepIdIsSet = true;
    } 
    if(j.find("phaseId") != j.end())
    {
        j.at("phaseId").get_to(o.m_PhaseId);
        o.m_PhaseIdIsSet = true;
    } 
    if(j.find("action") != j.end())
    {
        j.at("action").get_to(o.m_Action);
        o.m_ActionIsSet = true;
    } 
    if(j.find("repository") != j.end())
    {
        j.at("repository").get_to(o.m_Repository);
        o.m_RepositoryIsSet = true;
    } 
    if(j.find("branch") != j.end())
    {
        j.at("branch").get_to(o.m_Branch);
        o.m_BranchIsSet = true;
    } 
    if(j.find("environment") != j.end())
    {
        j.at("environment").get_to(o.m_Environment);
        o.m_EnvironmentIsSet = true;
    } 
    if(j.find("environmentType") != j.end())
    {
        j.at("environmentType").get_to(o.m_EnvironmentType);
        o.m_EnvironmentTypeIsSet = true;
    } 
    if(j.find("startedAt") != j.end())
    {
        j.at("startedAt").get_to(o.m_StartedAt);
        o.m_StartedAtIsSet = true;
    } 
    if(j.find("finishedAt") != j.end())
    {
        j.at("finishedAt").get_to(o.m_FinishedAt);
        o.m_FinishedAtIsSet = true;
    } 
    if(j.find("details") != j.end())
    {
        j.at("details").get_to(o.m_Details);
        o.m_DetailsIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
}

std::string PipelineExecutionStepState::getId() const
{
    return m_Id;
}
void PipelineExecutionStepState::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PipelineExecutionStepState::idIsSet() const
{
    return m_IdIsSet;
}
void PipelineExecutionStepState::unsetId()
{
    m_IdIsSet = false;
}
std::string PipelineExecutionStepState::getStepId() const
{
    return m_StepId;
}
void PipelineExecutionStepState::setStepId(std::string const& value)
{
    m_StepId = value;
    m_StepIdIsSet = true;
}
bool PipelineExecutionStepState::stepIdIsSet() const
{
    return m_StepIdIsSet;
}
void PipelineExecutionStepState::unsetStepId()
{
    m_StepIdIsSet = false;
}
std::string PipelineExecutionStepState::getPhaseId() const
{
    return m_PhaseId;
}
void PipelineExecutionStepState::setPhaseId(std::string const& value)
{
    m_PhaseId = value;
    m_PhaseIdIsSet = true;
}
bool PipelineExecutionStepState::phaseIdIsSet() const
{
    return m_PhaseIdIsSet;
}
void PipelineExecutionStepState::unsetPhaseId()
{
    m_PhaseIdIsSet = false;
}
std::string PipelineExecutionStepState::getAction() const
{
    return m_Action;
}
void PipelineExecutionStepState::setAction(std::string const& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}
bool PipelineExecutionStepState::actionIsSet() const
{
    return m_ActionIsSet;
}
void PipelineExecutionStepState::unsetAction()
{
    m_ActionIsSet = false;
}
std::string PipelineExecutionStepState::getRepository() const
{
    return m_Repository;
}
void PipelineExecutionStepState::setRepository(std::string const& value)
{
    m_Repository = value;
    m_RepositoryIsSet = true;
}
bool PipelineExecutionStepState::repositoryIsSet() const
{
    return m_RepositoryIsSet;
}
void PipelineExecutionStepState::unsetRepository()
{
    m_RepositoryIsSet = false;
}
std::string PipelineExecutionStepState::getBranch() const
{
    return m_Branch;
}
void PipelineExecutionStepState::setBranch(std::string const& value)
{
    m_Branch = value;
    m_BranchIsSet = true;
}
bool PipelineExecutionStepState::branchIsSet() const
{
    return m_BranchIsSet;
}
void PipelineExecutionStepState::unsetBranch()
{
    m_BranchIsSet = false;
}
std::string PipelineExecutionStepState::getEnvironment() const
{
    return m_Environment;
}
void PipelineExecutionStepState::setEnvironment(std::string const& value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}
bool PipelineExecutionStepState::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}
void PipelineExecutionStepState::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}
std::string PipelineExecutionStepState::getEnvironmentType() const
{
    return m_EnvironmentType;
}
void PipelineExecutionStepState::setEnvironmentType(std::string const& value)
{
    m_EnvironmentType = value;
    m_EnvironmentTypeIsSet = true;
}
bool PipelineExecutionStepState::environmentTypeIsSet() const
{
    return m_EnvironmentTypeIsSet;
}
void PipelineExecutionStepState::unsetEnvironmentType()
{
    m_EnvironmentTypeIsSet = false;
}
std::string PipelineExecutionStepState::getStartedAt() const
{
    return m_StartedAt;
}
void PipelineExecutionStepState::setStartedAt(std::string const& value)
{
    m_StartedAt = value;
    m_StartedAtIsSet = true;
}
bool PipelineExecutionStepState::startedAtIsSet() const
{
    return m_StartedAtIsSet;
}
void PipelineExecutionStepState::unsetStartedAt()
{
    m_StartedAtIsSet = false;
}
std::string PipelineExecutionStepState::getFinishedAt() const
{
    return m_FinishedAt;
}
void PipelineExecutionStepState::setFinishedAt(std::string const& value)
{
    m_FinishedAt = value;
    m_FinishedAtIsSet = true;
}
bool PipelineExecutionStepState::finishedAtIsSet() const
{
    return m_FinishedAtIsSet;
}
void PipelineExecutionStepState::unsetFinishedAt()
{
    m_FinishedAtIsSet = false;
}
std::map<std::string, Object>& PipelineExecutionStepState::getDetails()
{
    return m_Details;
}
void PipelineExecutionStepState::setDetails(std::map<std::string, Object> const& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool PipelineExecutionStepState::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void PipelineExecutionStepState::unsetDetails()
{
    m_DetailsIsSet = false;
}
std::string PipelineExecutionStepState::getStatus() const
{
    return m_Status;
}
void PipelineExecutionStepState::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool PipelineExecutionStepState::statusIsSet() const
{
    return m_StatusIsSet;
}
void PipelineExecutionStepState::unsetStatus()
{
    m_StatusIsSet = false;
}
PipelineExecutionStepState__links PipelineExecutionStepState::getLinks() const
{
    return m__links;
}
void PipelineExecutionStepState::setLinks(PipelineExecutionStepState__links const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool PipelineExecutionStepState::linksIsSet() const
{
    return m__linksIsSet;
}
void PipelineExecutionStepState::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}

