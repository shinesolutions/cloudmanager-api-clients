/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASPipelineExecutionApi {
    OASClient client;

    public OASPipelineExecutionApi(OASClient client) {
        this.client = client;
    }

    public OASPipelineExecutionApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Advance
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void advancePipelineExecution(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('executionId'), 'executionId');
        client.assertNotNull(params.get('phaseId'), 'phaseId');
        client.assertNotNull(params.get('stepId'), 'stepId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'PUT', '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId'),
                'executionId' => (String) params.get('executionId'),
                'phaseId' => (String) params.get('phaseId'),
                'stepId' => (String) params.get('stepId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey'),
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            null
        );
    }
    /**
     * Cancel
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void cancelPipelineExecutionStep(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('executionId'), 'executionId');
        client.assertNotNull(params.get('phaseId'), 'phaseId');
        client.assertNotNull(params.get('stepId'), 'stepId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'PUT', '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel',
            (Object) params.get('body'),
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId'),
                'executionId' => (String) params.get('executionId'),
                'phaseId' => (String) params.get('phaseId'),
                'stepId' => (String) params.get('stepId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey'),
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            null
        );
    }
    /**
     * Get current pipeline execution
     * Returns current pipeline execution if any.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return OASPipelineExecution
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineExecution getCurrentExecution(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineExecution) client.invoke(
            'GET', '/api/program/{programId}/pipeline/{pipelineId}/execution', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASPipelineExecution.class
        );
    }
    /**
     * Get pipeline execution
     * Returns a pipeline execution by id
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return OASPipelineExecution
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineExecution getExecution(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('executionId'), 'executionId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineExecution) client.invoke(
            'GET', '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId'),
                'executionId' => (String) params.get('executionId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASPipelineExecution.class
        );
    }
    /**
     * List Executions
     * Returns the history of pipeline executions in a newest to oldest order
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param start Pagination start parameter (optional)
     * @param r_limit Pagination limit parameter (optional)
     * @return OASPipelineExecutionListRepresentati
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineExecutionListRepresentati getExecutions(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('start', (String) params.get('start')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineExecutionListRepresentati) client.invoke(
            'GET', '/api/program/{programId}/pipeline/{pipelineId}/executions', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASPipelineExecutionListRepresentati.class
        );
    }
    /**
     * Get logs
     * Get the logs associated with a step.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param file Identifier of the log file (optional)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void getStepLogs(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('executionId'), 'executionId');
        client.assertNotNull(params.get('phaseId'), 'phaseId');
        client.assertNotNull(params.get('stepId'), 'stepId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('file', (String) params.get('file')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId'),
                'executionId' => (String) params.get('executionId'),
                'phaseId' => (String) params.get('phaseId'),
                'stepId' => (String) params.get('stepId')
            },
            new Map<String, Object>{
                'Accept' => (String) params.get('accept'),
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>(),
            new List<String>(),
            new List<String>(),
            null
        );
    }
    /**
     * Start the pipeline
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void startPipeline(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'PUT', '/api/program/{programId}/pipeline/{pipelineId}/execution', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey'),
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>(),
            new List<String>(),
            new List<String>(),
            null
        );
    }
    /**
     * Get step metrics
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return OASPipelineStepMetrics
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineStepMetrics stepMetric(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('executionId'), 'executionId');
        client.assertNotNull(params.get('phaseId'), 'phaseId');
        client.assertNotNull(params.get('stepId'), 'stepId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineStepMetrics) client.invoke(
            'GET', '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId'),
                'executionId' => (String) params.get('executionId'),
                'phaseId' => (String) params.get('phaseId'),
                'stepId' => (String) params.get('stepId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASPipelineStepMetrics.class
        );
    }
    /**
     * Get step state
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return OASPipelineExecutionStepState
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineExecutionStepState stepState(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('pipelineId'), 'pipelineId');
        client.assertNotNull(params.get('executionId'), 'executionId');
        client.assertNotNull(params.get('phaseId'), 'phaseId');
        client.assertNotNull(params.get('stepId'), 'stepId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineExecutionStepState) client.invoke(
            'GET', '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'pipelineId' => (String) params.get('pipelineId'),
                'executionId' => (String) params.get('executionId'),
                'phaseId' => (String) params.get('phaseId'),
                'stepId' => (String) params.get('stepId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASPipelineExecutionStepState.class
        );
    }
}
