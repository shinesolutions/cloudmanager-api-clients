/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASEnvironmentsApi {
    OASClient client;

    public OASEnvironmentsApi(OASClient client) {
        this.client = client;
    }

    public OASEnvironmentsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * DeleteEnvironment
     * Delete environment
     * @param programId Identifier of the application (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return OASEnvironment
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEnvironment deleteEnvironment(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('environmentId'), 'environmentId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEnvironment) client.invoke(
            'DELETE', '/api/program/{programId}/environment/{environmentId}', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'environmentId' => (String) params.get('environmentId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASEnvironment.class
        );
    }
    /**
     * Download Logs
     * Download environment logs
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param service Name of service (required)
     * @param name Name of log (required)
     * @param r_date date for which log is required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void downloadLogs(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('environmentId'), 'environmentId');
        client.assertNotNull(params.get('service'), 'service');
        client.assertNotNull(params.get('name'), 'name');
        client.assertNotNull(params.get('r_date'), 'r_date');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('service', (String) params.get('service')));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('date', (String) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/api/program/{programId}/environment/{environmentId}/logs/download', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'environmentId' => (String) params.get('environmentId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey'),
                'Accept' => (String) params.get('accept')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            null
        );
    }
    /**
     * Get Environment
     * Returns an environment by its id
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return OASEnvironment
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEnvironment getEnvironment(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('environmentId'), 'environmentId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEnvironment) client.invoke(
            'GET', '/api/program/{programId}/environment/{environmentId}', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'environmentId' => (String) params.get('environmentId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASEnvironment.class
        );
    }
    /**
     * Get Environment Logs
     * List all logs available in environment
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param days number of days for which logs are required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param service Names of services (optional, default to new List<String>())
     * @param name Names of log (optional, default to new List<String>())
     * @return OASEnvironmentLogs
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEnvironmentLogs getEnvironmentLogs(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('environmentId'), 'environmentId');
        client.assertNotNull(params.get('days'), 'days');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('service', (List<String>) params.get('service')));
        query.addAll(client.makeParams('name', (List<String>) params.get('name')));
        query.addAll(client.makeParam('days', (Integer) params.get('days')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEnvironmentLogs) client.invoke(
            'GET', '/api/program/{programId}/environment/{environmentId}/logs', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId'),
                'environmentId' => (String) params.get('environmentId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASEnvironmentLogs.class
        );
    }
    /**
     * List Environments
     * Lists all environments in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param r_type Type of the environment (optional)
     * @return OASEnvironmentList
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEnvironmentList getEnvironments(Map<String, Object> params) {
        client.assertNotNull(params.get('programId'), 'programId');
        client.assertNotNull(params.get('xGwImsOrgId'), 'xGwImsOrgId');
        client.assertNotNull(params.get('authorization'), 'authorization');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('type', (String) params.get('r_type')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEnvironmentList) client.invoke(
            'GET', '/api/program/{programId}/environments', '',
            query, form,
            new Map<String, Object>{
                'programId' => (String) params.get('programId')
            },
            new Map<String, Object>{
                'x-gw-ims-org-id' => (String) params.get('xGwImsOrgId'),
                'Authorization' => (String) params.get('authorization'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASEnvironmentList.class
        );
    }
}
