<?php
/**
 * BadRequestError
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BadRequestError model.
 *
 * A Bad Request response error.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class BadRequestError 
{
        /**
     * HTTP status code of the response.
     *
     * @var int|null
     * @SerializedName("status")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $status;

    /**
     * Error type identifier.
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $type;

    /**
     * A short summary of the error.
     *
     * @var string|null
     * @SerializedName("title")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $title;

    /**
     * Request&#39;s missing parameters.
     *
     * @var OpenAPI\Server\Model\MissingParameter[]|null
     * @SerializedName("missingParams")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\MissingParameter")
     * })
     * @Type("array<OpenAPI\Server\Model\MissingParameter>")
     */
    protected $missingParams;

    /**
     * Request&#39;s invalid parameters.
     *
     * @var OpenAPI\Server\Model\InvalidParameter[]|null
     * @SerializedName("invalidParams")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\InvalidParameter")
     * })
     * @Type("array<OpenAPI\Server\Model\InvalidParameter>")
     */
    protected $invalidParams;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->title = isset($data['title']) ? $data['title'] : null;
        $this->missingParams = isset($data['missingParams']) ? $data['missingParams'] : null;
        $this->invalidParams = isset($data['invalidParams']) ? $data['invalidParams'] : null;
    }

    /**
     * Gets status.
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param int|null $status  HTTP status code of the response.
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  Error type identifier.
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets title.
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Sets title.
     *
     * @param string|null $title  A short summary of the error.
     *
     * @return $this
     */
    public function setTitle($title = null)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Gets missingParams.
     *
     * @return OpenAPI\Server\Model\MissingParameter[]|null
     */
    public function getMissingParams(): ?array
    {
        return $this->missingParams;
    }

    /**
     * Sets missingParams.
     *
     * @param OpenAPI\Server\Model\MissingParameter[]|null $missingParams  Request's missing parameters.
     *
     * @return $this
     */
    public function setMissingParams(array $missingParams = null): ?array
    {
        $this->missingParams = $missingParams;

        return $this;
    }

    /**
     * Gets invalidParams.
     *
     * @return OpenAPI\Server\Model\InvalidParameter[]|null
     */
    public function getInvalidParams(): ?array
    {
        return $this->invalidParams;
    }

    /**
     * Sets invalidParams.
     *
     * @param OpenAPI\Server\Model\InvalidParameter[]|null $invalidParams  Request's invalid parameters.
     *
     * @return $this
     */
    public function setInvalidParams(array $invalidParams = null): ?array
    {
        $this->invalidParams = $invalidParams;

        return $this;
    }
}


