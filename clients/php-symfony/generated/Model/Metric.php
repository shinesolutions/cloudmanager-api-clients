<?php
/**
 * Metric
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Metric model.
 *
 * Describes a __Metric__
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Metric 
{
        /**
     * KPI result identifier
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $id;

    /**
     * Severity of the metric
     *
     * @var string|null
     * @SerializedName("severity")
     * @Assert\Choice({ "critical", "important", "informational" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $severity;

    /**
     * Whether metric is considered passed
     *
     * @var bool|null
     * @SerializedName("passed")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $passed;

    /**
     * Whether user override the failed metric
     *
     * @var bool|null
     * @SerializedName("override")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $override;

    /**
     * Expected value for the metric
     *
     * @var string|null
     * @SerializedName("actualValue")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $actualValue;

    /**
     * Expected value for the metric
     *
     * @var string|null
     * @SerializedName("expectedValue")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $expectedValue;

    /**
     * Comparator used for the metric
     *
     * @var string|null
     * @SerializedName("comparator")
     * @Assert\Choice({ "GT", "GTE", "LT", "LTE", "EQ", "NEQ" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $comparator;

    /**
     * KPI identifier
     *
     * @var string|null
     * @SerializedName("kpi")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $kpi;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->severity = isset($data['severity']) ? $data['severity'] : null;
        $this->passed = isset($data['passed']) ? $data['passed'] : false;
        $this->override = isset($data['override']) ? $data['override'] : false;
        $this->actualValue = isset($data['actualValue']) ? $data['actualValue'] : null;
        $this->expectedValue = isset($data['expectedValue']) ? $data['expectedValue'] : null;
        $this->comparator = isset($data['comparator']) ? $data['comparator'] : null;
        $this->kpi = isset($data['kpi']) ? $data['kpi'] : null;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  KPI result identifier
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets severity.
     *
     * @return string|null
     */
    public function getSeverity()
    {
        return $this->severity;
    }

    /**
     * Sets severity.
     *
     * @param string|null $severity  Severity of the metric
     *
     * @return $this
     */
    public function setSeverity($severity = null)
    {
        $this->severity = $severity;

        return $this;
    }

    /**
     * Gets passed.
     *
     * @return bool|null
     */
    public function isPassed()
    {
        return $this->passed;
    }

    /**
     * Sets passed.
     *
     * @param bool|null $passed  Whether metric is considered passed
     *
     * @return $this
     */
    public function setPassed($passed = null)
    {
        $this->passed = $passed;

        return $this;
    }

    /**
     * Gets override.
     *
     * @return bool|null
     */
    public function isOverride()
    {
        return $this->override;
    }

    /**
     * Sets override.
     *
     * @param bool|null $override  Whether user override the failed metric
     *
     * @return $this
     */
    public function setOverride($override = null)
    {
        $this->override = $override;

        return $this;
    }

    /**
     * Gets actualValue.
     *
     * @return string|null
     */
    public function getActualValue()
    {
        return $this->actualValue;
    }

    /**
     * Sets actualValue.
     *
     * @param string|null $actualValue  Expected value for the metric
     *
     * @return $this
     */
    public function setActualValue($actualValue = null)
    {
        $this->actualValue = $actualValue;

        return $this;
    }

    /**
     * Gets expectedValue.
     *
     * @return string|null
     */
    public function getExpectedValue()
    {
        return $this->expectedValue;
    }

    /**
     * Sets expectedValue.
     *
     * @param string|null $expectedValue  Expected value for the metric
     *
     * @return $this
     */
    public function setExpectedValue($expectedValue = null)
    {
        $this->expectedValue = $expectedValue;

        return $this;
    }

    /**
     * Gets comparator.
     *
     * @return string|null
     */
    public function getComparator()
    {
        return $this->comparator;
    }

    /**
     * Sets comparator.
     *
     * @param string|null $comparator  Comparator used for the metric
     *
     * @return $this
     */
    public function setComparator($comparator = null)
    {
        $this->comparator = $comparator;

        return $this;
    }

    /**
     * Gets kpi.
     *
     * @return string|null
     */
    public function getKpi()
    {
        return $this->kpi;
    }

    /**
     * Sets kpi.
     *
     * @param string|null $kpi  KPI identifier
     *
     * @return $this
     */
    public function setKpi($kpi = null)
    {
        $this->kpi = $kpi;

        return $this;
    }
}


