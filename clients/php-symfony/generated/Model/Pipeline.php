<?php
/**
 * Pipeline
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Pipeline model.
 *
 * Describes a __CI/CD Pipeline__
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Pipeline 
{
        /**
     * Identifier of the pipeline. Unique within the program.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $id;

    /**
     * Identifier of the program. Unique within the space.
     *
     * @var string|null
     * @SerializedName("programId")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $programId;

    /**
     * Name of the pipeline
     *
     * @var string
     * @SerializedName("name")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
     *
     * @var string|null
     * @SerializedName("trigger")
     * @Assert\Choice({ "ON_COMMIT", "MANUAL", "SCHEDULE" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $trigger;

    /**
     * Pipeline status
     *
     * @var string|null
     * @SerializedName("status")
     * @Assert\Choice({ "IDLE", "BUSY", "WAITING" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $status;

    /**
     * Create date
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $createdAt;

    /**
     * Update date
     *
     * @var \DateTime|null
     * @SerializedName("updatedAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $updatedAt;

    /**
     * Last pipeline execution start
     *
     * @var \DateTime|null
     * @SerializedName("lastStartedAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $lastStartedAt;

    /**
     * Last pipeline execution end
     *
     * @var \DateTime|null
     * @SerializedName("lastFinishedAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $lastFinishedAt;

    /**
     * Pipeline phases in execution order
     *
     * @var OpenAPI\Server\Model\PipelinePhase[]
     * @SerializedName("phases")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\PipelinePhase")
     * })
     * @Type("array<OpenAPI\Server\Model\PipelinePhase>")
     */
    protected $phases;

    /**
     * @var OpenAPI\Server\Model\PipelineLinks|null
     * @SerializedName("_links")
     * @Assert\Type("OpenAPI\Server\Model\PipelineLinks")
     * @Type("OpenAPI\Server\Model\PipelineLinks")
     */
    protected $links;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->programId = isset($data['programId']) ? $data['programId'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->trigger = isset($data['trigger']) ? $data['trigger'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->createdAt = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->updatedAt = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->lastStartedAt = isset($data['lastStartedAt']) ? $data['lastStartedAt'] : null;
        $this->lastFinishedAt = isset($data['lastFinishedAt']) ? $data['lastFinishedAt'] : null;
        $this->phases = isset($data['phases']) ? $data['phases'] : null;
        $this->links = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  Identifier of the pipeline. Unique within the program.
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets programId.
     *
     * @return string|null
     */
    public function getProgramId()
    {
        return $this->programId;
    }

    /**
     * Sets programId.
     *
     * @param string|null $programId  Identifier of the program. Unique within the space.
     *
     * @return $this
     */
    public function setProgramId($programId = null)
    {
        $this->programId = $programId;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string $name  Name of the pipeline
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets trigger.
     *
     * @return string|null
     */
    public function getTrigger()
    {
        return $this->trigger;
    }

    /**
     * Sets trigger.
     *
     * @param string|null $trigger  How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
     *
     * @return $this
     */
    public function setTrigger($trigger = null)
    {
        $this->trigger = $trigger;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status  Pipeline status
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets createdAt.
     *
     * @param \DateTime|null $createdAt  Create date
     *
     * @return $this
     */
    public function setCreatedAt(\DateTime $createdAt = null): ?\DateTime
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets updatedAt.
     *
     * @param \DateTime|null $updatedAt  Update date
     *
     * @return $this
     */
    public function setUpdatedAt(\DateTime $updatedAt = null): ?\DateTime
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Gets lastStartedAt.
     *
     * @return \DateTime|null
     */
    public function getLastStartedAt(): ?\DateTime
    {
        return $this->lastStartedAt;
    }

    /**
     * Sets lastStartedAt.
     *
     * @param \DateTime|null $lastStartedAt  Last pipeline execution start
     *
     * @return $this
     */
    public function setLastStartedAt(\DateTime $lastStartedAt = null): ?\DateTime
    {
        $this->lastStartedAt = $lastStartedAt;

        return $this;
    }

    /**
     * Gets lastFinishedAt.
     *
     * @return \DateTime|null
     */
    public function getLastFinishedAt(): ?\DateTime
    {
        return $this->lastFinishedAt;
    }

    /**
     * Sets lastFinishedAt.
     *
     * @param \DateTime|null $lastFinishedAt  Last pipeline execution end
     *
     * @return $this
     */
    public function setLastFinishedAt(\DateTime $lastFinishedAt = null): ?\DateTime
    {
        $this->lastFinishedAt = $lastFinishedAt;

        return $this;
    }

    /**
     * Gets phases.
     *
     * @return OpenAPI\Server\Model\PipelinePhase[]
     */
    public function getPhases(): array
    {
        return $this->phases;
    }

    /**
     * Sets phases.
     *
     * @param OpenAPI\Server\Model\PipelinePhase[] $phases  Pipeline phases in execution order
     *
     * @return $this
     */
    public function setPhases(array $phases): array
    {
        $this->phases = $phases;

        return $this;
    }

    /**
     * Gets links.
     *
     * @return OpenAPI\Server\Model\PipelineLinks|null
     */
    public function getLinks(): ?PipelineLinks
    {
        return $this->links;
    }

    /**
     * Sets links.
     *
     * @param OpenAPI\Server\Model\PipelineLinks|null $links
     *
     * @return $this
     */
    public function setLinks(PipelineLinks $links = null): ?PipelineLinks
    {
        $this->links = $links;

        return $this;
    }
}


