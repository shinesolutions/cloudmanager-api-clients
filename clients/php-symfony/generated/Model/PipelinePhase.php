<?php
/**
 * PipelinePhase
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PipelinePhase model.
 *
 * Describes a phase of a pipeline
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PipelinePhase 
{
        /**
     * Name of the phase
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * Type of the phase
     *
     * @var string
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Choice({ "VALIDATE", "BUILD", "DEPLOY" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $type;

    /**
     * Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD
     *
     * @var string|null
     * @SerializedName("repositoryId")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $repositoryId;

    /**
     * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing.
     *
     * @var string|null
     * @SerializedName("branch")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $branch;

    /**
     * Identifier of the target environment. Mandatory if type&#x3D;DEPLOY
     *
     * @var string|null
     * @SerializedName("environmentId")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $environmentId;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->repositoryId = isset($data['repositoryId']) ? $data['repositoryId'] : null;
        $this->branch = isset($data['branch']) ? $data['branch'] : null;
        $this->environmentId = isset($data['environmentId']) ? $data['environmentId'] : null;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Name of the phase
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string $type  Type of the phase
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets repositoryId.
     *
     * @return string|null
     */
    public function getRepositoryId()
    {
        return $this->repositoryId;
    }

    /**
     * Sets repositoryId.
     *
     * @param string|null $repositoryId  Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD
     *
     * @return $this
     */
    public function setRepositoryId($repositoryId = null)
    {
        $this->repositoryId = $repositoryId;

        return $this;
    }

    /**
     * Gets branch.
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->branch;
    }

    /**
     * Sets branch.
     *
     * @param string|null $branch  Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.
     *
     * @return $this
     */
    public function setBranch($branch = null)
    {
        $this->branch = $branch;

        return $this;
    }

    /**
     * Gets environmentId.
     *
     * @return string|null
     */
    public function getEnvironmentId()
    {
        return $this->environmentId;
    }

    /**
     * Sets environmentId.
     *
     * @param string|null $environmentId  Identifier of the target environment. Mandatory if type=DEPLOY
     *
     * @return $this
     */
    public function setEnvironmentId($environmentId = null)
    {
        $this->environmentId = $environmentId;

        return $this;
    }
}


