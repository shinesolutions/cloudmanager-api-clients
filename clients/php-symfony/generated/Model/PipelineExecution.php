<?php
/**
 * PipelineExecution
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PipelineExecution model.
 *
 * Wraps a pipeline execution
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class PipelineExecution 
{
        /**
     * Pipeline execution identifier
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $id;

    /**
     * Identifier of the program. Unique within the space.
     *
     * @var string|null
     * @SerializedName("programId")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $programId;

    /**
     * Identifier of the pipeline. Unique within the space.
     *
     * @var string|null
     * @SerializedName("pipelineId")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $pipelineId;

    /**
     * Version of the artifacts generated during this execution
     *
     * @var string|null
     * @SerializedName("artifactsVersion")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $artifactsVersion;

    /**
     * AdobeID who started the pipeline. Empty for auto triggered builds
     *
     * @var string|null
     * @SerializedName("user")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $user;

    /**
     * Status of the execution
     *
     * @var string|null
     * @SerializedName("status")
     * @Assert\Choice({ "NOT_STARTED", "RUNNING", "CANCELLING", "CANCELLED", "FINISHED", "ERROR", "FAILED" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $status;

    /**
     * How the execution was triggered.
     *
     * @var string|null
     * @SerializedName("trigger")
     * @Assert\Choice({ "ON_COMMIT", "MANUAL", "SCHEDULE", "PUSH_UPGRADES" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $trigger;

    /**
     * Start time
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $createdAt;

    /**
     * Date of last status change
     *
     * @var \DateTime|null
     * @SerializedName("updatedAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $updatedAt;

    /**
     * Date the execution reached a final state
     *
     * @var \DateTime|null
     * @SerializedName("finishedAt")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $finishedAt;

    /**
     * @var OpenAPI\Server\Model\PipelineExecutionEmbedded|null
     * @SerializedName("_embedded")
     * @Assert\Type("OpenAPI\Server\Model\PipelineExecutionEmbedded")
     * @Type("OpenAPI\Server\Model\PipelineExecutionEmbedded")
     */
    protected $embedded;

    /**
     * @var OpenAPI\Server\Model\PipelineExecutionLinks|null
     * @SerializedName("_links")
     * @Assert\Type("OpenAPI\Server\Model\PipelineExecutionLinks")
     * @Type("OpenAPI\Server\Model\PipelineExecutionLinks")
     */
    protected $links;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->programId = isset($data['programId']) ? $data['programId'] : null;
        $this->pipelineId = isset($data['pipelineId']) ? $data['pipelineId'] : null;
        $this->artifactsVersion = isset($data['artifactsVersion']) ? $data['artifactsVersion'] : null;
        $this->user = isset($data['user']) ? $data['user'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->trigger = isset($data['trigger']) ? $data['trigger'] : null;
        $this->createdAt = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->updatedAt = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->finishedAt = isset($data['finishedAt']) ? $data['finishedAt'] : null;
        $this->embedded = isset($data['embedded']) ? $data['embedded'] : null;
        $this->links = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  Pipeline execution identifier
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets programId.
     *
     * @return string|null
     */
    public function getProgramId()
    {
        return $this->programId;
    }

    /**
     * Sets programId.
     *
     * @param string|null $programId  Identifier of the program. Unique within the space.
     *
     * @return $this
     */
    public function setProgramId($programId = null)
    {
        $this->programId = $programId;

        return $this;
    }

    /**
     * Gets pipelineId.
     *
     * @return string|null
     */
    public function getPipelineId()
    {
        return $this->pipelineId;
    }

    /**
     * Sets pipelineId.
     *
     * @param string|null $pipelineId  Identifier of the pipeline. Unique within the space.
     *
     * @return $this
     */
    public function setPipelineId($pipelineId = null)
    {
        $this->pipelineId = $pipelineId;

        return $this;
    }

    /**
     * Gets artifactsVersion.
     *
     * @return string|null
     */
    public function getArtifactsVersion()
    {
        return $this->artifactsVersion;
    }

    /**
     * Sets artifactsVersion.
     *
     * @param string|null $artifactsVersion  Version of the artifacts generated during this execution
     *
     * @return $this
     */
    public function setArtifactsVersion($artifactsVersion = null)
    {
        $this->artifactsVersion = $artifactsVersion;

        return $this;
    }

    /**
     * Gets user.
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Sets user.
     *
     * @param string|null $user  AdobeID who started the pipeline. Empty for auto triggered builds
     *
     * @return $this
     */
    public function setUser($user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status  Status of the execution
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets trigger.
     *
     * @return string|null
     */
    public function getTrigger()
    {
        return $this->trigger;
    }

    /**
     * Sets trigger.
     *
     * @param string|null $trigger  How the execution was triggered.
     *
     * @return $this
     */
    public function setTrigger($trigger = null)
    {
        $this->trigger = $trigger;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets createdAt.
     *
     * @param \DateTime|null $createdAt  Start time
     *
     * @return $this
     */
    public function setCreatedAt(\DateTime $createdAt = null): ?\DateTime
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets updatedAt.
     *
     * @param \DateTime|null $updatedAt  Date of last status change
     *
     * @return $this
     */
    public function setUpdatedAt(\DateTime $updatedAt = null): ?\DateTime
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Gets finishedAt.
     *
     * @return \DateTime|null
     */
    public function getFinishedAt(): ?\DateTime
    {
        return $this->finishedAt;
    }

    /**
     * Sets finishedAt.
     *
     * @param \DateTime|null $finishedAt  Date the execution reached a final state
     *
     * @return $this
     */
    public function setFinishedAt(\DateTime $finishedAt = null): ?\DateTime
    {
        $this->finishedAt = $finishedAt;

        return $this;
    }

    /**
     * Gets embedded.
     *
     * @return OpenAPI\Server\Model\PipelineExecutionEmbedded|null
     */
    public function getEmbedded(): ?PipelineExecutionEmbedded
    {
        return $this->embedded;
    }

    /**
     * Sets embedded.
     *
     * @param OpenAPI\Server\Model\PipelineExecutionEmbedded|null $embedded
     *
     * @return $this
     */
    public function setEmbedded(PipelineExecutionEmbedded $embedded = null): ?PipelineExecutionEmbedded
    {
        $this->embedded = $embedded;

        return $this;
    }

    /**
     * Gets links.
     *
     * @return OpenAPI\Server\Model\PipelineExecutionLinks|null
     */
    public function getLinks(): ?PipelineExecutionLinks
    {
        return $this->links;
    }

    /**
     * Sets links.
     *
     * @param OpenAPI\Server\Model\PipelineExecutionLinks|null $links
     *
     * @return $this
     */
    public function setLinks(PipelineExecutionLinks $links = null): ?PipelineExecutionLinks
    {
        $this->links = $links;

        return $this;
    }
}


