<?php
/**
 * Variable
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Variable model.
 *
 * A named value than can be set on an Environment
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Variable 
{
        /**
     * Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 100
     * )
     * @Assert\Length(
     *   min = 2
     * )
     * @Assert\Regex("/[a-zA-Z_][a-zA-Z_0-9]*/")
     */
    protected $name;

    /**
     * Value of the variable. Read-Write for non-secrets, write-only for secrets.
     *
     * @var string|null
     * @SerializedName("value")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 2048
     * )
     * @Assert\Length(
     *   min = 0
     * )
     */
    protected $value;

    /**
     * Type of the variable. Default &#x60;string&#x60; if missing. Cannot be changed after creation.
     *
     * @var string|null
     * @SerializedName("type")
     * @Assert\Choice({ "string", "secretString" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $type;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->value = isset($data['value']) ? $data['value'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets value.
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Sets value.
     *
     * @param string|null $value  Value of the variable. Read-Write for non-secrets, write-only for secrets.
     *
     * @return $this
     */
    public function setValue($value = null)
    {
        $this->value = $value;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string|null $type  Type of the variable. Default `string` if missing. Cannot be changed after creation.
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $this->type = $type;

        return $this;
    }
}


