/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.aemcloudmanager4j.api;

import com.shinesolutions.aemcloudmanager4j.ApiException;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecution;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecutionListRepresentation;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecutionStepState;
import com.shinesolutions.aemcloudmanager4j.model.PipelineStepMetrics;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PipelineExecutionApi
 */
@Ignore
public class PipelineExecutionApiTest {

    private final PipelineExecutionApi api = new PipelineExecutionApi();

    
    /**
     * Advance
     *
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void advancePipelineExecutionTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        Object body = null;
        api.advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);

        // TODO: test validations
    }
    
    /**
     * Cancel
     *
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelPipelineExecutionStepTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        Object body = null;
        api.cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);

        // TODO: test validations
    }
    
    /**
     * Get current pipeline execution
     *
     * Returns current pipeline execution if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentExecutionTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        PipelineExecution response = api.getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);

        // TODO: test validations
    }
    
    /**
     * Get pipeline execution
     *
     * Returns a pipeline execution by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        PipelineExecution response = api.getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey);

        // TODO: test validations
    }
    
    /**
     * List Executions
     *
     * Returns the history of pipeline executions in a newest to oldest order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionsTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String start = null;
        Integer limit = null;
        PipelineExecutionListRepresentation response = api.getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit);

        // TODO: test validations
    }
    
    /**
     * Get logs
     *
     * Get the logs associated with a step.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStepLogsTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String file = null;
        String accept = null;
        api.getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept);

        // TODO: test validations
    }
    
    /**
     * Start the pipeline
     *
     * Starts the Pipeline. This works only if the pipeline is not already started.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startPipelineTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        api.startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType);

        // TODO: test validations
    }
    
    /**
     * Get step metrics
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stepMetricTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        PipelineStepMetrics response = api.stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);

        // TODO: test validations
    }
    
    /**
     * Get step state
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stepStateTest() throws ApiException {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        PipelineExecutionStepState response = api.stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);

        // TODO: test validations
    }
    
}
