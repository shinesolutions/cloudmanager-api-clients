/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.aemcloudmanager4j.api;

import com.shinesolutions.aemcloudmanager4j.ApiCallback;
import com.shinesolutions.aemcloudmanager4j.ApiClient;
import com.shinesolutions.aemcloudmanager4j.ApiException;
import com.shinesolutions.aemcloudmanager4j.ApiResponse;
import com.shinesolutions.aemcloudmanager4j.Configuration;
import com.shinesolutions.aemcloudmanager4j.Pair;
import com.shinesolutions.aemcloudmanager4j.ProgressRequestBody;
import com.shinesolutions.aemcloudmanager4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.shinesolutions.aemcloudmanager4j.model.PipelineExecution;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecutionListRepresentation;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecutionStepState;
import com.shinesolutions.aemcloudmanager4j.model.PipelineStepMetrics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelineExecutionApi {
    private ApiClient localVarApiClient;

    public PipelineExecutionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelineExecutionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for advancePipelineExecution
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful resume of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to advance the pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancePipelineExecutionCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()))
            .replaceAll("\\{" + "executionId" + "\\}", localVarApiClient.escapeString(executionId.toString()))
            .replaceAll("\\{" + "phaseId" + "\\}", localVarApiClient.escapeString(phaseId.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call advancePipelineExecutionValidateBeforeCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'phaseId' is set
        if (phaseId == null) {
            throw new ApiException("Missing the required parameter 'phaseId' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling advancePipelineExecution(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling advancePipelineExecution(Async)");
        }
        

        okhttp3.Call localVarCall = advancePipelineExecutionCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, _callback);
        return localVarCall;

    }

    /**
     * Advance
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful resume of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to advance the pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public void advancePipelineExecution(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body) throws ApiException {
        advancePipelineExecutionWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
    }

    /**
     * Advance
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful resume of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to advance the pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> advancePipelineExecutionWithHttpInfo(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body) throws ApiException {
        okhttp3.Call localVarCall = advancePipelineExecutionValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Advance (asynchronously)
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful resume of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to advance the pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call advancePipelineExecutionAsync(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = advancePipelineExecutionValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelPipelineExecutionStep
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful cancel of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to cancel the current pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPipelineExecutionStepCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()))
            .replaceAll("\\{" + "executionId" + "\\}", localVarApiClient.escapeString(executionId.toString()))
            .replaceAll("\\{" + "phaseId" + "\\}", localVarApiClient.escapeString(phaseId.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPipelineExecutionStepValidateBeforeCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'phaseId' is set
        if (phaseId == null) {
            throw new ApiException("Missing the required parameter 'phaseId' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelPipelineExecutionStep(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cancelPipelineExecutionStep(Async)");
        }
        

        okhttp3.Call localVarCall = cancelPipelineExecutionStepCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, _callback);
        return localVarCall;

    }

    /**
     * Cancel
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful cancel of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to cancel the current pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public void cancelPipelineExecutionStep(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body) throws ApiException {
        cancelPipelineExecutionStepWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body);
    }

    /**
     * Cancel
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful cancel of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to cancel the current pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelPipelineExecutionStepWithHttpInfo(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body) throws ApiException {
        okhttp3.Call localVarCall = cancelPipelineExecutionStepValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel (asynchronously)
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body Input for advance. See documentation for details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful cancel of pipeline execution </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to cancel the current pipeline execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPipelineExecutionStepAsync(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPipelineExecutionStepValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentExecution
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of current execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentExecutionCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentExecutionValidateBeforeCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getCurrentExecution(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getCurrentExecution(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getCurrentExecution(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCurrentExecution(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCurrentExecution(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrentExecutionCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Get current pipeline execution
     * Returns current pipeline execution if any.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return PipelineExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of current execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public PipelineExecution getCurrentExecution(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<PipelineExecution> localVarResp = getCurrentExecutionWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Get current pipeline execution
     * Returns current pipeline execution if any.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;PipelineExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of current execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineExecution> getCurrentExecutionWithHttpInfo(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = getCurrentExecutionValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<PipelineExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current pipeline execution (asynchronously)
     * Returns current pipeline execution if any.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of current execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or program </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentExecutionAsync(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<PipelineExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentExecutionValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PipelineExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExecution
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExecutionCall(String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()))
            .replaceAll("\\{" + "executionId" + "\\}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExecutionValidateBeforeCall(String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getExecution(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getExecution(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling getExecution(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getExecution(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getExecution(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getExecution(Async)");
        }
        

        okhttp3.Call localVarCall = getExecutionCall(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Get pipeline execution
     * Returns a pipeline execution by id
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return PipelineExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
     </table>
     */
    public PipelineExecution getExecution(String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<PipelineExecution> localVarResp = getExecutionWithHttpInfo(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Get pipeline execution
     * Returns a pipeline execution by id
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;PipelineExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineExecution> getExecutionWithHttpInfo(String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = getExecutionValidateBeforeCall(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<PipelineExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline execution (asynchronously)
     * Returns a pipeline execution by id
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExecutionAsync(String programId, String pipelineId, String executionId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<PipelineExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExecutionValidateBeforeCall(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PipelineExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExecutions
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param start Pagination start parameter (optional)
     * @param limit Pagination limit parameter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution history </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read executions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExecutionsCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/executions"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExecutionsValidateBeforeCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getExecutions(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getExecutions(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getExecutions(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getExecutions(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getExecutions(Async)");
        }
        

        okhttp3.Call localVarCall = getExecutionsCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, _callback);
        return localVarCall;

    }

    /**
     * List Executions
     * Returns the history of pipeline executions in a newest to oldest order
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param start Pagination start parameter (optional)
     * @param limit Pagination limit parameter (optional)
     * @return PipelineExecutionListRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution history </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read executions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline does not exist </td><td>  -  </td></tr>
     </table>
     */
    public PipelineExecutionListRepresentation getExecutions(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit) throws ApiException {
        ApiResponse<PipelineExecutionListRepresentation> localVarResp = getExecutionsWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit);
        return localVarResp.getData();
    }

    /**
     * List Executions
     * Returns the history of pipeline executions in a newest to oldest order
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param start Pagination start parameter (optional)
     * @param limit Pagination limit parameter (optional)
     * @return ApiResponse&lt;PipelineExecutionListRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution history </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read executions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineExecutionListRepresentation> getExecutionsWithHttpInfo(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getExecutionsValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, null);
        Type localVarReturnType = new TypeToken<PipelineExecutionListRepresentation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Executions (asynchronously)
     * Returns the history of pipeline executions in a newest to oldest order
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param start Pagination start parameter (optional)
     * @param limit Pagination limit parameter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of execution history </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read executions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExecutionsAsync(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String start, Integer limit, final ApiCallback<PipelineExecutionListRepresentation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExecutionsValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, _callback);
        Type localVarReturnType = new TypeToken<PipelineExecutionListRepresentation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStepLogs
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param file Identifier of the log file (optional)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read logs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStepLogsCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()))
            .replaceAll("\\{" + "executionId" + "\\}", localVarApiClient.escapeString(executionId.toString()))
            .replaceAll("\\{" + "phaseId" + "\\}", localVarApiClient.escapeString(phaseId.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", file));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStepLogsValidateBeforeCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'phaseId' is set
        if (phaseId == null) {
            throw new ApiException("Missing the required parameter 'phaseId' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getStepLogs(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getStepLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getStepLogsCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept, _callback);
        return localVarCall;

    }

    /**
     * Get logs
     * Get the logs associated with a step.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param file Identifier of the log file (optional)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read logs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void getStepLogs(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept) throws ApiException {
        getStepLogsWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept);
    }

    /**
     * Get logs
     * Get the logs associated with a step.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param file Identifier of the log file (optional)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read logs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getStepLogsWithHttpInfo(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept) throws ApiException {
        okhttp3.Call localVarCall = getStepLogsValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get logs (asynchronously)
     * Get the logs associated with a step.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param file Identifier of the log file (optional)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read logs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStepLogsAsync(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, String file, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStepLogsValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for startPipeline
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful started pipeline execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request conflicts with the expected state of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startPipelineCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startPipelineValidateBeforeCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling startPipeline(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling startPipeline(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling startPipeline(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling startPipeline(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling startPipeline(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling startPipeline(Async)");
        }
        

        okhttp3.Call localVarCall = startPipelineCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, _callback);
        return localVarCall;

    }

    /**
     * Start the pipeline
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful started pipeline execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request conflicts with the expected state of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress. </td><td>  -  </td></tr>
     </table>
     */
    public void startPipeline(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType) throws ApiException {
        startPipelineWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType);
    }

    /**
     * Start the pipeline
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful started pipeline execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request conflicts with the expected state of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> startPipelineWithHttpInfo(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType) throws ApiException {
        okhttp3.Call localVarCall = startPipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start the pipeline (asynchronously)
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful started pipeline execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request conflicts with the expected state of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pipeline execution exits or unknown pipeline or application </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startPipelineAsync(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startPipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stepMetric
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of metrics </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read metrics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stepMetricCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()))
            .replaceAll("\\{" + "executionId" + "\\}", localVarApiClient.escapeString(executionId.toString()))
            .replaceAll("\\{" + "phaseId" + "\\}", localVarApiClient.escapeString(phaseId.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stepMetricValidateBeforeCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'phaseId' is set
        if (phaseId == null) {
            throw new ApiException("Missing the required parameter 'phaseId' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling stepMetric(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling stepMetric(Async)");
        }
        

        okhttp3.Call localVarCall = stepMetricCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Get step metrics
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return PipelineStepMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of metrics </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read metrics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public PipelineStepMetrics stepMetric(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<PipelineStepMetrics> localVarResp = stepMetricWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Get step metrics
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;PipelineStepMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of metrics </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read metrics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineStepMetrics> stepMetricWithHttpInfo(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = stepMetricValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<PipelineStepMetrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get step metrics (asynchronously)
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of metrics </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read metrics </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stepMetricAsync(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<PipelineStepMetrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = stepMetricValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PipelineStepMetrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stepState
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of step state </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read step </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stepStateCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()))
            .replaceAll("\\{" + "executionId" + "\\}", localVarApiClient.escapeString(executionId.toString()))
            .replaceAll("\\{" + "phaseId" + "\\}", localVarApiClient.escapeString(phaseId.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stepStateValidateBeforeCall(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling stepState(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling stepState(Async)");
        }
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling stepState(Async)");
        }
        
        // verify the required parameter 'phaseId' is set
        if (phaseId == null) {
            throw new ApiException("Missing the required parameter 'phaseId' when calling stepState(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling stepState(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling stepState(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling stepState(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling stepState(Async)");
        }
        

        okhttp3.Call localVarCall = stepStateCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Get step state
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return PipelineExecutionStepState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of step state </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read step </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public PipelineExecutionStepState stepState(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<PipelineExecutionStepState> localVarResp = stepStateWithHttpInfo(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Get step state
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;PipelineExecutionStepState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of step state </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read step </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineExecutionStepState> stepStateWithHttpInfo(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = stepStateValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<PipelineExecutionStepState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get step state (asynchronously)
     * 
     * @param programId Identifier of the program. (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param executionId Identifier of the execution (required)
     * @param phaseId Identifier of the phase (required)
     * @param stepId Identifier of the step (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of step state </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Missing permission for user to read step </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline execution does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stepStateAsync(String programId, String pipelineId, String executionId, String phaseId, String stepId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<PipelineExecutionStepState> _callback) throws ApiException {

        okhttp3.Call localVarCall = stepStateValidateBeforeCall(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PipelineExecutionStepState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
