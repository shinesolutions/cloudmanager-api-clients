/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.aemcloudmanager4j.api;

import com.shinesolutions.aemcloudmanager4j.ApiCallback;
import com.shinesolutions.aemcloudmanager4j.ApiClient;
import com.shinesolutions.aemcloudmanager4j.ApiException;
import com.shinesolutions.aemcloudmanager4j.ApiResponse;
import com.shinesolutions.aemcloudmanager4j.Configuration;
import com.shinesolutions.aemcloudmanager4j.Pair;
import com.shinesolutions.aemcloudmanager4j.ProgressRequestBody;
import com.shinesolutions.aemcloudmanager4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.shinesolutions.aemcloudmanager4j.model.Pipeline;
import com.shinesolutions.aemcloudmanager4j.model.PipelineList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient localVarApiClient;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deletePipeline
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePipelineCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePipelineValidateBeforeCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling deletePipeline(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling deletePipeline(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling deletePipeline(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePipeline(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling deletePipeline(Async)");
        }
        

        okhttp3.Call localVarCall = deletePipelineCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Delete a Pipeline
     * Delete a pipeline. All the data is wiped.
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public void deletePipeline(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        deletePipelineWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
    }

    /**
     * Delete a Pipeline
     * Delete a pipeline. All the data is wiped.
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePipelineWithHttpInfo(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = deletePipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Pipeline (asynchronously)
     * Delete a pipeline. All the data is wiped.
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePipelineAsync(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipeline
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineValidateBeforeCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getPipeline(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling getPipeline(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getPipeline(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPipeline(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getPipeline(Async)");
        }
        

        okhttp3.Call localVarCall = getPipelineCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Get Pipeline
     * Returns a pipeline by its id
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline not found </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline getPipeline(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getPipelineWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Get Pipeline
     * Returns a pipeline by its id
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> getPipelineWithHttpInfo(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = getPipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Pipeline (asynchronously)
     * Returns a pipeline by its id
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of pipeline </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineAsync(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelines
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelinesCall(String programId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipelines"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelinesValidateBeforeCall(String programId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getPipelines(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getPipelines(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPipelines(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getPipelines(Async)");
        }
        

        okhttp3.Call localVarCall = getPipelinesCall(programId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * List Pipelines
     * Returns all the pipelines that the requesting user has access to in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return PipelineList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public PipelineList getPipelines(String programId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<PipelineList> localVarResp = getPipelinesWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * List Pipelines
     * Returns all the pipelines that the requesting user has access to in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;PipelineList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineList> getPipelinesWithHttpInfo(String programId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = getPipelinesValidateBeforeCall(programId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<PipelineList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Pipelines (asynchronously)
     * Returns all the pipelines that the requesting user has access to in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelinesAsync(String programId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<PipelineList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelinesValidateBeforeCall(programId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<PipelineList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPipeline
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body The updated Pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPipelineCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Pipeline body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/pipeline/{pipelineId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "pipelineId" + "\\}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPipelineValidateBeforeCall(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Pipeline body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling patchPipeline(Async)");
        }
        
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling patchPipeline(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling patchPipeline(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling patchPipeline(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling patchPipeline(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling patchPipeline(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchPipeline(Async)");
        }
        

        okhttp3.Call localVarCall = patchPipelineCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, _callback);
        return localVarCall;

    }

    /**
     * Patches Pipeline
     * Patches a pipeline within an program.
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body The updated Pipeline (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline patchPipeline(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Pipeline body) throws ApiException {
        ApiResponse<Pipeline> localVarResp = patchPipelineWithHttpInfo(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body);
        return localVarResp.getData();
    }

    /**
     * Patches Pipeline
     * Patches a pipeline within an program.
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body The updated Pipeline (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> patchPipelineWithHttpInfo(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Pipeline body) throws ApiException {
        okhttp3.Call localVarCall = patchPipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patches Pipeline (asynchronously)
     * Patches a pipeline within an program.
     * @param programId Identifier of the program (required)
     * @param pipelineId Identifier of the pipeline (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param contentType Must always be application/json (required)
     * @param body The updated Pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPipelineAsync(String programId, String pipelineId, String xGwImsOrgId, String authorization, String xApiKey, String contentType, Pipeline body, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPipelineValidateBeforeCall(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
