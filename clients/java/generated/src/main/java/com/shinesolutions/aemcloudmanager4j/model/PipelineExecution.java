/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.aemcloudmanager4j.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecutionEmbedded;
import com.shinesolutions.aemcloudmanager4j.model.PipelineExecutionLinks;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Wraps a pipeline execution
 */
@ApiModel(description = "Wraps a pipeline execution")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-06-23T00:28:14.729Z[GMT]")
public class PipelineExecution {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "programId";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private String programId;

  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipelineId";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  private String pipelineId;

  public static final String SERIALIZED_NAME_ARTIFACTS_VERSION = "artifactsVersion";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_VERSION)
  private String artifactsVersion;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  /**
   * Status of the execution
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_STARTED("NOT_STARTED"),
    
    RUNNING("RUNNING"),
    
    CANCELLING("CANCELLING"),
    
    CANCELLED("CANCELLED"),
    
    FINISHED("FINISHED"),
    
    ERROR("ERROR"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * How the execution was triggered.
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    ON_COMMIT("ON_COMMIT"),
    
    MANUAL("MANUAL"),
    
    SCHEDULE("SCHEDULE"),
    
    PUSH_UPGRADES("PUSH_UPGRADES");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_EMBEDDED = "_embedded";
  @SerializedName(SERIALIZED_NAME_EMBEDDED)
  private PipelineExecutionEmbedded embedded;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PipelineExecutionLinks links;


  public PipelineExecution id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Pipeline execution identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pipeline execution identifier")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


   /**
   * Identifier of the program. Unique within the space.
   * @return programId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14", value = "Identifier of the program. Unique within the space.")

  public String getProgramId() {
    return programId;
  }




   /**
   * Identifier of the pipeline. Unique within the space.
   * @return pipelineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Identifier of the pipeline. Unique within the space.")

  public String getPipelineId() {
    return pipelineId;
  }




  public PipelineExecution artifactsVersion(String artifactsVersion) {
    
    this.artifactsVersion = artifactsVersion;
    return this;
  }

   /**
   * Version of the artifacts generated during this execution
   * @return artifactsVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of the artifacts generated during this execution")

  public String getArtifactsVersion() {
    return artifactsVersion;
  }


  public void setArtifactsVersion(String artifactsVersion) {
    this.artifactsVersion = artifactsVersion;
  }


  public PipelineExecution user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * AdobeID who started the pipeline. Empty for auto triggered builds
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0123456789ABCDE@AdobeID", value = "AdobeID who started the pipeline. Empty for auto triggered builds")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public PipelineExecution status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the execution
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the execution")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PipelineExecution trigger(TriggerEnum trigger) {
    
    this.trigger = trigger;
    return this;
  }

   /**
   * How the execution was triggered.
   * @return trigger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How the execution was triggered.")

  public TriggerEnum getTrigger() {
    return trigger;
  }


  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  public PipelineExecution createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Start time
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start time")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PipelineExecution updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Date of last status change
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of last status change")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PipelineExecution finishedAt(OffsetDateTime finishedAt) {
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Date the execution reached a final state
   * @return finishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the execution reached a final state")

  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }


  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }


  public PipelineExecution embedded(PipelineExecutionEmbedded embedded) {
    
    this.embedded = embedded;
    return this;
  }

   /**
   * Get embedded
   * @return embedded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PipelineExecutionEmbedded getEmbedded() {
    return embedded;
  }


  public void setEmbedded(PipelineExecutionEmbedded embedded) {
    this.embedded = embedded;
  }


  public PipelineExecution links(PipelineExecutionLinks links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PipelineExecutionLinks getLinks() {
    return links;
  }


  public void setLinks(PipelineExecutionLinks links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineExecution pipelineExecution = (PipelineExecution) o;
    return Objects.equals(this.id, pipelineExecution.id) &&
        Objects.equals(this.programId, pipelineExecution.programId) &&
        Objects.equals(this.pipelineId, pipelineExecution.pipelineId) &&
        Objects.equals(this.artifactsVersion, pipelineExecution.artifactsVersion) &&
        Objects.equals(this.user, pipelineExecution.user) &&
        Objects.equals(this.status, pipelineExecution.status) &&
        Objects.equals(this.trigger, pipelineExecution.trigger) &&
        Objects.equals(this.createdAt, pipelineExecution.createdAt) &&
        Objects.equals(this.updatedAt, pipelineExecution.updatedAt) &&
        Objects.equals(this.finishedAt, pipelineExecution.finishedAt) &&
        Objects.equals(this.embedded, pipelineExecution.embedded) &&
        Objects.equals(this.links, pipelineExecution.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, programId, pipelineId, artifactsVersion, user, status, trigger, createdAt, updatedAt, finishedAt, embedded, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineExecution {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    artifactsVersion: ").append(toIndentedString(artifactsVersion)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    embedded: ").append(toIndentedString(embedded)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

