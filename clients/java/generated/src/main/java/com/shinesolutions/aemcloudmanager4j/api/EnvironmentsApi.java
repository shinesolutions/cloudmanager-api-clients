/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.aemcloudmanager4j.api;

import com.shinesolutions.aemcloudmanager4j.ApiCallback;
import com.shinesolutions.aemcloudmanager4j.ApiClient;
import com.shinesolutions.aemcloudmanager4j.ApiException;
import com.shinesolutions.aemcloudmanager4j.ApiResponse;
import com.shinesolutions.aemcloudmanager4j.Configuration;
import com.shinesolutions.aemcloudmanager4j.Pair;
import com.shinesolutions.aemcloudmanager4j.ProgressRequestBody;
import com.shinesolutions.aemcloudmanager4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.shinesolutions.aemcloudmanager4j.model.BadRequestError;
import com.shinesolutions.aemcloudmanager4j.model.Environment;
import com.shinesolutions.aemcloudmanager4j.model.EnvironmentList;
import com.shinesolutions.aemcloudmanager4j.model.EnvironmentLogs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentsApi {
    private ApiClient localVarApiClient;

    public EnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteEnvironment
     * @param programId Identifier of the application (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Environment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Environment deletion in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentCall(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/environment/{environmentId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentValidateBeforeCall(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling deleteEnvironment(Async)");
        }
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling deleteEnvironment(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling deleteEnvironment(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteEnvironment(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling deleteEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEnvironmentCall(programId, environmentId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * DeleteEnvironment
     * Delete environment
     * @param programId Identifier of the application (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Environment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Environment deletion in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public Environment deleteEnvironment(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<Environment> localVarResp = deleteEnvironmentWithHttpInfo(programId, environmentId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * DeleteEnvironment
     * Delete environment
     * @param programId Identifier of the application (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Environment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Environment deletion in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> deleteEnvironmentWithHttpInfo(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvironmentValidateBeforeCall(programId, environmentId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteEnvironment (asynchronously)
     * Delete environment
     * @param programId Identifier of the application (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Environment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Environment deletion in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentAsync(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvironmentValidateBeforeCall(programId, environmentId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadLogs
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param service Name of service (required)
     * @param name Name of log (required)
     * @param date date for which log is required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadLogsCall(String programId, String environmentId, String service, String name, String date, String xGwImsOrgId, String authorization, String xApiKey, String accept, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/environment/{environmentId}/logs/download"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLogsValidateBeforeCall(String programId, String environmentId, String service, String name, String date, String xGwImsOrgId, String authorization, String xApiKey, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling downloadLogs(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling downloadLogs(Async)");
        }
        

        okhttp3.Call localVarCall = downloadLogsCall(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept, _callback);
        return localVarCall;

    }

    /**
     * Download Logs
     * Download environment logs
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param service Name of service (required)
     * @param name Name of log (required)
     * @param date date for which log is required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public void downloadLogs(String programId, String environmentId, String service, String name, String date, String xGwImsOrgId, String authorization, String xApiKey, String accept) throws ApiException {
        downloadLogsWithHttpInfo(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept);
    }

    /**
     * Download Logs
     * Download environment logs
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param service Name of service (required)
     * @param name Name of log (required)
     * @param date date for which log is required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadLogsWithHttpInfo(String programId, String environmentId, String service, String name, String date, String xGwImsOrgId, String authorization, String xApiKey, String accept) throws ApiException {
        okhttp3.Call localVarCall = downloadLogsValidateBeforeCall(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Logs (asynchronously)
     * Download environment logs
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param service Name of service (required)
     * @param name Name of log (required)
     * @param date date for which log is required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadLogsAsync(String programId, String environmentId, String service, String name, String date, String xGwImsOrgId, String authorization, String xApiKey, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLogsValidateBeforeCall(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironment
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentCall(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/environment/{environmentId}"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentValidateBeforeCall(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getEnvironment(Async)");
        }
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getEnvironment(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getEnvironment(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEnvironment(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = getEnvironmentCall(programId, environmentId, xGwImsOrgId, authorization, xApiKey, _callback);
        return localVarCall;

    }

    /**
     * Get Environment
     * Returns an environment by its id
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return Environment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public Environment getEnvironment(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        ApiResponse<Environment> localVarResp = getEnvironmentWithHttpInfo(programId, environmentId, xGwImsOrgId, authorization, xApiKey);
        return localVarResp.getData();
    }

    /**
     * Get Environment
     * Returns an environment by its id
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @return ApiResponse&lt;Environment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Environment> getEnvironmentWithHttpInfo(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentValidateBeforeCall(programId, environmentId, xGwImsOrgId, authorization, xApiKey, null);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Environment (asynchronously)
     * Returns an environment by its id
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentAsync(String programId, String environmentId, String xGwImsOrgId, String authorization, String xApiKey, final ApiCallback<Environment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentValidateBeforeCall(programId, environmentId, xGwImsOrgId, authorization, xApiKey, _callback);
        Type localVarReturnType = new TypeToken<Environment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironmentLogs
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param days number of days for which logs are required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param service Names of services (optional)
     * @param name Names of log (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs for an environment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentLogsCall(String programId, String environmentId, Integer days, String xGwImsOrgId, String authorization, String xApiKey, List<String> service, List<String> name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/environment/{environmentId}/logs"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()))
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (service != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "service", service));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentLogsValidateBeforeCall(String programId, String environmentId, Integer days, String xGwImsOrgId, String authorization, String xApiKey, List<String> service, List<String> name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getEnvironmentLogs(Async)");
        }
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getEnvironmentLogs(Async)");
        }
        
        // verify the required parameter 'days' is set
        if (days == null) {
            throw new ApiException("Missing the required parameter 'days' when calling getEnvironmentLogs(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getEnvironmentLogs(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEnvironmentLogs(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getEnvironmentLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getEnvironmentLogsCall(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name, _callback);
        return localVarCall;

    }

    /**
     * Get Environment Logs
     * List all logs available in environment
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param days number of days for which logs are required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param service Names of services (optional)
     * @param name Names of log (optional)
     * @return EnvironmentLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs for an environment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentLogs getEnvironmentLogs(String programId, String environmentId, Integer days, String xGwImsOrgId, String authorization, String xApiKey, List<String> service, List<String> name) throws ApiException {
        ApiResponse<EnvironmentLogs> localVarResp = getEnvironmentLogsWithHttpInfo(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name);
        return localVarResp.getData();
    }

    /**
     * Get Environment Logs
     * List all logs available in environment
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param days number of days for which logs are required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param service Names of services (optional)
     * @param name Names of log (optional)
     * @return ApiResponse&lt;EnvironmentLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs for an environment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentLogs> getEnvironmentLogsWithHttpInfo(String programId, String environmentId, Integer days, String xGwImsOrgId, String authorization, String xApiKey, List<String> service, List<String> name) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentLogsValidateBeforeCall(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name, null);
        Type localVarReturnType = new TypeToken<EnvironmentLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Environment Logs (asynchronously)
     * List all logs available in environment
     * @param programId Identifier of the program (required)
     * @param environmentId Identifier of the environment (required)
     * @param days number of days for which logs are required (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param service Names of services (optional)
     * @param name Names of log (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of logs for an environment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameters </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Environment not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentLogsAsync(String programId, String environmentId, Integer days, String xGwImsOrgId, String authorization, String xApiKey, List<String> service, List<String> name, final ApiCallback<EnvironmentLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentLogsValidateBeforeCall(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironments
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param type Type of the environment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of environment list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Program not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentsCall(String programId, String xGwImsOrgId, String authorization, String xApiKey, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/program/{programId}/environments"
            .replaceAll("\\{" + "programId" + "\\}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGwImsOrgId != null) {
            localVarHeaderParams.put("x-gw-ims-org-id", localVarApiClient.parameterToString(xGwImsOrgId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentsValidateBeforeCall(String programId, String xGwImsOrgId, String authorization, String xApiKey, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling getEnvironments(Async)");
        }
        
        // verify the required parameter 'xGwImsOrgId' is set
        if (xGwImsOrgId == null) {
            throw new ApiException("Missing the required parameter 'xGwImsOrgId' when calling getEnvironments(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEnvironments(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getEnvironments(Async)");
        }
        

        okhttp3.Call localVarCall = getEnvironmentsCall(programId, xGwImsOrgId, authorization, xApiKey, type, _callback);
        return localVarCall;

    }

    /**
     * List Environments
     * Lists all environments in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param type Type of the environment (optional)
     * @return EnvironmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of environment list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Program not found </td><td>  -  </td></tr>
     </table>
     */
    public EnvironmentList getEnvironments(String programId, String xGwImsOrgId, String authorization, String xApiKey, String type) throws ApiException {
        ApiResponse<EnvironmentList> localVarResp = getEnvironmentsWithHttpInfo(programId, xGwImsOrgId, authorization, xApiKey, type);
        return localVarResp.getData();
    }

    /**
     * List Environments
     * Lists all environments in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param type Type of the environment (optional)
     * @return ApiResponse&lt;EnvironmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of environment list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Program not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnvironmentList> getEnvironmentsWithHttpInfo(String programId, String xGwImsOrgId, String authorization, String xApiKey, String type) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentsValidateBeforeCall(programId, xGwImsOrgId, authorization, xApiKey, type, null);
        Type localVarReturnType = new TypeToken<EnvironmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Environments (asynchronously)
     * Lists all environments in an program
     * @param programId Identifier of the program (required)
     * @param xGwImsOrgId IMS organization ID that the request is being made under. (required)
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
     * @param type Type of the environment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval of environment list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Program not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentsAsync(String programId, String xGwImsOrgId, String authorization, String xApiKey, String type, final ApiCallback<EnvironmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentsValidateBeforeCall(programId, xGwImsOrgId, authorization, xApiKey, type, _callback);
        Type localVarReturnType = new TypeToken<EnvironmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
