/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using com.shinesolutions.cloudmanagerapiclient.Converters;

namespace com.shinesolutions.cloudmanagerapiclient.Models
{ 
    /// <summary>
    /// Describes a __CI/CD Pipeline__
    /// </summary>
    [DataContract]
    public partial class Pipeline : IEquatable<Pipeline>
    {
        /// <summary>
        /// Identifier of the pipeline. Unique within the program.
        /// </summary>
        /// <value>Identifier of the pipeline. Unique within the program.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the program. Unique within the space.
        /// </summary>
        /// <value>Identifier of the program. Unique within the space.</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Name of the pipeline
        /// </summary>
        /// <value>Name of the pipeline</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
        /// </summary>
        /// <value>How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}</value>
        [TypeConverter(typeof(CustomEnumConverter<TriggerEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TriggerEnum
        {
            
            /// <summary>
            /// Enum ONCOMMITEnum for ON_COMMIT
            /// </summary>
            [EnumMember(Value = "ON_COMMIT")]
            ONCOMMITEnum = 1,
            
            /// <summary>
            /// Enum MANUALEnum for MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUALEnum = 2,
            
            /// <summary>
            /// Enum SCHEDULEEnum for SCHEDULE
            /// </summary>
            [EnumMember(Value = "SCHEDULE")]
            SCHEDULEEnum = 3
        }

        /// <summary>
        /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
        /// </summary>
        /// <value>How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public TriggerEnum Trigger { get; set; }


        /// <summary>
        /// Pipeline status
        /// </summary>
        /// <value>Pipeline status</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum IDLEEnum for IDLE
            /// </summary>
            [EnumMember(Value = "IDLE")]
            IDLEEnum = 1,
            
            /// <summary>
            /// Enum BUSYEnum for BUSY
            /// </summary>
            [EnumMember(Value = "BUSY")]
            BUSYEnum = 2,
            
            /// <summary>
            /// Enum WAITINGEnum for WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITINGEnum = 3
        }

        /// <summary>
        /// Pipeline status
        /// </summary>
        /// <value>Pipeline status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Create date
        /// </summary>
        /// <value>Create date</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Update date
        /// </summary>
        /// <value>Update date</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Last pipeline execution start
        /// </summary>
        /// <value>Last pipeline execution start</value>
        [DataMember(Name="lastStartedAt", EmitDefaultValue=false)]
        public DateTime LastStartedAt { get; private set; }

        /// <summary>
        /// Last pipeline execution end
        /// </summary>
        /// <value>Last pipeline execution end</value>
        [DataMember(Name="lastFinishedAt", EmitDefaultValue=false)]
        public DateTime LastFinishedAt { get; private set; }

        /// <summary>
        /// Pipeline phases in execution order
        /// </summary>
        /// <value>Pipeline phases in execution order</value>
        [Required]
        [DataMember(Name="phases", EmitDefaultValue=false)]
        public List<PipelinePhase> Phases { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public PipelineLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pipeline {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LastStartedAt: ").Append(LastStartedAt).Append("\n");
            sb.Append("  LastFinishedAt: ").Append(LastFinishedAt).Append("\n");
            sb.Append("  Phases: ").Append(Phases).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pipeline)obj);
        }

        /// <summary>
        /// Returns true if Pipeline instances are equal
        /// </summary>
        /// <param name="other">Instance of Pipeline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pipeline other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ProgramId == other.ProgramId ||
                    ProgramId != null &&
                    ProgramId.Equals(other.ProgramId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Trigger == other.Trigger ||
                    
                    Trigger.Equals(other.Trigger)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    LastStartedAt == other.LastStartedAt ||
                    LastStartedAt != null &&
                    LastStartedAt.Equals(other.LastStartedAt)
                ) && 
                (
                    LastFinishedAt == other.LastFinishedAt ||
                    LastFinishedAt != null &&
                    LastFinishedAt.Equals(other.LastFinishedAt)
                ) && 
                (
                    Phases == other.Phases ||
                    Phases != null &&
                    other.Phases != null &&
                    Phases.SequenceEqual(other.Phases)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ProgramId != null)
                    hashCode = hashCode * 59 + ProgramId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Trigger.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (LastStartedAt != null)
                    hashCode = hashCode * 59 + LastStartedAt.GetHashCode();
                    if (LastFinishedAt != null)
                    hashCode = hashCode * 59 + LastFinishedAt.GetHashCode();
                    if (Phases != null)
                    hashCode = hashCode * 59 + Phases.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Pipeline left, Pipeline right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Pipeline left, Pipeline right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
