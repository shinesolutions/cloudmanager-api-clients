/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using com.shinesolutions.cloudmanagerapiclient.Converters;

namespace com.shinesolutions.cloudmanagerapiclient.Models
{ 
    /// <summary>
    /// Describes the status of a particular pipeline execution step for display purposes
    /// </summary>
    [DataContract]
    public partial class PipelineExecutionStepState : IEquatable<PipelineExecutionStepState>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name="stepId", EmitDefaultValue=false)]
        public string StepId { get; set; }

        /// <summary>
        /// Gets or Sets PhaseId
        /// </summary>
        [DataMember(Name="phaseId", EmitDefaultValue=false)]
        public string PhaseId { get; set; }

        /// <summary>
        /// Name of the action
        /// </summary>
        /// <value>Name of the action</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Target repository
        /// </summary>
        /// <value>Target repository</value>
        [DataMember(Name="repository", EmitDefaultValue=false)]
        public string Repository { get; set; }

        /// <summary>
        /// Target branch
        /// </summary>
        /// <value>Target branch</value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Target environment
        /// </summary>
        /// <value>Target environment</value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string Environment { get; set; }

        /// <summary>
        /// Target environment type
        /// </summary>
        /// <value>Target environment type</value>
        [DataMember(Name="environmentType", EmitDefaultValue=false)]
        public string EnvironmentType { get; set; }

        /// <summary>
        /// Start time
        /// </summary>
        /// <value>Start time</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Date the execution reached a final state
        /// </summary>
        /// <value>Date the execution reached a final state</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTime FinishedAt { get; set; }

        /// <summary>
        /// Information about step result
        /// </summary>
        /// <value>Information about step result</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Dictionary<string, Object> Details { get; set; }


        /// <summary>
        /// Action status
        /// </summary>
        /// <value>Action status</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NOTSTARTEDEnum for NOT_STARTED
            /// </summary>
            [EnumMember(Value = "NOT_STARTED")]
            NOTSTARTEDEnum = 1,
            
            /// <summary>
            /// Enum RUNNINGEnum for RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNINGEnum = 2,
            
            /// <summary>
            /// Enum FINISHEDEnum for FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHEDEnum = 3,
            
            /// <summary>
            /// Enum ERROREnum for ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROREnum = 4,
            
            /// <summary>
            /// Enum ROLLINGBACKEnum for ROLLING_BACK
            /// </summary>
            [EnumMember(Value = "ROLLING_BACK")]
            ROLLINGBACKEnum = 5,
            
            /// <summary>
            /// Enum ROLLEDBACKEnum for ROLLED_BACK
            /// </summary>
            [EnumMember(Value = "ROLLED_BACK")]
            ROLLEDBACKEnum = 6,
            
            /// <summary>
            /// Enum WAITINGEnum for WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITINGEnum = 7,
            
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 8,
            
            /// <summary>
            /// Enum FAILEDEnum for FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILEDEnum = 9
        }

        /// <summary>
        /// Action status
        /// </summary>
        /// <value>Action status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public PipelineExecutionStepStateLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipelineExecutionStepState {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("  PhaseId: ").Append(PhaseId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  EnvironmentType: ").Append(EnvironmentType).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PipelineExecutionStepState)obj);
        }

        /// <summary>
        /// Returns true if PipelineExecutionStepState instances are equal
        /// </summary>
        /// <param name="other">Instance of PipelineExecutionStepState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelineExecutionStepState other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    StepId == other.StepId ||
                    StepId != null &&
                    StepId.Equals(other.StepId)
                ) && 
                (
                    PhaseId == other.PhaseId ||
                    PhaseId != null &&
                    PhaseId.Equals(other.PhaseId)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    Repository == other.Repository ||
                    Repository != null &&
                    Repository.Equals(other.Repository)
                ) && 
                (
                    Branch == other.Branch ||
                    Branch != null &&
                    Branch.Equals(other.Branch)
                ) && 
                (
                    Environment == other.Environment ||
                    Environment != null &&
                    Environment.Equals(other.Environment)
                ) && 
                (
                    EnvironmentType == other.EnvironmentType ||
                    EnvironmentType != null &&
                    EnvironmentType.Equals(other.EnvironmentType)
                ) && 
                (
                    StartedAt == other.StartedAt ||
                    StartedAt != null &&
                    StartedAt.Equals(other.StartedAt)
                ) && 
                (
                    FinishedAt == other.FinishedAt ||
                    FinishedAt != null &&
                    FinishedAt.Equals(other.FinishedAt)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    other.Details != null &&
                    Details.SequenceEqual(other.Details)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (StepId != null)
                    hashCode = hashCode * 59 + StepId.GetHashCode();
                    if (PhaseId != null)
                    hashCode = hashCode * 59 + PhaseId.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (Repository != null)
                    hashCode = hashCode * 59 + Repository.GetHashCode();
                    if (Branch != null)
                    hashCode = hashCode * 59 + Branch.GetHashCode();
                    if (Environment != null)
                    hashCode = hashCode * 59 + Environment.GetHashCode();
                    if (EnvironmentType != null)
                    hashCode = hashCode * 59 + EnvironmentType.GetHashCode();
                    if (StartedAt != null)
                    hashCode = hashCode * 59 + StartedAt.GetHashCode();
                    if (FinishedAt != null)
                    hashCode = hashCode * 59 + FinishedAt.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PipelineExecutionStepState left, PipelineExecutionStepState right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PipelineExecutionStepState left, PipelineExecutionStepState right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
