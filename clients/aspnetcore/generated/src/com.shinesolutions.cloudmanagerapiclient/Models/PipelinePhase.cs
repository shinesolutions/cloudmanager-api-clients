/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using com.shinesolutions.cloudmanagerapiclient.Converters;

namespace com.shinesolutions.cloudmanagerapiclient.Models
{ 
    /// <summary>
    /// Describes a phase of a pipeline
    /// </summary>
    [DataContract]
    public partial class PipelinePhase : IEquatable<PipelinePhase>
    {
        /// <summary>
        /// Name of the phase
        /// </summary>
        /// <value>Name of the phase</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Type of the phase
        /// </summary>
        /// <value>Type of the phase</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum VALIDATEEnum for VALIDATE
            /// </summary>
            [EnumMember(Value = "VALIDATE")]
            VALIDATEEnum = 1,
            
            /// <summary>
            /// Enum BUILDEnum for BUILD
            /// </summary>
            [EnumMember(Value = "BUILD")]
            BUILDEnum = 2,
            
            /// <summary>
            /// Enum DEPLOYEnum for DEPLOY
            /// </summary>
            [EnumMember(Value = "DEPLOY")]
            DEPLOYEnum = 3
        }

        /// <summary>
        /// Type of the phase
        /// </summary>
        /// <value>Type of the phase</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD
        /// </summary>
        /// <value>Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type&#x3D;BUILD</value>
        [DataMember(Name="repositoryId", EmitDefaultValue=false)]
        public string RepositoryId { get; set; }

        /// <summary>
        /// Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing.
        /// </summary>
        /// <value>Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be &#x60;master&#x60; if missing.</value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Identifier of the target environment. Mandatory if type&#x3D;DEPLOY
        /// </summary>
        /// <value>Identifier of the target environment. Mandatory if type&#x3D;DEPLOY</value>
        [DataMember(Name="environmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipelinePhase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RepositoryId: ").Append(RepositoryId).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PipelinePhase)obj);
        }

        /// <summary>
        /// Returns true if PipelinePhase instances are equal
        /// </summary>
        /// <param name="other">Instance of PipelinePhase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelinePhase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    RepositoryId == other.RepositoryId ||
                    RepositoryId != null &&
                    RepositoryId.Equals(other.RepositoryId)
                ) && 
                (
                    Branch == other.Branch ||
                    Branch != null &&
                    Branch.Equals(other.Branch)
                ) && 
                (
                    EnvironmentId == other.EnvironmentId ||
                    EnvironmentId != null &&
                    EnvironmentId.Equals(other.EnvironmentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (RepositoryId != null)
                    hashCode = hashCode * 59 + RepositoryId.GetHashCode();
                    if (Branch != null)
                    hashCode = hashCode * 59 + Branch.GetHashCode();
                    if (EnvironmentId != null)
                    hashCode = hashCode * 59 + EnvironmentId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PipelinePhase left, PipelinePhase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PipelinePhase left, PipelinePhase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
