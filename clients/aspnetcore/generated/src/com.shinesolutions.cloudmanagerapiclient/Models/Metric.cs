/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using com.shinesolutions.cloudmanagerapiclient.Converters;

namespace com.shinesolutions.cloudmanagerapiclient.Models
{ 
    /// <summary>
    /// Describes a __Metric__
    /// </summary>
    [DataContract]
    public partial class Metric : IEquatable<Metric>
    {
        /// <summary>
        /// KPI result identifier
        /// </summary>
        /// <value>KPI result identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Severity of the metric
        /// </summary>
        /// <value>Severity of the metric</value>
        [TypeConverter(typeof(CustomEnumConverter<SeverityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SeverityEnum
        {
            
            /// <summary>
            /// Enum CriticalEnum for critical
            /// </summary>
            [EnumMember(Value = "critical")]
            CriticalEnum = 1,
            
            /// <summary>
            /// Enum ImportantEnum for important
            /// </summary>
            [EnumMember(Value = "important")]
            ImportantEnum = 2,
            
            /// <summary>
            /// Enum InformationalEnum for informational
            /// </summary>
            [EnumMember(Value = "informational")]
            InformationalEnum = 3
        }

        /// <summary>
        /// Severity of the metric
        /// </summary>
        /// <value>Severity of the metric</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum Severity { get; set; }

        /// <summary>
        /// Whether metric is considered passed
        /// </summary>
        /// <value>Whether metric is considered passed</value>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public bool Passed { get; set; } = false;

        /// <summary>
        /// Whether user override the failed metric
        /// </summary>
        /// <value>Whether user override the failed metric</value>
        [DataMember(Name="override", EmitDefaultValue=false)]
        public bool Override { get; set; } = false;

        /// <summary>
        /// Expected value for the metric
        /// </summary>
        /// <value>Expected value for the metric</value>
        [DataMember(Name="actualValue", EmitDefaultValue=false)]
        public string ActualValue { get; set; }

        /// <summary>
        /// Expected value for the metric
        /// </summary>
        /// <value>Expected value for the metric</value>
        [DataMember(Name="expectedValue", EmitDefaultValue=false)]
        public string ExpectedValue { get; set; }


        /// <summary>
        /// Comparator used for the metric
        /// </summary>
        /// <value>Comparator used for the metric</value>
        [TypeConverter(typeof(CustomEnumConverter<ComparatorEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ComparatorEnum
        {
            
            /// <summary>
            /// Enum GTEnum for GT
            /// </summary>
            [EnumMember(Value = "GT")]
            GTEnum = 1,
            
            /// <summary>
            /// Enum GTEEnum for GTE
            /// </summary>
            [EnumMember(Value = "GTE")]
            GTEEnum = 2,
            
            /// <summary>
            /// Enum LTEnum for LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LTEnum = 3,
            
            /// <summary>
            /// Enum LTEEnum for LTE
            /// </summary>
            [EnumMember(Value = "LTE")]
            LTEEnum = 4,
            
            /// <summary>
            /// Enum EQEnum for EQ
            /// </summary>
            [EnumMember(Value = "EQ")]
            EQEnum = 5,
            
            /// <summary>
            /// Enum NEQEnum for NEQ
            /// </summary>
            [EnumMember(Value = "NEQ")]
            NEQEnum = 6
        }

        /// <summary>
        /// Comparator used for the metric
        /// </summary>
        /// <value>Comparator used for the metric</value>
        [DataMember(Name="comparator", EmitDefaultValue=false)]
        public ComparatorEnum Comparator { get; set; }

        /// <summary>
        /// KPI identifier
        /// </summary>
        /// <value>KPI identifier</value>
        [DataMember(Name="kpi", EmitDefaultValue=false)]
        public string Kpi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metric {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  Override: ").Append(Override).Append("\n");
            sb.Append("  ActualValue: ").Append(ActualValue).Append("\n");
            sb.Append("  ExpectedValue: ").Append(ExpectedValue).Append("\n");
            sb.Append("  Comparator: ").Append(Comparator).Append("\n");
            sb.Append("  Kpi: ").Append(Kpi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Metric)obj);
        }

        /// <summary>
        /// Returns true if Metric instances are equal
        /// </summary>
        /// <param name="other">Instance of Metric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metric other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Severity == other.Severity ||
                    
                    Severity.Equals(other.Severity)
                ) && 
                (
                    Passed == other.Passed ||
                    
                    Passed.Equals(other.Passed)
                ) && 
                (
                    Override == other.Override ||
                    
                    Override.Equals(other.Override)
                ) && 
                (
                    ActualValue == other.ActualValue ||
                    ActualValue != null &&
                    ActualValue.Equals(other.ActualValue)
                ) && 
                (
                    ExpectedValue == other.ExpectedValue ||
                    ExpectedValue != null &&
                    ExpectedValue.Equals(other.ExpectedValue)
                ) && 
                (
                    Comparator == other.Comparator ||
                    
                    Comparator.Equals(other.Comparator)
                ) && 
                (
                    Kpi == other.Kpi ||
                    Kpi != null &&
                    Kpi.Equals(other.Kpi)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    
                    hashCode = hashCode * 59 + Passed.GetHashCode();
                    
                    hashCode = hashCode * 59 + Override.GetHashCode();
                    if (ActualValue != null)
                    hashCode = hashCode * 59 + ActualValue.GetHashCode();
                    if (ExpectedValue != null)
                    hashCode = hashCode * 59 + ExpectedValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Comparator.GetHashCode();
                    if (Kpi != null)
                    hashCode = hashCode * 59 + Kpi.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Metric left, Metric right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Metric left, Metric right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
