/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using com.shinesolutions.cloudmanagerapiclient.Converters;

namespace com.shinesolutions.cloudmanagerapiclient.Models
{ 
    /// <summary>
    /// Wraps a pipeline execution
    /// </summary>
    [DataContract]
    public partial class PipelineExecution : IEquatable<PipelineExecution>
    {
        /// <summary>
        /// Pipeline execution identifier
        /// </summary>
        /// <value>Pipeline execution identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier of the program. Unique within the space.
        /// </summary>
        /// <value>Identifier of the program. Unique within the space.</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; private set; }

        /// <summary>
        /// Identifier of the pipeline. Unique within the space.
        /// </summary>
        /// <value>Identifier of the pipeline. Unique within the space.</value>
        [DataMember(Name="pipelineId", EmitDefaultValue=false)]
        public string PipelineId { get; private set; }

        /// <summary>
        /// Version of the artifacts generated during this execution
        /// </summary>
        /// <value>Version of the artifacts generated during this execution</value>
        [DataMember(Name="artifactsVersion", EmitDefaultValue=false)]
        public string ArtifactsVersion { get; set; }

        /// <summary>
        /// AdobeID who started the pipeline. Empty for auto triggered builds
        /// </summary>
        /// <value>AdobeID who started the pipeline. Empty for auto triggered builds</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }


        /// <summary>
        /// Status of the execution
        /// </summary>
        /// <value>Status of the execution</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NOTSTARTEDEnum for NOT_STARTED
            /// </summary>
            [EnumMember(Value = "NOT_STARTED")]
            NOTSTARTEDEnum = 1,
            
            /// <summary>
            /// Enum RUNNINGEnum for RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNINGEnum = 2,
            
            /// <summary>
            /// Enum CANCELLINGEnum for CANCELLING
            /// </summary>
            [EnumMember(Value = "CANCELLING")]
            CANCELLINGEnum = 3,
            
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 4,
            
            /// <summary>
            /// Enum FINISHEDEnum for FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHEDEnum = 5,
            
            /// <summary>
            /// Enum ERROREnum for ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROREnum = 6,
            
            /// <summary>
            /// Enum FAILEDEnum for FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILEDEnum = 7
        }

        /// <summary>
        /// Status of the execution
        /// </summary>
        /// <value>Status of the execution</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }


        /// <summary>
        /// How the execution was triggered.
        /// </summary>
        /// <value>How the execution was triggered.</value>
        [TypeConverter(typeof(CustomEnumConverter<TriggerEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TriggerEnum
        {
            
            /// <summary>
            /// Enum ONCOMMITEnum for ON_COMMIT
            /// </summary>
            [EnumMember(Value = "ON_COMMIT")]
            ONCOMMITEnum = 1,
            
            /// <summary>
            /// Enum MANUALEnum for MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUALEnum = 2,
            
            /// <summary>
            /// Enum SCHEDULEEnum for SCHEDULE
            /// </summary>
            [EnumMember(Value = "SCHEDULE")]
            SCHEDULEEnum = 3,
            
            /// <summary>
            /// Enum PUSHUPGRADESEnum for PUSH_UPGRADES
            /// </summary>
            [EnumMember(Value = "PUSH_UPGRADES")]
            PUSHUPGRADESEnum = 4
        }

        /// <summary>
        /// How the execution was triggered.
        /// </summary>
        /// <value>How the execution was triggered.</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public TriggerEnum Trigger { get; set; }

        /// <summary>
        /// Start time
        /// </summary>
        /// <value>Start time</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Date of last status change
        /// </summary>
        /// <value>Date of last status change</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Date the execution reached a final state
        /// </summary>
        /// <value>Date the execution reached a final state</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTime FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Embedded
        /// </summary>
        [DataMember(Name="_embedded", EmitDefaultValue=false)]
        public PipelineExecutionEmbedded Embedded { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public PipelineExecutionLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipelineExecution {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  PipelineId: ").Append(PipelineId).Append("\n");
            sb.Append("  ArtifactsVersion: ").Append(ArtifactsVersion).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PipelineExecution)obj);
        }

        /// <summary>
        /// Returns true if PipelineExecution instances are equal
        /// </summary>
        /// <param name="other">Instance of PipelineExecution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipelineExecution other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ProgramId == other.ProgramId ||
                    ProgramId != null &&
                    ProgramId.Equals(other.ProgramId)
                ) && 
                (
                    PipelineId == other.PipelineId ||
                    PipelineId != null &&
                    PipelineId.Equals(other.PipelineId)
                ) && 
                (
                    ArtifactsVersion == other.ArtifactsVersion ||
                    ArtifactsVersion != null &&
                    ArtifactsVersion.Equals(other.ArtifactsVersion)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Trigger == other.Trigger ||
                    
                    Trigger.Equals(other.Trigger)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    FinishedAt == other.FinishedAt ||
                    FinishedAt != null &&
                    FinishedAt.Equals(other.FinishedAt)
                ) && 
                (
                    Embedded == other.Embedded ||
                    Embedded != null &&
                    Embedded.Equals(other.Embedded)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ProgramId != null)
                    hashCode = hashCode * 59 + ProgramId.GetHashCode();
                    if (PipelineId != null)
                    hashCode = hashCode * 59 + PipelineId.GetHashCode();
                    if (ArtifactsVersion != null)
                    hashCode = hashCode * 59 + ArtifactsVersion.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Trigger.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (FinishedAt != null)
                    hashCode = hashCode * 59 + FinishedAt.GetHashCode();
                    if (Embedded != null)
                    hashCode = hashCode * 59 + Embedded.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PipelineExecution left, PipelineExecution right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PipelineExecution left, PipelineExecution right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
