=begin comment

Cloud Manager API

This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

The version of the OpenAPI document: 1.0.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::PipelineExecutionApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# advance_pipeline_execution
#
# Advance
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $execution_id Identifier of the execution (required)
# @param string $phase_id Identifier of the phase (required)
# @param string $step_id Identifier of the step (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
# @param string $content_type Must always be application/json (required)
# @param object $body Input for advance. See documentation for details. (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'execution_id' => {
        data_type => 'string',
        description => 'Identifier of the execution',
        required => '1',
    },
    'phase_id' => {
        data_type => 'string',
        description => 'Identifier of the phase',
        required => '1',
    },
    'step_id' => {
        data_type => 'string',
        description => 'Identifier of the step',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Must always be application/json',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => 'Input for advance. See documentation for details.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'advance_pipeline_execution' } = { 
        summary => 'Advance',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub advance_pipeline_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'execution_id' is set
    unless (exists $args{'execution_id'}) {
      croak("Missing the required parameter 'execution_id' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'phase_id' is set
    unless (exists $args{'phase_id'}) {
      croak("Missing the required parameter 'phase_id' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'step_id' is set
    unless (exists $args{'step_id'}) {
      croak("Missing the required parameter 'step_id' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'content_type' is set
    unless (exists $args{'content_type'}) {
      croak("Missing the required parameter 'content_type' when calling advance_pipeline_execution");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling advance_pipeline_execution");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'execution_id'}) {
        my $_base_variable = "{" . "executionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'phase_id'}) {
        my $_base_variable = "{" . "phaseId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phase_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step_id'}) {
        my $_base_variable = "{" . "stepId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# cancel_pipeline_execution_step
#
# Cancel
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $execution_id Identifier of the execution (required)
# @param string $phase_id Identifier of the phase (required)
# @param string $step_id Identifier of the step (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
# @param string $content_type Must always be application/json (required)
# @param object $body Input for advance. See documentation for details. (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'execution_id' => {
        data_type => 'string',
        description => 'Identifier of the execution',
        required => '1',
    },
    'phase_id' => {
        data_type => 'string',
        description => 'Identifier of the phase',
        required => '1',
    },
    'step_id' => {
        data_type => 'string',
        description => 'Identifier of the step',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Must always be application/json',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => 'Input for advance. See documentation for details.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cancel_pipeline_execution_step' } = { 
        summary => 'Cancel',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub cancel_pipeline_execution_step {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'execution_id' is set
    unless (exists $args{'execution_id'}) {
      croak("Missing the required parameter 'execution_id' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'phase_id' is set
    unless (exists $args{'phase_id'}) {
      croak("Missing the required parameter 'phase_id' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'step_id' is set
    unless (exists $args{'step_id'}) {
      croak("Missing the required parameter 'step_id' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'content_type' is set
    unless (exists $args{'content_type'}) {
      croak("Missing the required parameter 'content_type' when calling cancel_pipeline_execution_step");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling cancel_pipeline_execution_step");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'execution_id'}) {
        my $_base_variable = "{" . "executionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'phase_id'}) {
        my $_base_variable = "{" . "phaseId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phase_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step_id'}) {
        my $_base_variable = "{" . "stepId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_current_execution
#
# Get current pipeline execution
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_current_execution' } = { 
        summary => 'Get current pipeline execution',
        params => $params,
        returns => 'PipelineExecution',
        };
}
# @return PipelineExecution
#
sub get_current_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling get_current_execution");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling get_current_execution");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling get_current_execution");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_current_execution");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling get_current_execution");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineExecution', $response);
    return $_response_object;
}

#
# get_execution
#
# Get pipeline execution
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $execution_id Identifier of the execution (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'execution_id' => {
        data_type => 'string',
        description => 'Identifier of the execution',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_execution' } = { 
        summary => 'Get pipeline execution',
        params => $params,
        returns => 'PipelineExecution',
        };
}
# @return PipelineExecution
#
sub get_execution {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling get_execution");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling get_execution");
    }

    # verify the required parameter 'execution_id' is set
    unless (exists $args{'execution_id'}) {
      croak("Missing the required parameter 'execution_id' when calling get_execution");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling get_execution");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_execution");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling get_execution");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'execution_id'}) {
        my $_base_variable = "{" . "executionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineExecution', $response);
    return $_response_object;
}

#
# get_executions
#
# List Executions
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
# @param string $start Pagination start parameter (optional)
# @param int $limit Pagination limit parameter (optional)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    'start' => {
        data_type => 'string',
        description => 'Pagination start parameter',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Pagination limit parameter',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_executions' } = { 
        summary => 'List Executions',
        params => $params,
        returns => 'PipelineExecutionListRepresentation',
        };
}
# @return PipelineExecutionListRepresentation
#
sub get_executions {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling get_executions");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling get_executions");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling get_executions");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_executions");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling get_executions");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/executions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineExecutionListRepresentation', $response);
    return $_response_object;
}

#
# get_step_logs
#
# Get logs
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $execution_id Identifier of the execution (required)
# @param string $phase_id Identifier of the phase (required)
# @param string $step_id Identifier of the step (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
# @param string $file Identifier of the log file (optional)
# @param string $accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'execution_id' => {
        data_type => 'string',
        description => 'Identifier of the execution',
        required => '1',
    },
    'phase_id' => {
        data_type => 'string',
        description => 'Identifier of the phase',
        required => '1',
    },
    'step_id' => {
        data_type => 'string',
        description => 'Identifier of the step',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    'file' => {
        data_type => 'string',
        description => 'Identifier of the log file',
        required => '0',
    },
    'accept' => {
        data_type => 'string',
        description => 'Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_step_logs' } = { 
        summary => 'Get logs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub get_step_logs {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling get_step_logs");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling get_step_logs");
    }

    # verify the required parameter 'execution_id' is set
    unless (exists $args{'execution_id'}) {
      croak("Missing the required parameter 'execution_id' when calling get_step_logs");
    }

    # verify the required parameter 'phase_id' is set
    unless (exists $args{'phase_id'}) {
      croak("Missing the required parameter 'phase_id' when calling get_step_logs");
    }

    # verify the required parameter 'step_id' is set
    unless (exists $args{'step_id'}) {
      croak("Missing the required parameter 'step_id' when calling get_step_logs");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling get_step_logs");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling get_step_logs");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling get_step_logs");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'file'}) {
        $query_params->{'file'} = $self->{api_client}->to_query_value($args{'file'});
    }

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'execution_id'}) {
        my $_base_variable = "{" . "executionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'phase_id'}) {
        my $_base_variable = "{" . "phaseId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phase_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step_id'}) {
        my $_base_variable = "{" . "stepId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# start_pipeline
#
# Start the pipeline
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
# @param string $content_type Must always be application/json (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Must always be application/json',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'start_pipeline' } = { 
        summary => 'Start the pipeline',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub start_pipeline {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling start_pipeline");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling start_pipeline");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling start_pipeline");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling start_pipeline");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling start_pipeline");
    }

    # verify the required parameter 'content_type' is set
    unless (exists $args{'content_type'}) {
      croak("Missing the required parameter 'content_type' when calling start_pipeline");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# step_metric
#
# Get step metrics
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $execution_id Identifier of the execution (required)
# @param string $phase_id Identifier of the phase (required)
# @param string $step_id Identifier of the step (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'execution_id' => {
        data_type => 'string',
        description => 'Identifier of the execution',
        required => '1',
    },
    'phase_id' => {
        data_type => 'string',
        description => 'Identifier of the phase',
        required => '1',
    },
    'step_id' => {
        data_type => 'string',
        description => 'Identifier of the step',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'step_metric' } = { 
        summary => 'Get step metrics',
        params => $params,
        returns => 'PipelineStepMetrics',
        };
}
# @return PipelineStepMetrics
#
sub step_metric {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling step_metric");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling step_metric");
    }

    # verify the required parameter 'execution_id' is set
    unless (exists $args{'execution_id'}) {
      croak("Missing the required parameter 'execution_id' when calling step_metric");
    }

    # verify the required parameter 'phase_id' is set
    unless (exists $args{'phase_id'}) {
      croak("Missing the required parameter 'phase_id' when calling step_metric");
    }

    # verify the required parameter 'step_id' is set
    unless (exists $args{'step_id'}) {
      croak("Missing the required parameter 'step_id' when calling step_metric");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling step_metric");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling step_metric");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling step_metric");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'execution_id'}) {
        my $_base_variable = "{" . "executionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'phase_id'}) {
        my $_base_variable = "{" . "phaseId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phase_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step_id'}) {
        my $_base_variable = "{" . "stepId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineStepMetrics', $response);
    return $_response_object;
}

#
# step_state
#
# Get step state
# 
# @param string $program_id Identifier of the program. (required)
# @param string $pipeline_id Identifier of the pipeline (required)
# @param string $execution_id Identifier of the execution (required)
# @param string $phase_id Identifier of the phase (required)
# @param string $step_id Identifier of the step (required)
# @param string $x_gw_ims_org_id IMS organization ID that the request is being made under. (required)
# @param string $authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
# @param string $x_api_key IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
{
    my $params = {
    'program_id' => {
        data_type => 'string',
        description => 'Identifier of the program.',
        required => '1',
    },
    'pipeline_id' => {
        data_type => 'string',
        description => 'Identifier of the pipeline',
        required => '1',
    },
    'execution_id' => {
        data_type => 'string',
        description => 'Identifier of the execution',
        required => '1',
    },
    'phase_id' => {
        data_type => 'string',
        description => 'Identifier of the phase',
        required => '1',
    },
    'step_id' => {
        data_type => 'string',
        description => 'Identifier of the step',
        required => '1',
    },
    'x_gw_ims_org_id' => {
        data_type => 'string',
        description => 'IMS organization ID that the request is being made under.',
        required => '1',
    },
    'authorization' => {
        data_type => 'string',
        description => 'Bearer [token] - An access token for the technical account created through integration with Adobe IO',
        required => '1',
    },
    'x_api_key' => {
        data_type => 'string',
        description => 'IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'step_state' } = { 
        summary => 'Get step state',
        params => $params,
        returns => 'PipelineExecutionStepState',
        };
}
# @return PipelineExecutionStepState
#
sub step_state {
    my ($self, %args) = @_;

    # verify the required parameter 'program_id' is set
    unless (exists $args{'program_id'}) {
      croak("Missing the required parameter 'program_id' when calling step_state");
    }

    # verify the required parameter 'pipeline_id' is set
    unless (exists $args{'pipeline_id'}) {
      croak("Missing the required parameter 'pipeline_id' when calling step_state");
    }

    # verify the required parameter 'execution_id' is set
    unless (exists $args{'execution_id'}) {
      croak("Missing the required parameter 'execution_id' when calling step_state");
    }

    # verify the required parameter 'phase_id' is set
    unless (exists $args{'phase_id'}) {
      croak("Missing the required parameter 'phase_id' when calling step_state");
    }

    # verify the required parameter 'step_id' is set
    unless (exists $args{'step_id'}) {
      croak("Missing the required parameter 'step_id' when calling step_state");
    }

    # verify the required parameter 'x_gw_ims_org_id' is set
    unless (exists $args{'x_gw_ims_org_id'}) {
      croak("Missing the required parameter 'x_gw_ims_org_id' when calling step_state");
    }

    # verify the required parameter 'authorization' is set
    unless (exists $args{'authorization'}) {
      croak("Missing the required parameter 'authorization' when calling step_state");
    }

    # verify the required parameter 'x_api_key' is set
    unless (exists $args{'x_api_key'}) {
      croak("Missing the required parameter 'x_api_key' when calling step_state");
    }

    # parse inputs
    my $_resource_path = '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'x_gw_ims_org_id'}) {
        $header_params->{'x-gw-ims-org-id'} = $self->{api_client}->to_header_value($args{'x_gw_ims_org_id'});
    }

    # header params
    if ( exists $args{'authorization'}) {
        $header_params->{'Authorization'} = $self->{api_client}->to_header_value($args{'authorization'});
    }

    # header params
    if ( exists $args{'x_api_key'}) {
        $header_params->{'x-api-key'} = $self->{api_client}->to_header_value($args{'x_api_key'});
    }

    # path params
    if ( exists $args{'program_id'}) {
        my $_base_variable = "{" . "programId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'program_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline_id'}) {
        my $_base_variable = "{" . "pipelineId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'execution_id'}) {
        my $_base_variable = "{" . "executionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'execution_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'phase_id'}) {
        my $_base_variable = "{" . "phaseId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phase_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step_id'}) {
        my $_base_variable = "{" . "stepId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineExecutionStepState', $response);
    return $_response_object;
}

1;
