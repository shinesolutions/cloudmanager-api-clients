/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIEnvironmentsApiRequest.h"

namespace OpenAPI {

OAIEnvironmentsApiRequest::OAIEnvironmentsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIEnvironmentsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIEnvironmentsApiRequest::~OAIEnvironmentsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIEnvironmentsApiRequest::~OAIEnvironmentsApiRequest()";
}

QMap<QString, QString>
OAIEnvironmentsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIEnvironmentsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIEnvironmentsApiRequest::getRawSocket(){
    return socket;
}


void OAIEnvironmentsApiRequest::deleteEnvironmentRequest(const QString& program_idstr, const QString& environment_idstr){
    qDebug() << "/api/program/{programId}/environment/{environmentId}";
    connect(this, &OAIEnvironmentsApiRequest::deleteEnvironment, handler.data(), &OAIEnvironmentsApiHandler::deleteEnvironment);

    
    QString program_id;
    fromStringValue(program_idstr, program_id);
        QString environment_id;
    fromStringValue(environment_idstr, environment_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    

    emit deleteEnvironment(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key);
}


void OAIEnvironmentsApiRequest::downloadLogsRequest(const QString& program_idstr, const QString& environment_idstr){
    qDebug() << "/api/program/{programId}/environment/{environmentId}/logs/download";
    connect(this, &OAIEnvironmentsApiRequest::downloadLogs, handler.data(), &OAIEnvironmentsApiHandler::downloadLogs);

    
    QString service;
    if(socket->queryString().keys().contains("service")){
        fromStringValue(socket->queryString().value("service"), service);
    }
    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString date;
    if(socket->queryString().keys().contains("date")){
        fromStringValue(socket->queryString().value("date"), date);
    }
    
    QString program_id;
    fromStringValue(program_idstr, program_id);
        QString environment_id;
    fromStringValue(environment_idstr, environment_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    
    QString accept;
    if(socket->headers().keys().contains("accept")){
        fromStringValue(socket->queryString().value("accept"), accept);
    }
    

    emit downloadLogs(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, accept);
}


void OAIEnvironmentsApiRequest::getEnvironmentRequest(const QString& program_idstr, const QString& environment_idstr){
    qDebug() << "/api/program/{programId}/environment/{environmentId}";
    connect(this, &OAIEnvironmentsApiRequest::getEnvironment, handler.data(), &OAIEnvironmentsApiHandler::getEnvironment);

    
    QString program_id;
    fromStringValue(program_idstr, program_id);
        QString environment_id;
    fromStringValue(environment_idstr, environment_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    

    emit getEnvironment(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key);
}


void OAIEnvironmentsApiRequest::getEnvironmentLogsRequest(const QString& program_idstr, const QString& environment_idstr){
    qDebug() << "/api/program/{programId}/environment/{environmentId}/logs";
    connect(this, &OAIEnvironmentsApiRequest::getEnvironmentLogs, handler.data(), &OAIEnvironmentsApiHandler::getEnvironmentLogs);

    
    QList<QString> service;
    if(socket->queryString().keys().contains("service")){
        fromStringValue(socket->queryString().values("service"), service);
    }
    
    QList<QString> name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().values("name"), name);
    }
    
    qint32 days;
    if(socket->queryString().keys().contains("days")){
        fromStringValue(socket->queryString().value("days"), days);
    }
    
    QString program_id;
    fromStringValue(program_idstr, program_id);
        QString environment_id;
    fromStringValue(environment_idstr, environment_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    

    emit getEnvironmentLogs(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, service, name);
}


void OAIEnvironmentsApiRequest::getEnvironmentsRequest(const QString& program_idstr){
    qDebug() << "/api/program/{programId}/environments";
    connect(this, &OAIEnvironmentsApiRequest::getEnvironments, handler.data(), &OAIEnvironmentsApiHandler::getEnvironments);

    
    QString type;
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QString program_id;
    fromStringValue(program_idstr, program_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    

    emit getEnvironments(program_id, x_gw_ims_org_id, authorization, x_api_key, type);
}



void OAIEnvironmentsApiRequest::deleteEnvironmentResponse(const OAIEnvironment& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::downloadLogsResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::getEnvironmentResponse(const OAIEnvironment& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::getEnvironmentLogsResponse(const OAIEnvironmentLogs& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::getEnvironmentsResponse(const OAIEnvironmentList& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIEnvironmentsApiRequest::deleteEnvironmentError(const OAIEnvironment& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::downloadLogsError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::getEnvironmentError(const OAIEnvironment& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::getEnvironmentLogsError(const OAIEnvironmentLogs& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIEnvironmentsApiRequest::getEnvironmentsError(const OAIEnvironmentList& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIEnvironmentsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIEnvironmentsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
