/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentsApiRequest_H
#define OAI_OAIEnvironmentsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIBadRequestError.h"
#include "OAIEnvironment.h"
#include "OAIEnvironmentList.h"
#include "OAIEnvironmentLogs.h"
#include <QString>
#include "OAIEnvironmentsApiHandler.h"

namespace OpenAPI {

class OAIEnvironmentsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIEnvironmentsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIEnvironmentsApiHandler> handler);
    virtual ~OAIEnvironmentsApiRequest();

    void deleteEnvironmentRequest(const QString& program_id, const QString& environment_id);
    void downloadLogsRequest(const QString& program_id, const QString& environment_id);
    void getEnvironmentRequest(const QString& program_id, const QString& environment_id);
    void getEnvironmentLogsRequest(const QString& program_id, const QString& environment_id);
    void getEnvironmentsRequest(const QString& program_id);
    

    void deleteEnvironmentResponse(const OAIEnvironment& res);
    void downloadLogsResponse();
    void getEnvironmentResponse(const OAIEnvironment& res);
    void getEnvironmentLogsResponse(const OAIEnvironmentLogs& res);
    void getEnvironmentsResponse(const OAIEnvironmentList& res);
    

    void deleteEnvironmentError(const OAIEnvironment& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void downloadLogsError(QNetworkReply::NetworkError error_type, QString& error_str);
    void getEnvironmentError(const OAIEnvironment& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getEnvironmentLogsError(const OAIEnvironmentLogs& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getEnvironmentsError(const OAIEnvironmentList& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void deleteEnvironment(QString program_id, QString environment_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    void downloadLogs(QString program_id, QString environment_id, QString service, QString name, QString date, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString accept);
    void getEnvironment(QString program_id, QString environment_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    void getEnvironmentLogs(QString program_id, QString environment_id, qint32 days, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QList<QString> service, QList<QString> name);
    void getEnvironments(QString program_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString type);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIEnvironmentsApiHandler> handler;

    inline void writeResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
        socket->writeHeaders();
    }
};

}

#endif // OAI_OAIEnvironmentsApiRequest_H
