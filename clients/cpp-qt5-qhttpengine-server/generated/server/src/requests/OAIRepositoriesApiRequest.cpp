/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIRepositoriesApiRequest.h"

namespace OpenAPI {

OAIRepositoriesApiRequest::OAIRepositoriesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIRepositoriesApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIRepositoriesApiRequest::~OAIRepositoriesApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIRepositoriesApiRequest::~OAIRepositoriesApiRequest()";
}

QMap<QString, QString>
OAIRepositoriesApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIRepositoriesApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIRepositoriesApiRequest::getRawSocket(){
    return socket;
}


void OAIRepositoriesApiRequest::getRepositoriesRequest(const QString& program_idstr){
    qDebug() << "/api/program/{programId}/repositories";
    connect(this, &OAIRepositoriesApiRequest::getRepositories, handler.data(), &OAIRepositoriesApiHandler::getRepositories);

    
    QString program_id;
    fromStringValue(program_idstr, program_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    

    emit getRepositories(program_id, x_gw_ims_org_id, authorization, x_api_key);
}


void OAIRepositoriesApiRequest::getRepositoryRequest(const QString& program_idstr, const QString& repository_idstr){
    qDebug() << "/api/program/{programId}/repository/{repositoryId}";
    connect(this, &OAIRepositoriesApiRequest::getRepository, handler.data(), &OAIRepositoriesApiHandler::getRepository);

    
    QString program_id;
    fromStringValue(program_idstr, program_id);
        QString repository_id;
    fromStringValue(repository_idstr, repository_id);
    
    QString x_gw_ims_org_id;
    if(socket->headers().keys().contains("x_gw_ims_org_id")){
        fromStringValue(socket->queryString().value("x_gw_ims_org_id"), x_gw_ims_org_id);
    }
    
    QString authorization;
    if(socket->headers().keys().contains("authorization")){
        fromStringValue(socket->queryString().value("authorization"), authorization);
    }
    
    QString x_api_key;
    if(socket->headers().keys().contains("x_api_key")){
        fromStringValue(socket->queryString().value("x_api_key"), x_api_key);
    }
    

    emit getRepository(program_id, repository_id, x_gw_ims_org_id, authorization, x_api_key);
}



void OAIRepositoriesApiRequest::getRepositoriesResponse(const OAIRepositoryList& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRepositoriesApiRequest::getRepositoryResponse(const OAIRepository& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRepositoriesApiRequest::getRepositoriesError(const OAIRepositoryList& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRepositoriesApiRequest::getRepositoryError(const OAIRepository& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRepositoriesApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIRepositoriesApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
