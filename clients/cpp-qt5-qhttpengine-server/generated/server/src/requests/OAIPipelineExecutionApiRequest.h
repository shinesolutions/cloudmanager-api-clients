/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPipelineExecutionApiRequest_H
#define OAI_OAIPipelineExecutionApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIPipelineExecution.h"
#include "OAIPipelineExecutionListRepresentation.h"
#include "OAIPipelineExecutionStepState.h"
#include "OAIPipelineStepMetrics.h"
#include "OAIObject.h"
#include <QString>
#include "OAIPipelineExecutionApiHandler.h"

namespace OpenAPI {

class OAIPipelineExecutionApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIPipelineExecutionApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIPipelineExecutionApiHandler> handler);
    virtual ~OAIPipelineExecutionApiRequest();

    void advancePipelineExecutionRequest(const QString& program_id, const QString& pipeline_id, const QString& execution_id, const QString& phase_id, const QString& step_id);
    void cancelPipelineExecutionStepRequest(const QString& program_id, const QString& pipeline_id, const QString& execution_id, const QString& phase_id, const QString& step_id);
    void getCurrentExecutionRequest(const QString& program_id, const QString& pipeline_id);
    void getExecutionRequest(const QString& program_id, const QString& pipeline_id, const QString& execution_id);
    void getExecutionsRequest(const QString& program_id, const QString& pipeline_id);
    void getStepLogsRequest(const QString& program_id, const QString& pipeline_id, const QString& execution_id, const QString& phase_id, const QString& step_id);
    void startPipelineRequest(const QString& program_id, const QString& pipeline_id);
    void stepMetricRequest(const QString& program_id, const QString& pipeline_id, const QString& execution_id, const QString& phase_id, const QString& step_id);
    void stepStateRequest(const QString& program_id, const QString& pipeline_id, const QString& execution_id, const QString& phase_id, const QString& step_id);
    

    void advancePipelineExecutionResponse();
    void cancelPipelineExecutionStepResponse();
    void getCurrentExecutionResponse(const OAIPipelineExecution& res);
    void getExecutionResponse(const OAIPipelineExecution& res);
    void getExecutionsResponse(const OAIPipelineExecutionListRepresentation& res);
    void getStepLogsResponse();
    void startPipelineResponse();
    void stepMetricResponse(const OAIPipelineStepMetrics& res);
    void stepStateResponse(const OAIPipelineExecutionStepState& res);
    

    void advancePipelineExecutionError(QNetworkReply::NetworkError error_type, QString& error_str);
    void cancelPipelineExecutionStepError(QNetworkReply::NetworkError error_type, QString& error_str);
    void getCurrentExecutionError(const OAIPipelineExecution& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getExecutionError(const OAIPipelineExecution& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getExecutionsError(const OAIPipelineExecutionListRepresentation& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getStepLogsError(QNetworkReply::NetworkError error_type, QString& error_str);
    void startPipelineError(QNetworkReply::NetworkError error_type, QString& error_str);
    void stepMetricError(const OAIPipelineStepMetrics& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void stepStateError(const OAIPipelineExecutionStepState& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void advancePipelineExecution(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type, OAIObject body);
    void cancelPipelineExecutionStep(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type, OAIObject body);
    void getCurrentExecution(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    void getExecution(QString program_id, QString pipeline_id, QString execution_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    void getExecutions(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString start, qint32 limit);
    void getStepLogs(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString file, QString accept);
    void startPipeline(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type);
    void stepMetric(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    void stepState(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIPipelineExecutionApiHandler> handler;

    inline void writeResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
        socket->writeHeaders();
    }
};

}

#endif // OAI_OAIPipelineExecutionApiRequest_H
