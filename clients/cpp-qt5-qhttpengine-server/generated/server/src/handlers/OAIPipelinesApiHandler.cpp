/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIPipelinesApiHandler.h"
#include "OAIPipelinesApiRequest.h"

namespace OpenAPI {

OAIPipelinesApiHandler::OAIPipelinesApiHandler(){

}

OAIPipelinesApiHandler::~OAIPipelinesApiHandler(){

}

void OAIPipelinesApiHandler::deletePipeline(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key) {
    Q_UNUSED(program_id);
    Q_UNUSED(pipeline_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    auto reqObj = qobject_cast<OAIPipelinesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->deletePipelineResponse();
    }    
}
void OAIPipelinesApiHandler::getPipeline(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key) {
    Q_UNUSED(program_id);
    Q_UNUSED(pipeline_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    auto reqObj = qobject_cast<OAIPipelinesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIPipeline res;
        reqObj->getPipelineResponse(res);
    }    
}
void OAIPipelinesApiHandler::getPipelines(QString program_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key) {
    Q_UNUSED(program_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    auto reqObj = qobject_cast<OAIPipelinesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIPipelineList res;
        reqObj->getPipelinesResponse(res);
    }    
}
void OAIPipelinesApiHandler::patchPipeline(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type, OAIPipeline body) {
    Q_UNUSED(program_id);
    Q_UNUSED(pipeline_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    Q_UNUSED(content_type);
    Q_UNUSED(body);
    auto reqObj = qobject_cast<OAIPipelinesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIPipeline res;
        reqObj->patchPipelineResponse(res);
    }    
}


}
