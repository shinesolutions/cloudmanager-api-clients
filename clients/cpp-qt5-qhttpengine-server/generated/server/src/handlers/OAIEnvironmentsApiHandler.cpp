/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIEnvironmentsApiHandler.h"
#include "OAIEnvironmentsApiRequest.h"

namespace OpenAPI {

OAIEnvironmentsApiHandler::OAIEnvironmentsApiHandler(){

}

OAIEnvironmentsApiHandler::~OAIEnvironmentsApiHandler(){

}

void OAIEnvironmentsApiHandler::deleteEnvironment(QString program_id, QString environment_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key) {
    Q_UNUSED(program_id);
    Q_UNUSED(environment_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    auto reqObj = qobject_cast<OAIEnvironmentsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIEnvironment res;
        reqObj->deleteEnvironmentResponse(res);
    }    
}
void OAIEnvironmentsApiHandler::downloadLogs(QString program_id, QString environment_id, QString service, QString name, QString date, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString accept) {
    Q_UNUSED(program_id);
    Q_UNUSED(environment_id);
    Q_UNUSED(service);
    Q_UNUSED(name);
    Q_UNUSED(date);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    Q_UNUSED(accept);
    auto reqObj = qobject_cast<OAIEnvironmentsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->downloadLogsResponse();
    }    
}
void OAIEnvironmentsApiHandler::getEnvironment(QString program_id, QString environment_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key) {
    Q_UNUSED(program_id);
    Q_UNUSED(environment_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    auto reqObj = qobject_cast<OAIEnvironmentsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIEnvironment res;
        reqObj->getEnvironmentResponse(res);
    }    
}
void OAIEnvironmentsApiHandler::getEnvironmentLogs(QString program_id, QString environment_id, qint32 days, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QList<QString> service, QList<QString> name) {
    Q_UNUSED(program_id);
    Q_UNUSED(environment_id);
    Q_UNUSED(days);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    Q_UNUSED(service);
    Q_UNUSED(name);
    auto reqObj = qobject_cast<OAIEnvironmentsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIEnvironmentLogs res;
        reqObj->getEnvironmentLogsResponse(res);
    }    
}
void OAIEnvironmentsApiHandler::getEnvironments(QString program_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString type) {
    Q_UNUSED(program_id);
    Q_UNUSED(x_gw_ims_org_id);
    Q_UNUSED(authorization);
    Q_UNUSED(x_api_key);
    Q_UNUSED(type);
    auto reqObj = qobject_cast<OAIEnvironmentsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIEnvironmentList res;
        reqObj->getEnvironmentsResponse(res);
    }    
}


}
