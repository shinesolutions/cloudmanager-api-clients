/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_APIROUTER_H
#define OAI_APIROUTER_H

#include <functional>
#include <QObject>
#include <QStringList>
#include <QSharedPointer>
#include <QList>
#include <QMultiMap>
#include <QRegularExpression>

#include <qhttpengine/socket.h>
#include <qhttpengine/handler.h>
#include <qhttpengine/qobjecthandler.h>

#include "OAIBranchesApiHandler.h"
#include "OAIEnvironmentsApiHandler.h"
#include "OAIPipelineExecutionApiHandler.h"
#include "OAIPipelinesApiHandler.h"
#include "OAIProgramsApiHandler.h"
#include "OAIRepositoriesApiHandler.h"
#include "OAIVariablesApiHandler.h"


namespace OpenAPI {

class OAIApiRequestHandler : public  QHttpEngine::QObjectHandler
{
    Q_OBJECT
signals:
    void requestReceived(QHttpEngine::Socket *socket);

protected:
    virtual void process(QHttpEngine::Socket *socket, const QString &path){
        Q_UNUSED(path);
        emit requestReceived(socket);
    }
};

class OAIApiRouter : public QObject
{
    Q_OBJECT
public:
    OAIApiRouter();
    virtual ~OAIApiRouter();

    void setUpRoutes();
    void processRequest(QHttpEngine::Socket *socket);
    
    void setOAIBranchesApiHandler(QSharedPointer<OAIBranchesApiHandler> handler);
    void setOAIEnvironmentsApiHandler(QSharedPointer<OAIEnvironmentsApiHandler> handler);
    void setOAIPipelineExecutionApiHandler(QSharedPointer<OAIPipelineExecutionApiHandler> handler);
    void setOAIPipelinesApiHandler(QSharedPointer<OAIPipelinesApiHandler> handler);
    void setOAIProgramsApiHandler(QSharedPointer<OAIProgramsApiHandler> handler);
    void setOAIRepositoriesApiHandler(QSharedPointer<OAIRepositoriesApiHandler> handler);
    void setOAIVariablesApiHandler(QSharedPointer<OAIVariablesApiHandler> handler);
private:
    QMap<QString, std::function<void(QHttpEngine::Socket *)>> Routes;
    QMultiMap<QString, std::function<void(QHttpEngine::Socket *)>> RoutesWithPathParam;

    bool handleRequest(QHttpEngine::Socket *socket);
    bool handleRequestAndExtractPathParam(QHttpEngine::Socket *socket);

    
    QSharedPointer<OAIBranchesApiHandler> mOAIBranchesApiHandler;
    QSharedPointer<OAIEnvironmentsApiHandler> mOAIEnvironmentsApiHandler;
    QSharedPointer<OAIPipelineExecutionApiHandler> mOAIPipelineExecutionApiHandler;
    QSharedPointer<OAIPipelinesApiHandler> mOAIPipelinesApiHandler;
    QSharedPointer<OAIProgramsApiHandler> mOAIProgramsApiHandler;
    QSharedPointer<OAIRepositoriesApiHandler> mOAIRepositoriesApiHandler;
    QSharedPointer<OAIVariablesApiHandler> mOAIVariablesApiHandler;
protected:
    // override this method to provide custom class derived from ApiHandler classes
    virtual void createApiHandlers();

private :
    inline QString fromQHttpEngineMethod(QHttpEngine::Socket::Method method){
        switch( method ){
            case QHttpEngine::Socket::Method::OPTIONS:
                return QStringLiteral("OPTIONS");
            case QHttpEngine::Socket::Method::GET:
                return QStringLiteral("GET");
            case QHttpEngine::Socket::Method::HEAD:
                return QStringLiteral("HEAD");
            case QHttpEngine::Socket::Method::POST:
                return QStringLiteral("POST");
            case QHttpEngine::Socket::Method::PUT:
                return QStringLiteral("PUT");
            case QHttpEngine::Socket::Method::DELETE:
                return QStringLiteral("DELETE");
            case QHttpEngine::Socket::Method::TRACE:
                return QStringLiteral("TRACE");
            case QHttpEngine::Socket::Method::CONNECT:
                return QStringLiteral("CONNECT");
        }
        return QStringLiteral("");
    }
    
    inline QRegularExpressionMatch getRequestMatch(QString serverTemplatePath, QString requestPath){
        QRegularExpression parExpr( R"(\{([^\/\\s]+)\})" );
        serverTemplatePath.replace( parExpr, R"((?<\1>[^\/\s]+))" );
        serverTemplatePath.append("[\\/]?$");
        QRegularExpression pathExpr( serverTemplatePath );
        return pathExpr.match( requestPath );
    }

};


}

#endif // OAI_APIROUTER_H