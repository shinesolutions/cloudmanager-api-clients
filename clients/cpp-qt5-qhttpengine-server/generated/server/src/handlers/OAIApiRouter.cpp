/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAIApiRouter.h"
#include "OAIBranchesApiRequest.h"
#include "OAIEnvironmentsApiRequest.h"
#include "OAIPipelineExecutionApiRequest.h"
#include "OAIPipelinesApiRequest.h"
#include "OAIProgramsApiRequest.h"
#include "OAIRepositoriesApiRequest.h"
#include "OAIVariablesApiRequest.h"


namespace OpenAPI {

OAIApiRouter::OAIApiRouter() {
    createApiHandlers();
}

OAIApiRouter::~OAIApiRouter(){

}

void OAIApiRouter::createApiHandlers() { 
    mOAIBranchesApiHandler = QSharedPointer<OAIBranchesApiHandler>::create();
    mOAIEnvironmentsApiHandler = QSharedPointer<OAIEnvironmentsApiHandler>::create();
    mOAIPipelineExecutionApiHandler = QSharedPointer<OAIPipelineExecutionApiHandler>::create();
    mOAIPipelinesApiHandler = QSharedPointer<OAIPipelinesApiHandler>::create();
    mOAIProgramsApiHandler = QSharedPointer<OAIProgramsApiHandler>::create();
    mOAIRepositoriesApiHandler = QSharedPointer<OAIRepositoriesApiHandler>::create();
    mOAIVariablesApiHandler = QSharedPointer<OAIVariablesApiHandler>::create();
}


void OAIApiRouter::setOAIBranchesApiHandler(QSharedPointer<OAIBranchesApiHandler> handler){
    mOAIBranchesApiHandler = handler;
}
void OAIApiRouter::setOAIEnvironmentsApiHandler(QSharedPointer<OAIEnvironmentsApiHandler> handler){
    mOAIEnvironmentsApiHandler = handler;
}
void OAIApiRouter::setOAIPipelineExecutionApiHandler(QSharedPointer<OAIPipelineExecutionApiHandler> handler){
    mOAIPipelineExecutionApiHandler = handler;
}
void OAIApiRouter::setOAIPipelinesApiHandler(QSharedPointer<OAIPipelinesApiHandler> handler){
    mOAIPipelinesApiHandler = handler;
}
void OAIApiRouter::setOAIProgramsApiHandler(QSharedPointer<OAIProgramsApiHandler> handler){
    mOAIProgramsApiHandler = handler;
}
void OAIApiRouter::setOAIRepositoriesApiHandler(QSharedPointer<OAIRepositoriesApiHandler> handler){
    mOAIRepositoriesApiHandler = handler;
}
void OAIApiRouter::setOAIVariablesApiHandler(QSharedPointer<OAIVariablesApiHandler> handler){
    mOAIVariablesApiHandler = handler;
}

void OAIApiRouter::setUpRoutes() {
    
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/programs").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIProgramsApiRequest(socket, mOAIProgramsApiHandler);
            reqObj->getProgramsRequest();
    });
}

void OAIApiRouter::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return;
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
}

bool OAIApiRouter::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAIApiRouter::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/repository/{repositoryId}/branches").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString repositoryId = match.captured(QString("repositoryId").toLower());
                auto reqObj = new OAIBranchesApiRequest(socket, mOAIBranchesApiHandler);
                reqObj->getBranchesRequest(programId, repositoryId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/program/{programId}/environment/{environmentId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString environmentId = match.captured(QString("environmentId").toLower());
                auto reqObj = new OAIEnvironmentsApiRequest(socket, mOAIEnvironmentsApiHandler);
                reqObj->deleteEnvironmentRequest(programId, environmentId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/environment/{environmentId}/logs/download").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString environmentId = match.captured(QString("environmentId").toLower());
                auto reqObj = new OAIEnvironmentsApiRequest(socket, mOAIEnvironmentsApiHandler);
                reqObj->downloadLogsRequest(programId, environmentId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/environment/{environmentId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString environmentId = match.captured(QString("environmentId").toLower());
                auto reqObj = new OAIEnvironmentsApiRequest(socket, mOAIEnvironmentsApiHandler);
                reqObj->getEnvironmentRequest(programId, environmentId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/environment/{environmentId}/logs").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString environmentId = match.captured(QString("environmentId").toLower());
                auto reqObj = new OAIEnvironmentsApiRequest(socket, mOAIEnvironmentsApiHandler);
                reqObj->getEnvironmentLogsRequest(programId, environmentId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/environments").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                auto reqObj = new OAIEnvironmentsApiRequest(socket, mOAIEnvironmentsApiHandler);
                reqObj->getEnvironmentsRequest(programId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                QString executionId = match.captured(QString("executionId").toLower());
                QString phaseId = match.captured(QString("phaseId").toLower());
                QString stepId = match.captured(QString("stepId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->advancePipelineExecutionRequest(programId, pipelineId, executionId, phaseId, stepId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                QString executionId = match.captured(QString("executionId").toLower());
                QString phaseId = match.captured(QString("phaseId").toLower());
                QString stepId = match.captured(QString("stepId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->cancelPipelineExecutionStepRequest(programId, pipelineId, executionId, phaseId, stepId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}/execution").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->getCurrentExecutionRequest(programId, pipelineId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                QString executionId = match.captured(QString("executionId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->getExecutionRequest(programId, pipelineId, executionId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}/executions").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->getExecutionsRequest(programId, pipelineId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                QString executionId = match.captured(QString("executionId").toLower());
                QString phaseId = match.captured(QString("phaseId").toLower());
                QString stepId = match.captured(QString("stepId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->getStepLogsRequest(programId, pipelineId, executionId, phaseId, stepId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/api/program/{programId}/pipeline/{pipelineId}/execution").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->startPipelineRequest(programId, pipelineId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                QString executionId = match.captured(QString("executionId").toLower());
                QString phaseId = match.captured(QString("phaseId").toLower());
                QString stepId = match.captured(QString("stepId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->stepMetricRequest(programId, pipelineId, executionId, phaseId, stepId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                QString executionId = match.captured(QString("executionId").toLower());
                QString phaseId = match.captured(QString("phaseId").toLower());
                QString stepId = match.captured(QString("stepId").toLower());
                auto reqObj = new OAIPipelineExecutionApiRequest(socket, mOAIPipelineExecutionApiHandler);
                reqObj->stepStateRequest(programId, pipelineId, executionId, phaseId, stepId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/program/{programId}/pipeline/{pipelineId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                auto reqObj = new OAIPipelinesApiRequest(socket, mOAIPipelinesApiHandler);
                reqObj->deletePipelineRequest(programId, pipelineId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipeline/{pipelineId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                auto reqObj = new OAIPipelinesApiRequest(socket, mOAIPipelinesApiHandler);
                reqObj->getPipelineRequest(programId, pipelineId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/pipelines").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                auto reqObj = new OAIPipelinesApiRequest(socket, mOAIPipelinesApiHandler);
                reqObj->getPipelinesRequest(programId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/program/{programId}/pipeline/{pipelineId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString pipelineId = match.captured(QString("pipelineId").toLower());
                auto reqObj = new OAIPipelinesApiRequest(socket, mOAIPipelinesApiHandler);
                reqObj->patchPipelineRequest(programId, pipelineId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/program/{programId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                auto reqObj = new OAIProgramsApiRequest(socket, mOAIProgramsApiHandler);
                reqObj->deleteProgramRequest(programId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                auto reqObj = new OAIProgramsApiRequest(socket, mOAIProgramsApiHandler);
                reqObj->getProgramRequest(programId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/repositories").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                auto reqObj = new OAIRepositoriesApiRequest(socket, mOAIRepositoriesApiHandler);
                reqObj->getRepositoriesRequest(programId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/repository/{repositoryId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString repositoryId = match.captured(QString("repositoryId").toLower());
                auto reqObj = new OAIRepositoriesApiRequest(socket, mOAIRepositoriesApiHandler);
                reqObj->getRepositoryRequest(programId, repositoryId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/program/{programId}/environment/{environmentId}/variables").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString environmentId = match.captured(QString("environmentId").toLower());
                auto reqObj = new OAIVariablesApiRequest(socket, mOAIVariablesApiHandler);
                reqObj->getEnvironmentVariablesRequest(programId, environmentId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/program/{programId}/environment/{environmentId}/variables").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString programId = match.captured(QString("programId").toLower());
                QString environmentId = match.captured(QString("environmentId").toLower());
                auto reqObj = new OAIVariablesApiRequest(socket, mOAIVariablesApiHandler);
                reqObj->patchEnvironmentVariablesRequest(programId, environmentId);
                return true;
            }
        }
    }
    return false;
}

}
