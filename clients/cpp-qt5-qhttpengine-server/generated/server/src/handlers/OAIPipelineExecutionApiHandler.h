/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPipelineExecutionApiHandler_H
#define OAI_OAIPipelineExecutionApiHandler_H

#include <QObject>

#include "OAIPipelineExecution.h"
#include "OAIPipelineExecutionListRepresentation.h"
#include "OAIPipelineExecutionStepState.h"
#include "OAIPipelineStepMetrics.h"
#include "OAIObject.h"
#include <QString>

namespace OpenAPI {

class OAIPipelineExecutionApiHandler : public QObject
{
    Q_OBJECT
    
public:
    OAIPipelineExecutionApiHandler();
    virtual ~OAIPipelineExecutionApiHandler();


public slots:
    virtual void advancePipelineExecution(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type, OAIObject body);
    virtual void cancelPipelineExecutionStep(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type, OAIObject body);
    virtual void getCurrentExecution(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    virtual void getExecution(QString program_id, QString pipeline_id, QString execution_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    virtual void getExecutions(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString start, qint32 limit);
    virtual void getStepLogs(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString file, QString accept);
    virtual void startPipeline(QString program_id, QString pipeline_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key, QString content_type);
    virtual void stepMetric(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    virtual void stepState(QString program_id, QString pipeline_id, QString execution_id, QString phase_id, QString step_id, QString x_gw_ims_org_id, QString authorization, QString x_api_key);
    

};

}

#endif // OAI_OAIPipelineExecutionApiHandler_H
