/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_override_isSet = false;
    m_override_isValid = false;

    m_actual_value_isSet = false;
    m_actual_value_isValid = false;

    m_expected_value_isSet = false;
    m_expected_value_isValid = false;

    m_comparator_isSet = false;
    m_comparator_isValid = false;

    m_kpi_isSet = false;
    m_kpi_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_override_isValid = ::OpenAPI::fromJsonValue(override, json[QString("override")]);
    m_override_isSet = !json[QString("override")].isNull() && m_override_isValid;

    m_actual_value_isValid = ::OpenAPI::fromJsonValue(actual_value, json[QString("actualValue")]);
    m_actual_value_isSet = !json[QString("actualValue")].isNull() && m_actual_value_isValid;

    m_expected_value_isValid = ::OpenAPI::fromJsonValue(expected_value, json[QString("expectedValue")]);
    m_expected_value_isSet = !json[QString("expectedValue")].isNull() && m_expected_value_isValid;

    m_comparator_isValid = ::OpenAPI::fromJsonValue(comparator, json[QString("comparator")]);
    m_comparator_isSet = !json[QString("comparator")].isNull() && m_comparator_isValid;

    m_kpi_isValid = ::OpenAPI::fromJsonValue(kpi, json[QString("kpi")]);
    m_kpi_isSet = !json[QString("kpi")].isNull() && m_kpi_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(severity));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(passed));
    }
    if (m_override_isSet) {
        obj.insert(QString("override"), ::OpenAPI::toJsonValue(override));
    }
    if (m_actual_value_isSet) {
        obj.insert(QString("actualValue"), ::OpenAPI::toJsonValue(actual_value));
    }
    if (m_expected_value_isSet) {
        obj.insert(QString("expectedValue"), ::OpenAPI::toJsonValue(expected_value));
    }
    if (m_comparator_isSet) {
        obj.insert(QString("comparator"), ::OpenAPI::toJsonValue(comparator));
    }
    if (m_kpi_isSet) {
        obj.insert(QString("kpi"), ::OpenAPI::toJsonValue(kpi));
    }
    return obj;
}

QString OAIMetric::getId() const {
    return id;
}
void OAIMetric::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString OAIMetric::getSeverity() const {
    return severity;
}
void OAIMetric::setSeverity(const QString &severity) {
    this->severity = severity;
    this->m_severity_isSet = true;
}

bool OAIMetric::isPassed() const {
    return passed;
}
void OAIMetric::setPassed(const bool &passed) {
    this->passed = passed;
    this->m_passed_isSet = true;
}

bool OAIMetric::isOverride() const {
    return override;
}
void OAIMetric::setOverride(const bool &override) {
    this->override = override;
    this->m_override_isSet = true;
}

QString OAIMetric::getActualValue() const {
    return actual_value;
}
void OAIMetric::setActualValue(const QString &actual_value) {
    this->actual_value = actual_value;
    this->m_actual_value_isSet = true;
}

QString OAIMetric::getExpectedValue() const {
    return expected_value;
}
void OAIMetric::setExpectedValue(const QString &expected_value) {
    this->expected_value = expected_value;
    this->m_expected_value_isSet = true;
}

QString OAIMetric::getComparator() const {
    return comparator;
}
void OAIMetric::setComparator(const QString &comparator) {
    this->comparator = comparator;
    this->m_comparator_isSet = true;
}

QString OAIMetric::getKpi() const {
    return kpi;
}
void OAIMetric::setKpi(const QString &kpi) {
    this->kpi = kpi;
    this->m_kpi_isSet = true;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpi_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
