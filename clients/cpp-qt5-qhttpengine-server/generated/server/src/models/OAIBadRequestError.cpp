/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBadRequestError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBadRequestError::OAIBadRequestError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBadRequestError::OAIBadRequestError() {
    this->initializeModel();
}

OAIBadRequestError::~OAIBadRequestError() {}

void OAIBadRequestError::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_missing_params_isSet = false;
    m_missing_params_isValid = false;

    m_invalid_params_isSet = false;
    m_invalid_params_isValid = false;
}

void OAIBadRequestError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBadRequestError::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_missing_params_isValid = ::OpenAPI::fromJsonValue(missing_params, json[QString("missingParams")]);
    m_missing_params_isSet = !json[QString("missingParams")].isNull() && m_missing_params_isValid;

    m_invalid_params_isValid = ::OpenAPI::fromJsonValue(invalid_params, json[QString("invalidParams")]);
    m_invalid_params_isSet = !json[QString("invalidParams")].isNull() && m_invalid_params_isValid;
}

QString OAIBadRequestError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBadRequestError::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (missing_params.size() > 0) {
        obj.insert(QString("missingParams"), ::OpenAPI::toJsonValue(missing_params));
    }
    if (invalid_params.size() > 0) {
        obj.insert(QString("invalidParams"), ::OpenAPI::toJsonValue(invalid_params));
    }
    return obj;
}

qint32 OAIBadRequestError::getStatus() const {
    return status;
}
void OAIBadRequestError::setStatus(const qint32 &status) {
    this->status = status;
    this->m_status_isSet = true;
}

QString OAIBadRequestError::getType() const {
    return type;
}
void OAIBadRequestError::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString OAIBadRequestError::getTitle() const {
    return title;
}
void OAIBadRequestError::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

QList<OAIMissingParameter> OAIBadRequestError::getMissingParams() const {
    return missing_params;
}
void OAIBadRequestError::setMissingParams(const QList<OAIMissingParameter> &missing_params) {
    this->missing_params = missing_params;
    this->m_missing_params_isSet = true;
}

QList<OAIInvalidParameter> OAIBadRequestError::getInvalidParams() const {
    return invalid_params;
}
void OAIBadRequestError::setInvalidParams(const QList<OAIInvalidParameter> &invalid_params) {
    this->invalid_params = invalid_params;
    this->m_invalid_params_isSet = true;
}

bool OAIBadRequestError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (missing_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (invalid_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBadRequestError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
