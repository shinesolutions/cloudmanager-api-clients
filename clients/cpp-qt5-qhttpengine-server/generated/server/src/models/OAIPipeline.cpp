/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline::OAIPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline::OAIPipeline() {
    this->initializeModel();
}

OAIPipeline::~OAIPipeline() {}

void OAIPipeline::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_program_id_isSet = false;
    m_program_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_last_started_at_isSet = false;
    m_last_started_at_isValid = false;

    m_last_finished_at_isSet = false;
    m_last_finished_at_isValid = false;

    m_phases_isSet = false;
    m_phases_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;
}

void OAIPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_program_id_isValid = ::OpenAPI::fromJsonValue(program_id, json[QString("programId")]);
    m_program_id_isSet = !json[QString("programId")].isNull() && m_program_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_last_started_at_isValid = ::OpenAPI::fromJsonValue(last_started_at, json[QString("lastStartedAt")]);
    m_last_started_at_isSet = !json[QString("lastStartedAt")].isNull() && m_last_started_at_isValid;

    m_last_finished_at_isValid = ::OpenAPI::fromJsonValue(last_finished_at, json[QString("lastFinishedAt")]);
    m_last_finished_at_isSet = !json[QString("lastFinishedAt")].isNull() && m_last_finished_at_isValid;

    m_phases_isValid = ::OpenAPI::fromJsonValue(phases, json[QString("phases")]);
    m_phases_isSet = !json[QString("phases")].isNull() && m_phases_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(_links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;
}

QString OAIPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_program_id_isSet) {
        obj.insert(QString("programId"), ::OpenAPI::toJsonValue(program_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(trigger));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_last_started_at_isSet) {
        obj.insert(QString("lastStartedAt"), ::OpenAPI::toJsonValue(last_started_at));
    }
    if (m_last_finished_at_isSet) {
        obj.insert(QString("lastFinishedAt"), ::OpenAPI::toJsonValue(last_finished_at));
    }
    if (phases.size() > 0) {
        obj.insert(QString("phases"), ::OpenAPI::toJsonValue(phases));
    }
    if (_links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(_links));
    }
    return obj;
}

QString OAIPipeline::getId() const {
    return id;
}
void OAIPipeline::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString OAIPipeline::getProgramId() const {
    return program_id;
}
void OAIPipeline::setProgramId(const QString &program_id) {
    this->program_id = program_id;
    this->m_program_id_isSet = true;
}

QString OAIPipeline::getName() const {
    return name;
}
void OAIPipeline::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString OAIPipeline::getTrigger() const {
    return trigger;
}
void OAIPipeline::setTrigger(const QString &trigger) {
    this->trigger = trigger;
    this->m_trigger_isSet = true;
}

QString OAIPipeline::getStatus() const {
    return status;
}
void OAIPipeline::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}

QDateTime OAIPipeline::getCreatedAt() const {
    return created_at;
}
void OAIPipeline::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

QDateTime OAIPipeline::getUpdatedAt() const {
    return updated_at;
}
void OAIPipeline::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

QDateTime OAIPipeline::getLastStartedAt() const {
    return last_started_at;
}
void OAIPipeline::setLastStartedAt(const QDateTime &last_started_at) {
    this->last_started_at = last_started_at;
    this->m_last_started_at_isSet = true;
}

QDateTime OAIPipeline::getLastFinishedAt() const {
    return last_finished_at;
}
void OAIPipeline::setLastFinishedAt(const QDateTime &last_finished_at) {
    this->last_finished_at = last_finished_at;
    this->m_last_finished_at_isSet = true;
}

QList<OAIPipelinePhase> OAIPipeline::getPhases() const {
    return phases;
}
void OAIPipeline::setPhases(const QList<OAIPipelinePhase> &phases) {
    this->phases = phases;
    this->m_phases_isSet = true;
}

OAIPipeline__links OAIPipeline::getLinks() const {
    return _links;
}
void OAIPipeline::setLinks(const OAIPipeline__links &_links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

bool OAIPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (phases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (_links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_phases_isValid && true;
}

} // namespace OpenAPI
