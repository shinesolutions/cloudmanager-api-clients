/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline__links::OAIPipeline__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline__links::OAIPipeline__links() {
    this->initializeModel();
}

OAIPipeline__links::~OAIPipeline__links() {}

void OAIPipeline__links::initializeModel() {

    m_http__ns_adobe_com_adobecloud_rel_program_isSet = false;
    m_http__ns_adobe_com_adobecloud_rel_program_isValid = false;

    m_http__ns_adobe_com_adobecloud_rel_execution_isSet = false;
    m_http__ns_adobe_com_adobecloud_rel_execution_isValid = false;

    m_http__ns_adobe_com_adobecloud_rel_executions_isSet = false;
    m_http__ns_adobe_com_adobecloud_rel_executions_isValid = false;

    m_http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution_isSet = false;
    m_http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIPipeline__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline__links::fromJsonObject(QJsonObject json) {

    m_http__ns_adobe_com_adobecloud_rel_program_isValid = ::OpenAPI::fromJsonValue(http__ns_adobe_com_adobecloud_rel_program, json[QString("http://ns.adobe.com/adobecloud/rel/program")]);
    m_http__ns_adobe_com_adobecloud_rel_program_isSet = !json[QString("http://ns.adobe.com/adobecloud/rel/program")].isNull() && m_http__ns_adobe_com_adobecloud_rel_program_isValid;

    m_http__ns_adobe_com_adobecloud_rel_execution_isValid = ::OpenAPI::fromJsonValue(http__ns_adobe_com_adobecloud_rel_execution, json[QString("http://ns.adobe.com/adobecloud/rel/execution")]);
    m_http__ns_adobe_com_adobecloud_rel_execution_isSet = !json[QString("http://ns.adobe.com/adobecloud/rel/execution")].isNull() && m_http__ns_adobe_com_adobecloud_rel_execution_isValid;

    m_http__ns_adobe_com_adobecloud_rel_executions_isValid = ::OpenAPI::fromJsonValue(http__ns_adobe_com_adobecloud_rel_executions, json[QString("http://ns.adobe.com/adobecloud/rel/executions")]);
    m_http__ns_adobe_com_adobecloud_rel_executions_isSet = !json[QString("http://ns.adobe.com/adobecloud/rel/executions")].isNull() && m_http__ns_adobe_com_adobecloud_rel_executions_isValid;

    m_http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution_isValid = ::OpenAPI::fromJsonValue(http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution, json[QString("http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution")]);
    m_http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution_isSet = !json[QString("http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution")].isNull() && m_http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIPipeline__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline__links::asJsonObject() const {
    QJsonObject obj;
    if (http__ns_adobe_com_adobecloud_rel_program.isSet()) {
        obj.insert(QString("http://ns.adobe.com/adobecloud/rel/program"), ::OpenAPI::toJsonValue(http__ns_adobe_com_adobecloud_rel_program));
    }
    if (http__ns_adobe_com_adobecloud_rel_execution.isSet()) {
        obj.insert(QString("http://ns.adobe.com/adobecloud/rel/execution"), ::OpenAPI::toJsonValue(http__ns_adobe_com_adobecloud_rel_execution));
    }
    if (http__ns_adobe_com_adobecloud_rel_executions.isSet()) {
        obj.insert(QString("http://ns.adobe.com/adobecloud/rel/executions"), ::OpenAPI::toJsonValue(http__ns_adobe_com_adobecloud_rel_executions));
    }
    if (http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution.isSet()) {
        obj.insert(QString("http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution"), ::OpenAPI::toJsonValue(http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution));
    }
    if (self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(self));
    }
    return obj;
}

OAIHalLink OAIPipeline__links::getHttpNsAdobeComAdobecloudRelProgram() const {
    return http__ns_adobe_com_adobecloud_rel_program;
}
void OAIPipeline__links::setHttpNsAdobeComAdobecloudRelProgram(const OAIHalLink &http__ns_adobe_com_adobecloud_rel_program) {
    this->http__ns_adobe_com_adobecloud_rel_program = http__ns_adobe_com_adobecloud_rel_program;
    this->m_http__ns_adobe_com_adobecloud_rel_program_isSet = true;
}

OAIHalLink OAIPipeline__links::getHttpNsAdobeComAdobecloudRelExecution() const {
    return http__ns_adobe_com_adobecloud_rel_execution;
}
void OAIPipeline__links::setHttpNsAdobeComAdobecloudRelExecution(const OAIHalLink &http__ns_adobe_com_adobecloud_rel_execution) {
    this->http__ns_adobe_com_adobecloud_rel_execution = http__ns_adobe_com_adobecloud_rel_execution;
    this->m_http__ns_adobe_com_adobecloud_rel_execution_isSet = true;
}

OAIHalLink OAIPipeline__links::getHttpNsAdobeComAdobecloudRelExecutions() const {
    return http__ns_adobe_com_adobecloud_rel_executions;
}
void OAIPipeline__links::setHttpNsAdobeComAdobecloudRelExecutions(const OAIHalLink &http__ns_adobe_com_adobecloud_rel_executions) {
    this->http__ns_adobe_com_adobecloud_rel_executions = http__ns_adobe_com_adobecloud_rel_executions;
    this->m_http__ns_adobe_com_adobecloud_rel_executions_isSet = true;
}

OAIHalLink OAIPipeline__links::getHttpNsAdobeComAdobecloudRelRollbackLastSuccessfulExecution() const {
    return http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution;
}
void OAIPipeline__links::setHttpNsAdobeComAdobecloudRelRollbackLastSuccessfulExecution(const OAIHalLink &http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution) {
    this->http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution = http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution;
    this->m_http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution_isSet = true;
}

OAIHalLink OAIPipeline__links::getSelf() const {
    return self;
}
void OAIPipeline__links::setSelf(const OAIHalLink &self) {
    this->self = self;
    this->m_self_isSet = true;
}

bool OAIPipeline__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (http__ns_adobe_com_adobecloud_rel_program.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (http__ns_adobe_com_adobecloud_rel_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (http__ns_adobe_com_adobecloud_rel_executions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (http__ns_adobe_com_adobecloud_rel_rollback_last_successful_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
