/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelinePhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelinePhase::OAIPipelinePhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelinePhase::OAIPipelinePhase() {
    this->initializeModel();
}

OAIPipelinePhase::~OAIPipelinePhase() {}

void OAIPipelinePhase::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_repository_id_isSet = false;
    m_repository_id_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;
}

void OAIPipelinePhase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelinePhase::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_repository_id_isValid = ::OpenAPI::fromJsonValue(repository_id, json[QString("repositoryId")]);
    m_repository_id_isSet = !json[QString("repositoryId")].isNull() && m_repository_id_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;
}

QString OAIPipelinePhase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelinePhase::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_repository_id_isSet) {
        obj.insert(QString("repositoryId"), ::OpenAPI::toJsonValue(repository_id));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(branch));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(environment_id));
    }
    return obj;
}

QString OAIPipelinePhase::getName() const {
    return name;
}
void OAIPipelinePhase::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString OAIPipelinePhase::getType() const {
    return type;
}
void OAIPipelinePhase::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString OAIPipelinePhase::getRepositoryId() const {
    return repository_id;
}
void OAIPipelinePhase::setRepositoryId(const QString &repository_id) {
    this->repository_id = repository_id;
    this->m_repository_id_isSet = true;
}

QString OAIPipelinePhase::getBranch() const {
    return branch;
}
void OAIPipelinePhase::setBranch(const QString &branch) {
    this->branch = branch;
    this->m_branch_isSet = true;
}

QString OAIPipelinePhase::getEnvironmentId() const {
    return environment_id;
}
void OAIPipelinePhase::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIPipelinePhase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelinePhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
