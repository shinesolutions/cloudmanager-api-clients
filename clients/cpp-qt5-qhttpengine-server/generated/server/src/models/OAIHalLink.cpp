/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHalLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHalLink::OAIHalLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHalLink::OAIHalLink() {
    this->initializeModel();
}

OAIHalLink::~OAIHalLink() {}

void OAIHalLink::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_templated_isSet = false;
    m_templated_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_deprecation_isSet = false;
    m_deprecation_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_hreflang_isSet = false;
    m_hreflang_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIHalLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHalLink::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_templated_isValid = ::OpenAPI::fromJsonValue(templated, json[QString("templated")]);
    m_templated_isSet = !json[QString("templated")].isNull() && m_templated_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_deprecation_isValid = ::OpenAPI::fromJsonValue(deprecation, json[QString("deprecation")]);
    m_deprecation_isSet = !json[QString("deprecation")].isNull() && m_deprecation_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_hreflang_isValid = ::OpenAPI::fromJsonValue(hreflang, json[QString("hreflang")]);
    m_hreflang_isSet = !json[QString("hreflang")].isNull() && m_hreflang_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIHalLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHalLink::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(href));
    }
    if (m_templated_isSet) {
        obj.insert(QString("templated"), ::OpenAPI::toJsonValue(templated));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_deprecation_isSet) {
        obj.insert(QString("deprecation"), ::OpenAPI::toJsonValue(deprecation));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(profile));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_hreflang_isSet) {
        obj.insert(QString("hreflang"), ::OpenAPI::toJsonValue(hreflang));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    return obj;
}

QString OAIHalLink::getHref() const {
    return href;
}
void OAIHalLink::setHref(const QString &href) {
    this->href = href;
    this->m_href_isSet = true;
}

bool OAIHalLink::isTemplated() const {
    return templated;
}
void OAIHalLink::setTemplated(const bool &templated) {
    this->templated = templated;
    this->m_templated_isSet = true;
}

QString OAIHalLink::getType() const {
    return type;
}
void OAIHalLink::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

QString OAIHalLink::getDeprecation() const {
    return deprecation;
}
void OAIHalLink::setDeprecation(const QString &deprecation) {
    this->deprecation = deprecation;
    this->m_deprecation_isSet = true;
}

QString OAIHalLink::getProfile() const {
    return profile;
}
void OAIHalLink::setProfile(const QString &profile) {
    this->profile = profile;
    this->m_profile_isSet = true;
}

QString OAIHalLink::getTitle() const {
    return title;
}
void OAIHalLink::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

QString OAIHalLink::getHreflang() const {
    return hreflang;
}
void OAIHalLink::setHreflang(const QString &hreflang) {
    this->hreflang = hreflang;
    this->m_hreflang_isSet = true;
}

QString OAIHalLink::getName() const {
    return name;
}
void OAIHalLink::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIHalLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_templated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hreflang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHalLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
