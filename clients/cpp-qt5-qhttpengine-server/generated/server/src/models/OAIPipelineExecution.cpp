/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineExecution::OAIPipelineExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineExecution::OAIPipelineExecution() {
    this->initializeModel();
}

OAIPipelineExecution::~OAIPipelineExecution() {}

void OAIPipelineExecution::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_program_id_isSet = false;
    m_program_id_isValid = false;

    m_pipeline_id_isSet = false;
    m_pipeline_id_isValid = false;

    m_artifacts_version_isSet = false;
    m_artifacts_version_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;
}

void OAIPipelineExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineExecution::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_program_id_isValid = ::OpenAPI::fromJsonValue(program_id, json[QString("programId")]);
    m_program_id_isSet = !json[QString("programId")].isNull() && m_program_id_isValid;

    m_pipeline_id_isValid = ::OpenAPI::fromJsonValue(pipeline_id, json[QString("pipelineId")]);
    m_pipeline_id_isSet = !json[QString("pipelineId")].isNull() && m_pipeline_id_isValid;

    m_artifacts_version_isValid = ::OpenAPI::fromJsonValue(artifacts_version, json[QString("artifactsVersion")]);
    m_artifacts_version_isSet = !json[QString("artifactsVersion")].isNull() && m_artifacts_version_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(finished_at, json[QString("finishedAt")]);
    m_finished_at_isSet = !json[QString("finishedAt")].isNull() && m_finished_at_isValid;

    m__embedded_isValid = ::OpenAPI::fromJsonValue(_embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(_links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;
}

QString OAIPipelineExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_program_id_isSet) {
        obj.insert(QString("programId"), ::OpenAPI::toJsonValue(program_id));
    }
    if (m_pipeline_id_isSet) {
        obj.insert(QString("pipelineId"), ::OpenAPI::toJsonValue(pipeline_id));
    }
    if (m_artifacts_version_isSet) {
        obj.insert(QString("artifactsVersion"), ::OpenAPI::toJsonValue(artifacts_version));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(user));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(trigger));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finishedAt"), ::OpenAPI::toJsonValue(finished_at));
    }
    if (_embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(_embedded));
    }
    if (_links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(_links));
    }
    return obj;
}

QString OAIPipelineExecution::getId() const {
    return id;
}
void OAIPipelineExecution::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString OAIPipelineExecution::getProgramId() const {
    return program_id;
}
void OAIPipelineExecution::setProgramId(const QString &program_id) {
    this->program_id = program_id;
    this->m_program_id_isSet = true;
}

QString OAIPipelineExecution::getPipelineId() const {
    return pipeline_id;
}
void OAIPipelineExecution::setPipelineId(const QString &pipeline_id) {
    this->pipeline_id = pipeline_id;
    this->m_pipeline_id_isSet = true;
}

QString OAIPipelineExecution::getArtifactsVersion() const {
    return artifacts_version;
}
void OAIPipelineExecution::setArtifactsVersion(const QString &artifacts_version) {
    this->artifacts_version = artifacts_version;
    this->m_artifacts_version_isSet = true;
}

QString OAIPipelineExecution::getUser() const {
    return user;
}
void OAIPipelineExecution::setUser(const QString &user) {
    this->user = user;
    this->m_user_isSet = true;
}

QString OAIPipelineExecution::getStatus() const {
    return status;
}
void OAIPipelineExecution::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}

QString OAIPipelineExecution::getTrigger() const {
    return trigger;
}
void OAIPipelineExecution::setTrigger(const QString &trigger) {
    this->trigger = trigger;
    this->m_trigger_isSet = true;
}

QDateTime OAIPipelineExecution::getCreatedAt() const {
    return created_at;
}
void OAIPipelineExecution::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

QDateTime OAIPipelineExecution::getUpdatedAt() const {
    return updated_at;
}
void OAIPipelineExecution::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

QDateTime OAIPipelineExecution::getFinishedAt() const {
    return finished_at;
}
void OAIPipelineExecution::setFinishedAt(const QDateTime &finished_at) {
    this->finished_at = finished_at;
    this->m_finished_at_isSet = true;
}

OAIPipelineExecution__embedded OAIPipelineExecution::getEmbedded() const {
    return _embedded;
}
void OAIPipelineExecution::setEmbedded(const OAIPipelineExecution__embedded &_embedded) {
    this->_embedded = _embedded;
    this->m__embedded_isSet = true;
}

OAIPipelineExecution__links OAIPipelineExecution::getLinks() const {
    return _links;
}
void OAIPipelineExecution::setLinks(const OAIPipelineExecution__links &_links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

bool OAIPipelineExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (_embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (_links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
