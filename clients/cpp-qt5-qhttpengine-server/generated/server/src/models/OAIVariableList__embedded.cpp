/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariableList__embedded.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariableList__embedded::OAIVariableList__embedded(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariableList__embedded::OAIVariableList__embedded() {
    this->initializeModel();
}

OAIVariableList__embedded::~OAIVariableList__embedded() {}

void OAIVariableList__embedded::initializeModel() {

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAIVariableList__embedded::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariableList__embedded::fromJsonObject(QJsonObject json) {

    m_variables_isValid = ::OpenAPI::fromJsonValue(variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAIVariableList__embedded::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariableList__embedded::asJsonObject() const {
    QJsonObject obj;
    if (variables.size() > 0) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(variables));
    }
    return obj;
}

QList<OAIVariable> OAIVariableList__embedded::getVariables() const {
    return variables;
}
void OAIVariableList__embedded::setVariables(const QList<OAIVariable> &variables) {
    this->variables = variables;
    this->m_variables_isSet = true;
}

bool OAIVariableList__embedded::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariableList__embedded::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
