/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestedPageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestedPageDetails::OAIRequestedPageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestedPageDetails::OAIRequestedPageDetails() {
    this->initializeModel();
}

OAIRequestedPageDetails::~OAIRequestedPageDetails() {}

void OAIRequestedPageDetails::initializeModel() {

    m_start_isSet = false;
    m_start_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;
}

void OAIRequestedPageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestedPageDetails::fromJsonObject(QJsonObject json) {

    m_start_isValid = ::OpenAPI::fromJsonValue(start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;
}

QString OAIRequestedPageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestedPageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(start));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(limit));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(order_by));
    }
    if (property.size() > 0) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(property));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(next));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(prev));
    }
    return obj;
}

qint32 OAIRequestedPageDetails::getStart() const {
    return start;
}
void OAIRequestedPageDetails::setStart(const qint32 &start) {
    this->start = start;
    this->m_start_isSet = true;
}

qint32 OAIRequestedPageDetails::getLimit() const {
    return limit;
}
void OAIRequestedPageDetails::setLimit(const qint32 &limit) {
    this->limit = limit;
    this->m_limit_isSet = true;
}

QString OAIRequestedPageDetails::getOrderBy() const {
    return order_by;
}
void OAIRequestedPageDetails::setOrderBy(const QString &order_by) {
    this->order_by = order_by;
    this->m_order_by_isSet = true;
}

QList<QString> OAIRequestedPageDetails::getProperty() const {
    return property;
}
void OAIRequestedPageDetails::setProperty(const QList<QString> &property) {
    this->property = property;
    this->m_property_isSet = true;
}

QString OAIRequestedPageDetails::getType() const {
    return type;
}
void OAIRequestedPageDetails::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

qint32 OAIRequestedPageDetails::getNext() const {
    return next;
}
void OAIRequestedPageDetails::setNext(const qint32 &next) {
    this->next = next;
    this->m_next_isSet = true;
}

qint32 OAIRequestedPageDetails::getPrev() const {
    return prev;
}
void OAIRequestedPageDetails::setPrev(const qint32 &prev) {
    this->prev = prev;
    this->m_prev_isSet = true;
}

bool OAIRequestedPageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (property.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestedPageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
