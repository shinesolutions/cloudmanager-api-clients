/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedProgram::OAIEmbeddedProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedProgram::OAIEmbeddedProgram() {
    this->initializeModel();
}

OAIEmbeddedProgram::~OAIEmbeddedProgram() {}

void OAIEmbeddedProgram::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIEmbeddedProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedProgram::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIEmbeddedProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(enabled));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(tenant_id));
    }
    return obj;
}

QString OAIEmbeddedProgram::getId() const {
    return id;
}
void OAIEmbeddedProgram::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString OAIEmbeddedProgram::getName() const {
    return name;
}
void OAIEmbeddedProgram::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIEmbeddedProgram::isEnabled() const {
    return enabled;
}
void OAIEmbeddedProgram::setEnabled(const bool &enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

QString OAIEmbeddedProgram::getTenantId() const {
    return tenant_id;
}
void OAIEmbeddedProgram::setTenantId(const QString &tenant_id) {
    this->tenant_id = tenant_id;
    this->m_tenant_id_isSet = true;
}

bool OAIEmbeddedProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
