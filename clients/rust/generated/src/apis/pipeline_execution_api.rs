/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PipelineExecutionApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PipelineExecutionApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PipelineExecutionApiClient<C> {
        PipelineExecutionApiClient {
            configuration,
        }
    }
}

pub trait PipelineExecutionApi {
    fn advance_pipeline_execution(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, content_type: &str, body: serde_json::Value) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn cancel_pipeline_execution_step(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, content_type: &str, body: serde_json::Value) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_current_execution(&self, program_id: &str, pipeline_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineExecution, Error = Error<serde_json::Value>>>;
    fn get_execution(&self, program_id: &str, pipeline_id: &str, execution_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineExecution, Error = Error<serde_json::Value>>>;
    fn get_executions(&self, program_id: &str, pipeline_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, start: Option<&str>, limit: Option<i32>) -> Box<dyn Future<Item = crate::models::PipelineExecutionListRepresentation, Error = Error<serde_json::Value>>>;
    fn get_step_logs(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, file: Option<&str>, accept: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn start_pipeline(&self, program_id: &str, pipeline_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, content_type: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn step_metric(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineStepMetrics, Error = Error<serde_json::Value>>>;
    fn step_state(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineExecutionStepState, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PipelineExecutionApi for PipelineExecutionApiClient<C> {
    fn advance_pipeline_execution(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, content_type: &str, body: serde_json::Value) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_path_param("executionId".to_string(), execution_id.to_string());
        req = req.with_path_param("phaseId".to_string(), phase_id.to_string());
        req = req.with_path_param("stepId".to_string(), step_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());
        req = req.with_header_param("Content-Type".to_string(), content_type.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn cancel_pipeline_execution_step(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, content_type: &str, body: serde_json::Value) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_path_param("executionId".to_string(), execution_id.to_string());
        req = req.with_path_param("phaseId".to_string(), phase_id.to_string());
        req = req.with_path_param("stepId".to_string(), step_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());
        req = req.with_header_param("Content-Type".to_string(), content_type.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn get_current_execution(&self, program_id: &str, pipeline_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineExecution, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}/pipeline/{pipelineId}/execution".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_execution(&self, program_id: &str, pipeline_id: &str, execution_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineExecution, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_path_param("executionId".to_string(), execution_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_executions(&self, program_id: &str, pipeline_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, start: Option<&str>, limit: Option<i32>) -> Box<dyn Future<Item = crate::models::PipelineExecutionListRepresentation, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}/pipeline/{pipelineId}/executions".to_string())
        ;
        if let Some(ref s) = start {
            req = req.with_query_param("start".to_string(), s.to_string());
        }
        if let Some(ref s) = limit {
            req = req.with_query_param("limit".to_string(), s.to_string());
        }
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_step_logs(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, file: Option<&str>, accept: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs".to_string())
        ;
        if let Some(ref s) = file {
            req = req.with_query_param("file".to_string(), s.to_string());
        }
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_path_param("executionId".to_string(), execution_id.to_string());
        req = req.with_path_param("phaseId".to_string(), phase_id.to_string());
        req = req.with_path_param("stepId".to_string(), step_id.to_string());
        if let Some(param_value) = accept {
            req = req.with_header_param("Accept".to_string(), param_value.to_string());
        }
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn start_pipeline(&self, program_id: &str, pipeline_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str, content_type: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/api/program/{programId}/pipeline/{pipelineId}/execution".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());
        req = req.with_header_param("Content-Type".to_string(), content_type.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn step_metric(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineStepMetrics, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_path_param("executionId".to_string(), execution_id.to_string());
        req = req.with_path_param("phaseId".to_string(), phase_id.to_string());
        req = req.with_path_param("stepId".to_string(), step_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn step_state(&self, program_id: &str, pipeline_id: &str, execution_id: &str, phase_id: &str, step_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::PipelineExecutionStepState, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_path_param("pipelineId".to_string(), pipeline_id.to_string());
        req = req.with_path_param("executionId".to_string(), execution_id.to_string());
        req = req.with_path_param("phaseId".to_string(), phase_id.to_string());
        req = req.with_path_param("stepId".to_string(), step_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

}
