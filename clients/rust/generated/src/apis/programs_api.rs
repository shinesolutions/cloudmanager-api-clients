/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ProgramsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ProgramsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ProgramsApiClient<C> {
        ProgramsApiClient {
            configuration,
        }
    }
}

pub trait ProgramsApi {
    fn delete_program(&self, program_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::Program, Error = Error<serde_json::Value>>>;
    fn get_program(&self, program_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::Program, Error = Error<serde_json::Value>>>;
    fn get_programs(&self, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::ProgramList, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>ProgramsApi for ProgramsApiClient<C> {
    fn delete_program(&self, program_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::Program, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/api/program/{programId}".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_program(&self, program_id: &str, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::Program, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/program/{programId}".to_string())
        ;
        req = req.with_path_param("programId".to_string(), program_id.to_string());
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_programs(&self, x_gw_ims_org_id: &str, authorization: &str, x_api_key: &str) -> Box<dyn Future<Item = crate::models::ProgramList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/api/programs".to_string())
        ;
        req = req.with_header_param("x-gw-ims-org-id".to_string(), x_gw_ims_org_id.to_string());
        req = req.with_header_param("Authorization".to_string(), authorization.to_string());
        req = req.with_header_param("x-api-key".to_string(), x_api_key.to_string());

        req.execute(self.configuration.borrow())
    }

}
