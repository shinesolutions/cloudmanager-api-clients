/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

/// Pipeline : Describes a __CI/CD Pipeline__



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Pipeline {
    /// Identifier of the pipeline. Unique within the program.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifier of the program. Unique within the space.
    #[serde(rename = "programId", skip_serializing_if = "Option::is_none")]
    pub program_id: Option<String>,
    /// Name of the pipeline
    #[serde(rename = "name")]
    pub name: String,
    /// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Trigger>,
    /// Pipeline status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Create date
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Update date
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Last pipeline execution start
    #[serde(rename = "lastStartedAt", skip_serializing_if = "Option::is_none")]
    pub last_started_at: Option<String>,
    /// Last pipeline execution end
    #[serde(rename = "lastFinishedAt", skip_serializing_if = "Option::is_none")]
    pub last_finished_at: Option<String>,
    /// Pipeline phases in execution order
    #[serde(rename = "phases")]
    pub phases: Vec<crate::models::PipelinePhase>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<crate::models::PipelineLinks>,
}

impl Pipeline {
    /// Describes a __CI/CD Pipeline__
    pub fn new(name: String, phases: Vec<crate::models::PipelinePhase>) -> Pipeline {
        Pipeline {
            id: None,
            program_id: None,
            name,
            trigger: None,
            status: None,
            created_at: None,
            updated_at: None,
            last_started_at: None,
            last_finished_at: None,
            phases,
            _links: None,
        }
    }
}

/// How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Trigger {
    #[serde(rename = "ON_COMMIT")]
    ONCOMMIT,
    #[serde(rename = "MANUAL")]
    MANUAL,
    #[serde(rename = "SCHEDULE")]
    SCHEDULE,
}
/// Pipeline status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "IDLE")]
    IDLE,
    #[serde(rename = "BUSY")]
    BUSY,
    #[serde(rename = "WAITING")]
    WAITING,
}

