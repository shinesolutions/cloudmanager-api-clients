/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

/// Metric : Describes a __Metric__



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Metric {
    /// KPI result identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Severity of the metric
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<Severity>,
    /// Whether metric is considered passed
    #[serde(rename = "passed", skip_serializing_if = "Option::is_none")]
    pub passed: Option<bool>,
    /// Whether user override the failed metric
    #[serde(rename = "override", skip_serializing_if = "Option::is_none")]
    pub _override: Option<bool>,
    /// Expected value for the metric
    #[serde(rename = "actualValue", skip_serializing_if = "Option::is_none")]
    pub actual_value: Option<String>,
    /// Expected value for the metric
    #[serde(rename = "expectedValue", skip_serializing_if = "Option::is_none")]
    pub expected_value: Option<String>,
    /// Comparator used for the metric
    #[serde(rename = "comparator", skip_serializing_if = "Option::is_none")]
    pub comparator: Option<Comparator>,
    /// KPI identifier
    #[serde(rename = "kpi", skip_serializing_if = "Option::is_none")]
    pub kpi: Option<String>,
}

impl Metric {
    /// Describes a __Metric__
    pub fn new() -> Metric {
        Metric {
            id: None,
            severity: None,
            passed: None,
            _override: None,
            actual_value: None,
            expected_value: None,
            comparator: None,
            kpi: None,
        }
    }
}

/// Severity of the metric
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "important")]
    Important,
    #[serde(rename = "informational")]
    Informational,
}
/// Comparator used for the metric
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Comparator {
    #[serde(rename = "GT")]
    GT,
    #[serde(rename = "GTE")]
    GTE,
    #[serde(rename = "LT")]
    LT,
    #[serde(rename = "LTE")]
    LTE,
    #[serde(rename = "EQ")]
    EQ,
    #[serde(rename = "NEQ")]
    NEQ,
}

