/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

/// PipelineExecution : Wraps a pipeline execution



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineExecution {
    /// Pipeline execution identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifier of the program. Unique within the space.
    #[serde(rename = "programId", skip_serializing_if = "Option::is_none")]
    pub program_id: Option<String>,
    /// Identifier of the pipeline. Unique within the space.
    #[serde(rename = "pipelineId", skip_serializing_if = "Option::is_none")]
    pub pipeline_id: Option<String>,
    /// Version of the artifacts generated during this execution
    #[serde(rename = "artifactsVersion", skip_serializing_if = "Option::is_none")]
    pub artifacts_version: Option<String>,
    /// AdobeID who started the pipeline. Empty for auto triggered builds
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// Status of the execution
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// How the execution was triggered.
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Trigger>,
    /// Start time
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Date of last status change
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Date the execution reached a final state
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    #[serde(rename = "_embedded", skip_serializing_if = "Option::is_none")]
    pub _embedded: Option<crate::models::PipelineExecutionEmbedded>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<crate::models::PipelineExecutionLinks>,
}

impl PipelineExecution {
    /// Wraps a pipeline execution
    pub fn new() -> PipelineExecution {
        PipelineExecution {
            id: None,
            program_id: None,
            pipeline_id: None,
            artifacts_version: None,
            user: None,
            status: None,
            trigger: None,
            created_at: None,
            updated_at: None,
            finished_at: None,
            _embedded: None,
            _links: None,
        }
    }
}

/// Status of the execution
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NOT_STARTED")]
    NOTSTARTED,
    #[serde(rename = "RUNNING")]
    RUNNING,
    #[serde(rename = "CANCELLING")]
    CANCELLING,
    #[serde(rename = "CANCELLED")]
    CANCELLED,
    #[serde(rename = "FINISHED")]
    FINISHED,
    #[serde(rename = "ERROR")]
    ERROR,
    #[serde(rename = "FAILED")]
    FAILED,
}
/// How the execution was triggered.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Trigger {
    #[serde(rename = "ON_COMMIT")]
    ONCOMMIT,
    #[serde(rename = "MANUAL")]
    MANUAL,
    #[serde(rename = "SCHEDULE")]
    SCHEDULE,
    #[serde(rename = "PUSH_UPGRADES")]
    PUSHUPGRADES,
}

