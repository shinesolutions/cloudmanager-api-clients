#import <Foundation/Foundation.h>
#import "OAIBadRequestError.h"
#import "OAIEnvironment.h"
#import "OAIEnvironmentList.h"
#import "OAIEnvironmentLogs.h"
#import "OAIApi.h"

/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIEnvironmentsApi: NSObject <OAIApi>

extern NSString* kOAIEnvironmentsApiErrorDomain;
extern NSInteger kOAIEnvironmentsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// DeleteEnvironment
/// Delete environment
///
/// @param programId Identifier of the application
/// @param environmentId Identifier of the environment
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// 
///  code:201 message:"Environment deleted",
///  code:400 message:"Environment deletion in progress",
///  code:404 message:"Environment not found"
///
/// @return OAIEnvironment*
-(NSURLSessionTask*) deleteEnvironmentWithProgramId: (NSString*) programId
    environmentId: (NSString*) environmentId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    completionHandler: (void (^)(OAIEnvironment* output, NSError* error)) handler;


/// Download Logs
/// Download environment logs
///
/// @param programId Identifier of the program
/// @param environmentId Identifier of the environment
/// @param service Name of service
/// @param name Name of log
/// @param date date for which log is required
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
/// 
///  code:200 message:"Successful retrieval of logs",
///  code:400 message:"invalid parameters",
///  code:404 message:"Environment not found"
///
/// @return void
-(NSURLSessionTask*) downloadLogsWithProgramId: (NSString*) programId
    environmentId: (NSString*) environmentId
    service: (NSString*) service
    name: (NSString*) name
    date: (NSString*) date
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    accept: (NSString*) accept
    completionHandler: (void (^)(NSError* error)) handler;


/// Get Environment
/// Returns an environment by its id
///
/// @param programId Identifier of the program
/// @param environmentId Identifier of the environment
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// 
///  code:200 message:"successful operation"
///
/// @return OAIEnvironment*
-(NSURLSessionTask*) getEnvironmentWithProgramId: (NSString*) programId
    environmentId: (NSString*) environmentId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    completionHandler: (void (^)(OAIEnvironment* output, NSError* error)) handler;


/// Get Environment Logs
/// List all logs available in environment
///
/// @param programId Identifier of the program
/// @param environmentId Identifier of the environment
/// @param days number of days for which logs are required
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param service Names of services (optional)
/// @param name Names of log (optional)
/// 
///  code:200 message:"Successful retrieval of logs for an environment",
///  code:400 message:"invalid parameters",
///  code:404 message:"Environment not found"
///
/// @return OAIEnvironmentLogs*
-(NSURLSessionTask*) getEnvironmentLogsWithProgramId: (NSString*) programId
    environmentId: (NSString*) environmentId
    days: (NSNumber*) days
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    service: (NSArray<NSString*>*) service
    name: (NSArray<NSString*>*) name
    completionHandler: (void (^)(OAIEnvironmentLogs* output, NSError* error)) handler;


/// List Environments
/// Lists all environments in an program
///
/// @param programId Identifier of the program
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param type Type of the environment (optional)
/// 
///  code:200 message:"Successful retrieval of environment list",
///  code:404 message:"Program not found"
///
/// @return OAIEnvironmentList*
-(NSURLSessionTask*) getEnvironmentsWithProgramId: (NSString*) programId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    type: (NSString*) type
    completionHandler: (void (^)(OAIEnvironmentList* output, NSError* error)) handler;



@end
