#import <Foundation/Foundation.h>
#import "OAIPipelineExecution.h"
#import "OAIPipelineExecutionListRepresentation.h"
#import "OAIPipelineExecutionStepState.h"
#import "OAIPipelineStepMetrics.h"
#import "OAIApi.h"

/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIPipelineExecutionApi: NSObject <OAIApi>

extern NSString* kOAIPipelineExecutionApiErrorDomain;
extern NSInteger kOAIPipelineExecutionApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Advance
/// Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param executionId Identifier of the execution
/// @param phaseId Identifier of the phase
/// @param stepId Identifier of the step
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param contentType Must always be application/json
/// @param body Input for advance. See documentation for details.
/// 
///  code:202 message:"Successful resume of pipeline execution",
///  code:403 message:"Missing permission for user to advance the pipeline execution",
///  code:404 message:"No pipeline execution exits or unknown pipeline or program"
///
/// @return void
-(NSURLSessionTask*) advancePipelineExecutionWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    executionId: (NSString*) executionId
    phaseId: (NSString*) phaseId
    stepId: (NSString*) stepId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    contentType: (NSString*) contentType
    body: (NSObject*) body
    completionHandler: (void (^)(NSError* error)) handler;


/// Cancel
/// Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param executionId Identifier of the execution
/// @param phaseId Identifier of the phase
/// @param stepId Identifier of the step
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param contentType Must always be application/json
/// @param body Input for advance. See documentation for details.
/// 
///  code:202 message:"Successful cancel of pipeline execution",
///  code:403 message:"Missing permission for user to cancel the current pipeline execution",
///  code:404 message:"No pipeline execution exits or unknown pipeline or program"
///
/// @return void
-(NSURLSessionTask*) cancelPipelineExecutionStepWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    executionId: (NSString*) executionId
    phaseId: (NSString*) phaseId
    stepId: (NSString*) stepId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    contentType: (NSString*) contentType
    body: (NSObject*) body
    completionHandler: (void (^)(NSError* error)) handler;


/// Get current pipeline execution
/// Returns current pipeline execution if any.
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// 
///  code:200 message:"Successful retrieval of current execution",
///  code:404 message:"No pipeline execution exits or unknown pipeline or program"
///
/// @return OAIPipelineExecution*
-(NSURLSessionTask*) getCurrentExecutionWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    completionHandler: (void (^)(OAIPipelineExecution* output, NSError* error)) handler;


/// Get pipeline execution
/// Returns a pipeline execution by id
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param executionId Identifier of the execution
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// 
///  code:200 message:"Successful retrieval of execution",
///  code:404 message:"No pipeline execution exits or unknown pipeline or application"
///
/// @return OAIPipelineExecution*
-(NSURLSessionTask*) getExecutionWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    executionId: (NSString*) executionId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    completionHandler: (void (^)(OAIPipelineExecution* output, NSError* error)) handler;


/// List Executions
/// Returns the history of pipeline executions in a newest to oldest order
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param start Pagination start parameter (optional)
/// @param limit Pagination limit parameter (optional)
/// 
///  code:200 message:"Successful retrieval of execution history",
///  code:403 message:"Missing permission for user to read executions",
///  code:404 message:"Pipeline does not exist"
///
/// @return OAIPipelineExecutionListRepresentation*
-(NSURLSessionTask*) getExecutionsWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    start: (NSString*) start
    limit: (NSNumber*) limit
    completionHandler: (void (^)(OAIPipelineExecutionListRepresentation* output, NSError* error)) handler;


/// Get logs
/// Get the logs associated with a step.
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param executionId Identifier of the execution
/// @param phaseId Identifier of the phase
/// @param stepId Identifier of the step
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param file Identifier of the log file (optional)
/// @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
/// 
///  code:200 message:"Successful retrieval of logs",
///  code:403 message:"Missing permission for user to read logs",
///  code:404 message:"Pipeline execution does not exist"
///
/// @return void
-(NSURLSessionTask*) getStepLogsWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    executionId: (NSString*) executionId
    phaseId: (NSString*) phaseId
    stepId: (NSString*) stepId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    file: (NSString*) file
    accept: (NSString*) accept
    completionHandler: (void (^)(NSError* error)) handler;


/// Start the pipeline
/// Starts the Pipeline. This works only if the pipeline is not already started.
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// @param contentType Must always be application/json
/// 
///  code:201 message:"Successful started pipeline execution",
///  code:400 message:"Request conflicts with the expected state of pipeline",
///  code:404 message:"No pipeline execution exits or unknown pipeline or application",
///  code:412 message:"Cannot start execution: programId={programId}, pipelineId={pipelineId} currentExecutionId={executionId}, reason='Execution already in progress."
///
/// @return void
-(NSURLSessionTask*) startPipelineWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    contentType: (NSString*) contentType
    completionHandler: (void (^)(NSError* error)) handler;


/// Get step metrics
/// 
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param executionId Identifier of the execution
/// @param phaseId Identifier of the phase
/// @param stepId Identifier of the step
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// 
///  code:200 message:"Successful retrieval of metrics",
///  code:403 message:"Missing permission for user to read metrics",
///  code:404 message:"Pipeline execution does not exist"
///
/// @return OAIPipelineStepMetrics*
-(NSURLSessionTask*) stepMetricWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    executionId: (NSString*) executionId
    phaseId: (NSString*) phaseId
    stepId: (NSString*) stepId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    completionHandler: (void (^)(OAIPipelineStepMetrics* output, NSError* error)) handler;


/// Get step state
/// 
///
/// @param programId Identifier of the program.
/// @param pipelineId Identifier of the pipeline
/// @param executionId Identifier of the execution
/// @param phaseId Identifier of the phase
/// @param stepId Identifier of the step
/// @param xGwImsOrgId IMS organization ID that the request is being made under.
/// @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
/// @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
/// 
///  code:200 message:"Successful retrieval of step state",
///  code:403 message:"Missing permission for user to read step",
///  code:404 message:"Pipeline execution does not exist"
///
/// @return OAIPipelineExecutionStepState*
-(NSURLSessionTask*) stepStateWithProgramId: (NSString*) programId
    pipelineId: (NSString*) pipelineId
    executionId: (NSString*) executionId
    phaseId: (NSString*) phaseId
    stepId: (NSString*) stepId
    xGwImsOrgId: (NSString*) xGwImsOrgId
    authorization: (NSString*) authorization
    xApiKey: (NSString*) xApiKey
    completionHandler: (void (^)(OAIPipelineExecutionStepState* output, NSError* error)) handler;



@end
