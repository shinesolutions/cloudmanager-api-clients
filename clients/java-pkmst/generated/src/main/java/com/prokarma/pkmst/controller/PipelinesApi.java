/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.Pipeline;
import com.prokarma.pkmst.model.PipelineList;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-06-22T02:53:26.039Z[GMT]")

@Api(value = "Pipelines", description = "the Pipelines API")
public interface PipelinesApi {

    @ApiOperation(value = "Delete a Pipeline", notes = "Delete a pipeline. All the data is wiped.", response = Void.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePipeline(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get Pipeline", notes = "Returns a pipeline by its id", response = Pipeline.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of pipeline", response = Pipeline.class),
        @ApiResponse(code = 404, message = "Pipeline not found") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Pipeline> getPipeline(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List Pipelines", notes = "Returns all the pipelines that the requesting user has access to in an program", response = PipelineList.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PipelineList.class) })
    @RequestMapping(value = "/api/program/{programId}/pipelines",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PipelineList> getPipelines(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Patches Pipeline", notes = "Patches a pipeline within an program.", response = Pipeline.class, tags={ "Pipelines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Pipeline.class) })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Pipeline> patchPipeline(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "The updated Pipeline" ,required=true )   @RequestBody Pipeline body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
