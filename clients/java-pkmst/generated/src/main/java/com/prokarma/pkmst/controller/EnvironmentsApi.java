/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.BadRequestError;
import com.prokarma.pkmst.model.Environment;
import com.prokarma.pkmst.model.EnvironmentList;
import com.prokarma.pkmst.model.EnvironmentLogs;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-06-22T02:53:26.039Z[GMT]")

@Api(value = "Environments", description = "the Environments API")
public interface EnvironmentsApi {

    @ApiOperation(value = "DeleteEnvironment", notes = "Delete environment", response = Environment.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Environment deleted", response = Environment.class),
        @ApiResponse(code = 400, message = "Environment deletion in progress", response = BadRequestError.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Environment> deleteEnvironment(@ApiParam(value = "Identifier of the application",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true ) @PathVariable("environmentId") String environmentId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Download Logs", notes = "Download environment logs", response = Void.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of logs"),
        @ApiResponse(code = 400, message = "invalid parameters", response = BadRequestError.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}/logs/download",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> downloadLogs(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true ) @PathVariable("environmentId") String environmentId,@ApiParam(value = "Name of service", required = true)  @RequestParam(value = "service", required = true) String service,@ApiParam(value = "Name of log", required = true)  @RequestParam(value = "name", required = true) String name,@ApiParam(value = "date for which log is required", required = true)  @RequestParam(value = "date", required = true) String date,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header." ) @RequestHeader(value="Accept", required=false) String accept, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get Environment", notes = "Returns an environment by its id", response = Environment.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Environment.class) })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Environment> getEnvironment(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true ) @PathVariable("environmentId") String environmentId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get Environment Logs", notes = "List all logs available in environment", response = EnvironmentLogs.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of logs for an environment", response = EnvironmentLogs.class),
        @ApiResponse(code = 400, message = "invalid parameters", response = BadRequestError.class),
        @ApiResponse(code = 404, message = "Environment not found") })
    @RequestMapping(value = "/api/program/{programId}/environment/{environmentId}/logs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EnvironmentLogs> getEnvironmentLogs(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the environment",required=true ) @PathVariable("environmentId") String environmentId,@ApiParam(value = "number of days for which logs are required", required = true)  @RequestParam(value = "days", required = true) Integer days,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Names of services", defaultValue = "new ArrayList<>()")  @RequestParam(value = "service", required = false, defaultValue="new ArrayList<>()") List<String> service,@ApiParam(value = "Names of log", defaultValue = "new ArrayList<>()")  @RequestParam(value = "name", required = false, defaultValue="new ArrayList<>()") List<String> name, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List Environments", notes = "Lists all environments in an program", response = EnvironmentList.class, tags={ "Environments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of environment list", response = EnvironmentList.class),
        @ApiResponse(code = 404, message = "Program not found") })
    @RequestMapping(value = "/api/program/{programId}/environments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EnvironmentList> getEnvironments(@ApiParam(value = "Identifier of the program",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Type of the environment", allowableValues = "dev, stage, prod")  @RequestParam(value = "type", required = false) String type, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
