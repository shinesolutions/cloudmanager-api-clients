/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.PipelineExecution;
import com.prokarma.pkmst.model.PipelineExecutionListRepresentation;
import com.prokarma.pkmst.model.PipelineExecutionStepState;
import com.prokarma.pkmst.model.PipelineStepMetrics;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-06-22T02:53:26.039Z[GMT]")

@Api(value = "PipelineExecution", description = "the PipelineExecution API")
public interface PipelineExecutionApi {

    @ApiOperation(value = "Advance", notes = "Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.", response = Void.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful resume of pipeline execution"),
        @ApiResponse(code = 403, message = "Missing permission for user to advance the pipeline execution"),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or program") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> advancePipelineExecution(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true ) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true ) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true ) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Input for advance. See documentation for details." ,required=true )   @RequestBody Object body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Cancel", notes = "Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.", response = Void.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Successful cancel of pipeline execution"),
        @ApiResponse(code = 403, message = "Missing permission for user to cancel the current pipeline execution"),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or program") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> cancelPipelineExecutionStep(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true ) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true ) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true ) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType,@ApiParam(value = "Input for advance. See documentation for details." ,required=true )   @RequestBody Object body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get current pipeline execution", notes = "Returns current pipeline execution if any.", response = PipelineExecution.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of current execution", response = PipelineExecution.class),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or program") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PipelineExecution> getCurrentExecution(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get pipeline execution", notes = "Returns a pipeline execution by id", response = PipelineExecution.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of execution", response = PipelineExecution.class),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or application") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PipelineExecution> getExecution(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true ) @PathVariable("executionId") String executionId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "List Executions", notes = "Returns the history of pipeline executions in a newest to oldest order", response = PipelineExecutionListRepresentation.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of execution history", response = PipelineExecutionListRepresentation.class),
        @ApiResponse(code = 403, message = "Missing permission for user to read executions"),
        @ApiResponse(code = 404, message = "Pipeline does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/executions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PipelineExecutionListRepresentation> getExecutions(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Pagination start parameter")  @RequestParam(value = "start", required = false) String start,@ApiParam(value = "Pagination limit parameter")  @RequestParam(value = "limit", required = false) Integer limit, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get logs", notes = "Get the logs associated with a step.", response = Void.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of logs"),
        @ApiResponse(code = 403, message = "Missing permission for user to read logs"),
        @ApiResponse(code = 404, message = "Pipeline execution does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs",
        method = RequestMethod.GET)
    ResponseEntity<Void> getStepLogs(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true ) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true ) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true ) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Identifier of the log file")  @RequestParam(value = "file", required = false) String file,@ApiParam(value = "Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header." ) @RequestHeader(value="Accept", required=false) String accept, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Start the pipeline", notes = "Starts the Pipeline. This works only if the pipeline is not already started.", response = Void.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful started pipeline execution"),
        @ApiResponse(code = 400, message = "Request conflicts with the expected state of pipeline"),
        @ApiResponse(code = 404, message = "No pipeline execution exits or unknown pipeline or application"),
        @ApiResponse(code = 412, message = "Cannot start execution: programId={programId}, pipelineId={pipelineId} currentExecutionId={executionId}, reason='Execution already in progress.") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution",
        method = RequestMethod.PUT)
    ResponseEntity<Void> startPipeline(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey,@ApiParam(value = "Must always be application/json" ,required=true) @RequestHeader(value="Content-Type", required=true) String contentType, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get step metrics", notes = "", response = PipelineStepMetrics.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of metrics", response = PipelineStepMetrics.class),
        @ApiResponse(code = 403, message = "Missing permission for user to read metrics"),
        @ApiResponse(code = 404, message = "Pipeline execution does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PipelineStepMetrics> stepMetric(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true ) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true ) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true ) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get step state", notes = "", response = PipelineExecutionStepState.class, tags={ "Pipeline Execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of step state", response = PipelineExecutionStepState.class),
        @ApiResponse(code = 403, message = "Missing permission for user to read step"),
        @ApiResponse(code = 404, message = "Pipeline execution does not exist") })
    @RequestMapping(value = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PipelineExecutionStepState> stepState(@ApiParam(value = "Identifier of the program.",required=true ) @PathVariable("programId") String programId,@ApiParam(value = "Identifier of the pipeline",required=true ) @PathVariable("pipelineId") String pipelineId,@ApiParam(value = "Identifier of the execution",required=true ) @PathVariable("executionId") String executionId,@ApiParam(value = "Identifier of the phase",required=true ) @PathVariable("phaseId") String phaseId,@ApiParam(value = "Identifier of the step",required=true ) @PathVariable("stepId") String stepId,@ApiParam(value = "IMS organization ID that the request is being made under." ,required=true) @RequestHeader(value="x-gw-ims-org-id", required=true) String xGwImsOrgId,@ApiParam(value = "Bearer [token] - An access token for the technical account created through integration with Adobe IO" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io" ,required=true) @RequestHeader(value="x-api-key", required=true) String xApiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
