/*
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.PipelineExecution;
import com.prokarma.pkmst.model.PipelineExecutionListRepresentation;
import com.prokarma.pkmst.model.PipelineExecutionStepState;
import com.prokarma.pkmst.model.PipelineStepMetrics;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for PipelineExecutionApi
 */
@Ignore
public class PipelineExecutionApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final PipelineExecutionApi api = new PipelineExecutionApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Advance
     *
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void advancePipelineExecutionTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        Object body = null;
    ResponseEntity<Void> response = api.advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body , accept);

        // TODO: test validations
    }
    
    /**
     * Cancel
     *
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelPipelineExecutionStepTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
        Object body = null;
    ResponseEntity<Void> response = api.cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body , accept);

        // TODO: test validations
    }
    
    /**
     * Get current pipeline execution
     *
     * Returns current pipeline execution if any.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCurrentExecutionTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
    ResponseEntity<PipelineExecution> response = api.getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey , accept);

        // TODO: test validations
    }
    
    /**
     * Get pipeline execution
     *
     * Returns a pipeline execution by id
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
    ResponseEntity<PipelineExecution> response = api.getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey , accept);

        // TODO: test validations
    }
    
    /**
     * List Executions
     *
     * Returns the history of pipeline executions in a newest to oldest order
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getExecutionsTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String start = null;
        Integer limit = null;
    ResponseEntity<PipelineExecutionListRepresentation> response = api.getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit , accept);

        // TODO: test validations
    }
    
    /**
     * Get logs
     *
     * Get the logs associated with a step.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getStepLogsTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String file = null;
        String accept = null;
    ResponseEntity<Void> response = api.getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept , accept);

        // TODO: test validations
    }
    
    /**
     * Start the pipeline
     *
     * Starts the Pipeline. This works only if the pipeline is not already started.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void startPipelineTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
        String contentType = null;
    ResponseEntity<Void> response = api.startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType , accept);

        // TODO: test validations
    }
    
    /**
     * Get step metrics
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void stepMetricTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
    ResponseEntity<PipelineStepMetrics> response = api.stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey , accept);

        // TODO: test validations
    }
    
    /**
     * Get step state
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void stepStateTest() throws Exception {
        String programId = null;
        String pipelineId = null;
        String executionId = null;
        String phaseId = null;
        String stepId = null;
        String xGwImsOrgId = null;
        String authorization = null;
        String xApiKey = null;
    ResponseEntity<PipelineExecutionStepState> response = api.stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey , accept);

        // TODO: test validations
    }
    
}
