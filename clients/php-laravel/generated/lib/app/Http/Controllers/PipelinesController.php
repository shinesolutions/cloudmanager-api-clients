<?php

/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class PipelinesController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation deletePipeline
     *
     * Delete a Pipeline.
     *
     * @param string $programId Identifier of the program (required)
     * @param string $pipelineId Identifier of the pipeline (required)
     *
     * @return Http response
     */
    public function deletePipeline($programId, $pipelineId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deletePipeline as a delete method ?');
    }
    /**
     * Operation getPipeline
     *
     * Get Pipeline.
     *
     * @param string $programId Identifier of the program (required)
     * @param string $pipelineId Identifier of the pipeline (required)
     *
     * @return Http response
     */
    public function getPipeline($programId, $pipelineId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipeline as a get method ?');
    }
    /**
     * Operation patchPipeline
     *
     * Patches Pipeline.
     *
     * @param string $programId Identifier of the program (required)
     * @param string $pipelineId Identifier of the pipeline (required)
     *
     * @return Http response
     */
    public function patchPipeline($programId, $pipelineId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing patchPipeline as a patch method ?');
    }
    /**
     * Operation getPipelines
     *
     * List Pipelines.
     *
     * @param string $programId Identifier of the program (required)
     *
     * @return Http response
     */
    public function getPipelines($programId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelines as a get method ?');
    }
}
