# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyaemcloudmanagerapi.api_client import ApiClient
from pyaemcloudmanagerapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PipelineExecutionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def advance_pipeline_execution(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs):  # noqa: E501
        """Advance  # noqa: E501

        Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advance_pipeline_execution(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param object body: Input for advance. See documentation for details. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.advance_pipeline_execution_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs)  # noqa: E501

    def advance_pipeline_execution_with_http_info(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs):  # noqa: E501
        """Advance  # noqa: E501

        Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advance_pipeline_execution_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param object body: Input for advance. See documentation for details. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'execution_id',
            'phase_id',
            'step_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'content_type',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advance_pipeline_execution" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and ('execution_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['execution_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'phase_id' is set
        if self.api_client.client_side_validation and ('phase_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['phase_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `phase_id` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['step_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step_id` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `advance_pipeline_execution`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `advance_pipeline_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501
        if 'execution_id' in local_var_params:
            path_params['executionId'] = local_var_params['execution_id']  # noqa: E501
        if 'phase_id' in local_var_params:
            path_params['phaseId'] = local_var_params['phase_id']  # noqa: E501
        if 'step_id' in local_var_params:
            path_params['stepId'] = local_var_params['step_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501
        if 'content_type' in local_var_params:
            header_params['Content-Type'] = local_var_params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_pipeline_execution_step(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs):  # noqa: E501
        """Cancel  # noqa: E501

        Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_pipeline_execution_step(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param object body: Input for advance. See documentation for details. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.cancel_pipeline_execution_step_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs)  # noqa: E501

    def cancel_pipeline_execution_step_with_http_info(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs):  # noqa: E501
        """Cancel  # noqa: E501

        Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_pipeline_execution_step_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param object body: Input for advance. See documentation for details. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'execution_id',
            'phase_id',
            'step_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'content_type',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_pipeline_execution_step" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and ('execution_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['execution_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'phase_id' is set
        if self.api_client.client_side_validation and ('phase_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['phase_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `phase_id` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['step_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step_id` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `cancel_pipeline_execution_step`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `cancel_pipeline_execution_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501
        if 'execution_id' in local_var_params:
            path_params['executionId'] = local_var_params['execution_id']  # noqa: E501
        if 'phase_id' in local_var_params:
            path_params['phaseId'] = local_var_params['phase_id']  # noqa: E501
        if 'step_id' in local_var_params:
            path_params['stepId'] = local_var_params['step_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501
        if 'content_type' in local_var_params:
            header_params['Content-Type'] = local_var_params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_execution(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get current pipeline execution  # noqa: E501

        Returns current pipeline execution if any.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_execution(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PipelineExecution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_current_execution_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_current_execution_with_http_info(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get current pipeline execution  # noqa: E501

        Returns current pipeline execution if any.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_execution_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PipelineExecution, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_execution" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_current_execution`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_current_execution`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_current_execution`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_current_execution`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_current_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecution',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_execution(self, program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get pipeline execution  # noqa: E501

        Returns a pipeline execution by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_execution(program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PipelineExecution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_execution_with_http_info(program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_execution_with_http_info(self, program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get pipeline execution  # noqa: E501

        Returns a pipeline execution by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_execution_with_http_info(program_id, pipeline_id, execution_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PipelineExecution, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'execution_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_execution" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_execution`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_execution`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and ('execution_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['execution_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `get_execution`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_execution`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_execution`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501
        if 'execution_id' in local_var_params:
            path_params['executionId'] = local_var_params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecution',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_executions(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """List Executions  # noqa: E501

        Returns the history of pipeline executions in a newest to oldest order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_executions(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str start: Pagination start parameter
        :param int limit: Pagination limit parameter
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PipelineExecutionListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_executions_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_executions_with_http_info(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """List Executions  # noqa: E501

        Returns the history of pipeline executions in a newest to oldest order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_executions_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str start: Pagination start parameter
        :param int limit: Pagination limit parameter
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PipelineExecutionListRepresentation, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'start',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_executions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_executions`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_executions`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_executions`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_executions`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_executions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/executions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecutionListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_step_logs(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get logs  # noqa: E501

        Get the logs associated with a step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_logs(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str file: Identifier of the log file
        :param str accept: Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_step_logs_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_step_logs_with_http_info(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get logs  # noqa: E501

        Get the logs associated with a step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_step_logs_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str file: Identifier of the log file
        :param str accept: Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'execution_id',
            'phase_id',
            'step_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'file',
            'accept'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_step_logs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and ('execution_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['execution_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'phase_id' is set
        if self.api_client.client_side_validation and ('phase_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['phase_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `phase_id` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['step_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step_id` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_step_logs`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_step_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501
        if 'execution_id' in local_var_params:
            path_params['executionId'] = local_var_params['execution_id']  # noqa: E501
        if 'phase_id' in local_var_params:
            path_params['phaseId'] = local_var_params['phase_id']  # noqa: E501
        if 'step_id' in local_var_params:
            path_params['stepId'] = local_var_params['step_id']  # noqa: E501

        query_params = []
        if 'file' in local_var_params and local_var_params['file'] is not None:  # noqa: E501
            query_params.append(('file', local_var_params['file']))  # noqa: E501

        header_params = {}
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_pipeline(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, **kwargs):  # noqa: E501
        """Start the pipeline  # noqa: E501

        Starts the Pipeline. This works only if the pipeline is not already started.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.start_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, **kwargs)  # noqa: E501

    def start_pipeline_with_http_info(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, **kwargs):  # noqa: E501
        """Start the pipeline  # noqa: E501

        Starts the Pipeline. This works only if the pipeline is not already started.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'content_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `start_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `start_pipeline`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `start_pipeline`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `start_pipeline`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `start_pipeline`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `start_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501
        if 'content_type' in local_var_params:
            header_params['Content-Type'] = local_var_params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def step_metric(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get step metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.step_metric(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PipelineStepMetrics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.step_metric_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def step_metric_with_http_info(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get step metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.step_metric_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PipelineStepMetrics, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'execution_id',
            'phase_id',
            'step_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method step_metric" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and ('execution_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['execution_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'phase_id' is set
        if self.api_client.client_side_validation and ('phase_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['phase_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `phase_id` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['step_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step_id` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `step_metric`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `step_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501
        if 'execution_id' in local_var_params:
            path_params['executionId'] = local_var_params['execution_id']  # noqa: E501
        if 'phase_id' in local_var_params:
            path_params['phaseId'] = local_var_params['phase_id']  # noqa: E501
        if 'step_id' in local_var_params:
            path_params['stepId'] = local_var_params['step_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineStepMetrics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def step_state(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get step state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.step_state(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PipelineExecutionStepState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.step_state_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def step_state_with_http_info(self, program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get step state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.step_state_with_http_info(program_id, pipeline_id, execution_id, phase_id, step_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program. (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str execution_id: Identifier of the execution (required)
        :param str phase_id: Identifier of the phase (required)
        :param str step_id: Identifier of the step (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PipelineExecutionStepState, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'execution_id',
            'phase_id',
            'step_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method step_state" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and ('execution_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['execution_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'phase_id' is set
        if self.api_client.client_side_validation and ('phase_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['phase_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `phase_id` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['step_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `step_id` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `step_state`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `step_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501
        if 'execution_id' in local_var_params:
            path_params['executionId'] = local_var_params['execution_id']  # noqa: E501
        if 'phase_id' in local_var_params:
            path_params['phaseId'] = local_var_params['phase_id']  # noqa: E501
        if 'step_id' in local_var_params:
            path_params['stepId'] = local_var_params['step_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecutionStepState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
