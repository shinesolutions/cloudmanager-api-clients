# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyaemcloudmanagerapi.api_client import ApiClient
from pyaemcloudmanagerapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EnvironmentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_environment(self, program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """DeleteEnvironment  # noqa: E501

        Delete environment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_environment(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the application (required)
        :param str environment_id: Identifier of the environment (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def delete_environment_with_http_info(self, program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """DeleteEnvironment  # noqa: E501

        Delete environment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the application (required)
        :param str environment_id: Identifier of the environment (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Environment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'environment_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_environment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `delete_environment`")  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and ('environment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['environment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `environment_id` when calling `delete_environment`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `delete_environment`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `delete_environment`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `delete_environment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'environment_id' in local_var_params:
            path_params['environmentId'] = local_var_params['environment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/environment/{environmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Environment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_logs(self, program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Download Logs  # noqa: E501

        Download environment logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_logs(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str environment_id: Identifier of the environment (required)
        :param str service: Name of service (required)
        :param str name: Name of log (required)
        :param str date: date for which log is required (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str accept: Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.download_logs_with_http_info(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def download_logs_with_http_info(self, program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Download Logs  # noqa: E501

        Download environment logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_logs_with_http_info(program_id, environment_id, service, name, date, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str environment_id: Identifier of the environment (required)
        :param str service: Name of service (required)
        :param str name: Name of log (required)
        :param str date: date for which log is required (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str accept: Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'environment_id',
            'service',
            'name',
            'date',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'accept'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_logs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and ('environment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['environment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `environment_id` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'service' is set
        if self.api_client.client_side_validation and ('service' not in local_var_params or  # noqa: E501
                                                        local_var_params['service'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `service` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'date' is set
        if self.api_client.client_side_validation and ('date' not in local_var_params or  # noqa: E501
                                                        local_var_params['date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `date` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `download_logs`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `download_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'environment_id' in local_var_params:
            path_params['environmentId'] = local_var_params['environment_id']  # noqa: E501

        query_params = []
        if 'service' in local_var_params and local_var_params['service'] is not None:  # noqa: E501
            query_params.append(('service', local_var_params['service']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'date' in local_var_params and local_var_params['date'] is not None:  # noqa: E501
            query_params.append(('date', local_var_params['date']))  # noqa: E501

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/environment/{environmentId}/logs/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_environment(self, program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get Environment  # noqa: E501

        Returns an environment by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str environment_id: Identifier of the environment (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_environment_with_http_info(self, program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get Environment  # noqa: E501

        Returns an environment by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment_with_http_info(program_id, environment_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str environment_id: Identifier of the environment (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Environment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'environment_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_environment`")  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and ('environment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['environment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `environment_id` when calling `get_environment`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_environment`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_environment`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_environment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'environment_id' in local_var_params:
            path_params['environmentId'] = local_var_params['environment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/environment/{environmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Environment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_environment_logs(self, program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get Environment Logs  # noqa: E501

        List all logs available in environment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment_logs(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str environment_id: Identifier of the environment (required)
        :param int days: number of days for which logs are required (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param list[str] service: Names of services
        :param list[str] name: Names of log
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EnvironmentLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_environment_logs_with_http_info(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_environment_logs_with_http_info(self, program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get Environment Logs  # noqa: E501

        List all logs available in environment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environment_logs_with_http_info(program_id, environment_id, days, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str environment_id: Identifier of the environment (required)
        :param int days: number of days for which logs are required (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param list[str] service: Names of services
        :param list[str] name: Names of log
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentLogs, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'environment_id',
            'days',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'service',
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_logs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_environment_logs`")  # noqa: E501
        # verify the required parameter 'environment_id' is set
        if self.api_client.client_side_validation and ('environment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['environment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `environment_id` when calling `get_environment_logs`")  # noqa: E501
        # verify the required parameter 'days' is set
        if self.api_client.client_side_validation and ('days' not in local_var_params or  # noqa: E501
                                                        local_var_params['days'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `days` when calling `get_environment_logs`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_environment_logs`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_environment_logs`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_environment_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'environment_id' in local_var_params:
            path_params['environmentId'] = local_var_params['environment_id']  # noqa: E501

        query_params = []
        if 'service' in local_var_params and local_var_params['service'] is not None:  # noqa: E501
            query_params.append(('service', local_var_params['service']))  # noqa: E501
            collection_formats['service'] = 'multi'  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
            collection_formats['name'] = 'multi'  # noqa: E501
        if 'days' in local_var_params and local_var_params['days'] is not None:  # noqa: E501
            query_params.append(('days', local_var_params['days']))  # noqa: E501

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/environment/{environmentId}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentLogs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_environments(self, program_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """List Environments  # noqa: E501

        Lists all environments in an program  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments(program_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str type: Type of the environment
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EnvironmentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_environments_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_environments_with_http_info(self, program_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """List Environments  # noqa: E501

        Lists all environments in an program  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_environments_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str type: Type of the environment
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnvironmentList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_environments`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_environments`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_environments`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_environments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/environments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnvironmentList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
