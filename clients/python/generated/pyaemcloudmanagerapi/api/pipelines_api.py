# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pyaemcloudmanagerapi.api_client import ApiClient
from pyaemcloudmanagerapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PipelinesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_pipeline(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Delete a Pipeline  # noqa: E501

        Delete a pipeline. All the data is wiped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def delete_pipeline_with_http_info(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Delete a Pipeline  # noqa: E501

        Delete a pipeline. All the data is wiped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `delete_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `delete_pipeline`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `delete_pipeline`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `delete_pipeline`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `delete_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get Pipeline  # noqa: E501

        Returns a pipeline by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_pipeline_with_http_info(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """Get Pipeline  # noqa: E501

        Returns a pipeline by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Pipeline, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_pipeline`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_pipeline`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipelines(self, program_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """List Pipelines  # noqa: E501

        Returns all the pipelines that the requesting user has access to in an program  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipelines(program_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PipelineList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipelines_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs)  # noqa: E501

    def get_pipelines_with_http_info(self, program_id, x_gw_ims_org_id, authorization, x_api_key, **kwargs):  # noqa: E501
        """List Pipelines  # noqa: E501

        Returns all the pipelines that the requesting user has access to in an program  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipelines_with_http_info(program_id, x_gw_ims_org_id, authorization, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PipelineList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipelines" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `get_pipelines`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `get_pipelines`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `get_pipelines`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `get_pipelines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_pipeline(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs):  # noqa: E501
        """Patches Pipeline  # noqa: E501

        Patches a pipeline within an program.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_pipeline(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param Pipeline body: The updated Pipeline (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs)  # noqa: E501

    def patch_pipeline_with_http_info(self, program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, **kwargs):  # noqa: E501
        """Patches Pipeline  # noqa: E501

        Patches a pipeline within an program.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_pipeline_with_http_info(program_id, pipeline_id, x_gw_ims_org_id, authorization, x_api_key, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str program_id: Identifier of the program (required)
        :param str pipeline_id: Identifier of the pipeline (required)
        :param str x_gw_ims_org_id: IMS organization ID that the request is being made under. (required)
        :param str authorization: Bearer [token] - An access token for the technical account created through integration with Adobe IO (required)
        :param str x_api_key: IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io (required)
        :param str content_type: Must always be application/json (required)
        :param Pipeline body: The updated Pipeline (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Pipeline, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'program_id',
            'pipeline_id',
            'x_gw_ims_org_id',
            'authorization',
            'x_api_key',
            'content_type',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'program_id' is set
        if self.api_client.client_side_validation and ('program_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['program_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `program_id` when calling `patch_pipeline`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `patch_pipeline`")  # noqa: E501
        # verify the required parameter 'x_gw_ims_org_id' is set
        if self.api_client.client_side_validation and ('x_gw_ims_org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_gw_ims_org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_gw_ims_org_id` when calling `patch_pipeline`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in local_var_params or  # noqa: E501
                                                        local_var_params['authorization'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `authorization` when calling `patch_pipeline`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if self.api_client.client_side_validation and ('x_api_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['x_api_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_api_key` when calling `patch_pipeline`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `patch_pipeline`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `patch_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'program_id' in local_var_params:
            path_params['programId'] = local_var_params['program_id']  # noqa: E501
        if 'pipeline_id' in local_var_params:
            path_params['pipelineId'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_gw_ims_org_id' in local_var_params:
            header_params['x-gw-ims-org-id'] = local_var_params['x_gw_ims_org_id']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['x-api-key'] = local_var_params['x_api_key']  # noqa: E501
        if 'content_type' in local_var_params:
            header_params['Content-Type'] = local_var_params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/program/{programId}/pipeline/{pipelineId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
