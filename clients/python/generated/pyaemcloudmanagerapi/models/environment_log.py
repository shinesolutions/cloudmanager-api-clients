# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class EnvironmentLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service': 'str',
        'name': 'str',
        'date': 'str',
        'program_id': 'int',
        'environment_id': 'int',
        'links': 'EnvironmentLogLinks'
    }

    attribute_map = {
        'service': 'service',
        'name': 'name',
        'date': 'date',
        'program_id': 'programId',
        'environment_id': 'environmentId',
        'links': '_links'
    }

    def __init__(self, service=None, name=None, date=None, program_id=None, environment_id=None, links=None, local_vars_configuration=None):  # noqa: E501
        """EnvironmentLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._service = None
        self._name = None
        self._date = None
        self._program_id = None
        self._environment_id = None
        self._links = None
        self.discriminator = None

        if service is not None:
            self.service = service
        if name is not None:
            self.name = name
        if date is not None:
            self.date = date
        if program_id is not None:
            self.program_id = program_id
        if environment_id is not None:
            self.environment_id = environment_id
        if links is not None:
            self.links = links

    @property
    def service(self):
        """Gets the service of this EnvironmentLog.  # noqa: E501

        Name of the service  # noqa: E501

        :return: The service of this EnvironmentLog.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EnvironmentLog.

        Name of the service  # noqa: E501

        :param service: The service of this EnvironmentLog.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def name(self):
        """Gets the name of this EnvironmentLog.  # noqa: E501

        Name of the Log  # noqa: E501

        :return: The name of this EnvironmentLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentLog.

        Name of the Log  # noqa: E501

        :param name: The name of this EnvironmentLog.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def date(self):
        """Gets the date of this EnvironmentLog.  # noqa: E501

        date of the Log  # noqa: E501

        :return: The date of this EnvironmentLog.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this EnvironmentLog.

        date of the Log  # noqa: E501

        :param date: The date of this EnvironmentLog.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def program_id(self):
        """Gets the program_id of this EnvironmentLog.  # noqa: E501


        :return: The program_id of this EnvironmentLog.  # noqa: E501
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this EnvironmentLog.


        :param program_id: The program_id of this EnvironmentLog.  # noqa: E501
        :type: int
        """

        self._program_id = program_id

    @property
    def environment_id(self):
        """Gets the environment_id of this EnvironmentLog.  # noqa: E501


        :return: The environment_id of this EnvironmentLog.  # noqa: E501
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this EnvironmentLog.


        :param environment_id: The environment_id of this EnvironmentLog.  # noqa: E501
        :type: int
        """

        self._environment_id = environment_id

    @property
    def links(self):
        """Gets the links of this EnvironmentLog.  # noqa: E501


        :return: The links of this EnvironmentLog.  # noqa: E501
        :rtype: EnvironmentLogLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EnvironmentLog.


        :param links: The links of this EnvironmentLog.  # noqa: E501
        :type: EnvironmentLogLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvironmentLog):
            return True

        return self.to_dict() != other.to_dict()
