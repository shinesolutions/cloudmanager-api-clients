# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class PipelinePhase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'str',
        'repository_id': 'str',
        'branch': 'str',
        'environment_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'repository_id': 'repositoryId',
        'branch': 'branch',
        'environment_id': 'environmentId'
    }

    def __init__(self, name=None, type=None, repository_id=None, branch=None, environment_id=None, local_vars_configuration=None):  # noqa: E501
        """PipelinePhase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._repository_id = None
        self._branch = None
        self._environment_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.type = type
        if repository_id is not None:
            self.repository_id = repository_id
        if branch is not None:
            self.branch = branch
        if environment_id is not None:
            self.environment_id = environment_id

    @property
    def name(self):
        """Gets the name of this PipelinePhase.  # noqa: E501

        Name of the phase  # noqa: E501

        :return: The name of this PipelinePhase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelinePhase.

        Name of the phase  # noqa: E501

        :param name: The name of this PipelinePhase.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PipelinePhase.  # noqa: E501

        Type of the phase  # noqa: E501

        :return: The type of this PipelinePhase.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PipelinePhase.

        Type of the phase  # noqa: E501

        :param type: The type of this PipelinePhase.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["VALIDATE", "BUILD", "DEPLOY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def repository_id(self):
        """Gets the repository_id of this PipelinePhase.  # noqa: E501

        Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD  # noqa: E501

        :return: The repository_id of this PipelinePhase.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this PipelinePhase.

        Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD  # noqa: E501

        :param repository_id: The repository_id of this PipelinePhase.  # noqa: E501
        :type: str
        """

        self._repository_id = repository_id

    @property
    def branch(self):
        """Gets the branch of this PipelinePhase.  # noqa: E501

        Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.  # noqa: E501

        :return: The branch of this PipelinePhase.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this PipelinePhase.

        Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.  # noqa: E501

        :param branch: The branch of this PipelinePhase.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def environment_id(self):
        """Gets the environment_id of this PipelinePhase.  # noqa: E501

        Identifier of the target environment. Mandatory if type=DEPLOY  # noqa: E501

        :return: The environment_id of this PipelinePhase.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this PipelinePhase.

        Identifier of the target environment. Mandatory if type=DEPLOY  # noqa: E501

        :param environment_id: The environment_id of this PipelinePhase.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelinePhase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelinePhase):
            return True

        return self.to_dict() != other.to_dict()
