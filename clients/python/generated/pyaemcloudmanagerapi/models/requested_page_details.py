# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class RequestedPageDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start': 'int',
        'limit': 'int',
        'order_by': 'str',
        '_property': 'list[str]',
        'type': 'str',
        'next': 'int',
        'prev': 'int'
    }

    attribute_map = {
        'start': 'start',
        'limit': 'limit',
        'order_by': 'orderBy',
        '_property': 'property',
        'type': 'type',
        'next': 'next',
        'prev': 'prev'
    }

    def __init__(self, start=None, limit=None, order_by=None, _property=None, type=None, next=None, prev=None, local_vars_configuration=None):  # noqa: E501
        """RequestedPageDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._start = None
        self._limit = None
        self._order_by = None
        self.__property = None
        self._type = None
        self._next = None
        self._prev = None
        self.discriminator = None

        if start is not None:
            self.start = start
        if limit is not None:
            self.limit = limit
        if order_by is not None:
            self.order_by = order_by
        if _property is not None:
            self._property = _property
        if type is not None:
            self.type = type
        if next is not None:
            self.next = next
        if prev is not None:
            self.prev = prev

    @property
    def start(self):
        """Gets the start of this RequestedPageDetails.  # noqa: E501


        :return: The start of this RequestedPageDetails.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RequestedPageDetails.


        :param start: The start of this RequestedPageDetails.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def limit(self):
        """Gets the limit of this RequestedPageDetails.  # noqa: E501


        :return: The limit of this RequestedPageDetails.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this RequestedPageDetails.


        :param limit: The limit of this RequestedPageDetails.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def order_by(self):
        """Gets the order_by of this RequestedPageDetails.  # noqa: E501


        :return: The order_by of this RequestedPageDetails.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this RequestedPageDetails.


        :param order_by: The order_by of this RequestedPageDetails.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def _property(self):
        """Gets the _property of this RequestedPageDetails.  # noqa: E501


        :return: The _property of this RequestedPageDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this RequestedPageDetails.


        :param _property: The _property of this RequestedPageDetails.  # noqa: E501
        :type: list[str]
        """

        self.__property = _property

    @property
    def type(self):
        """Gets the type of this RequestedPageDetails.  # noqa: E501


        :return: The type of this RequestedPageDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestedPageDetails.


        :param type: The type of this RequestedPageDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def next(self):
        """Gets the next of this RequestedPageDetails.  # noqa: E501


        :return: The next of this RequestedPageDetails.  # noqa: E501
        :rtype: int
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this RequestedPageDetails.


        :param next: The next of this RequestedPageDetails.  # noqa: E501
        :type: int
        """

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this RequestedPageDetails.  # noqa: E501


        :return: The prev of this RequestedPageDetails.  # noqa: E501
        :rtype: int
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this RequestedPageDetails.


        :param prev: The prev of this RequestedPageDetails.  # noqa: E501
        :type: int
        """

        self._prev = prev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestedPageDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestedPageDetails):
            return True

        return self.to_dict() != other.to_dict()
