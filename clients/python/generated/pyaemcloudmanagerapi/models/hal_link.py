# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class HalLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'href': 'str',
        'templated': 'bool',
        'type': 'str',
        'deprecation': 'str',
        'profile': 'str',
        'title': 'str',
        'hreflang': 'str',
        'name': 'str'
    }

    attribute_map = {
        'href': 'href',
        'templated': 'templated',
        'type': 'type',
        'deprecation': 'deprecation',
        'profile': 'profile',
        'title': 'title',
        'hreflang': 'hreflang',
        'name': 'name'
    }

    def __init__(self, href=None, templated=False, type=None, deprecation=None, profile=None, title=None, hreflang=None, name=None, local_vars_configuration=None):  # noqa: E501
        """HalLink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._href = None
        self._templated = None
        self._type = None
        self._deprecation = None
        self._profile = None
        self._title = None
        self._hreflang = None
        self._name = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if templated is not None:
            self.templated = templated
        if type is not None:
            self.type = type
        if deprecation is not None:
            self.deprecation = deprecation
        if profile is not None:
            self.profile = profile
        if title is not None:
            self.title = title
        if hreflang is not None:
            self.hreflang = hreflang
        if name is not None:
            self.name = name

    @property
    def href(self):
        """Gets the href of this HalLink.  # noqa: E501


        :return: The href of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this HalLink.


        :param href: The href of this HalLink.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def templated(self):
        """Gets the templated of this HalLink.  # noqa: E501


        :return: The templated of this HalLink.  # noqa: E501
        :rtype: bool
        """
        return self._templated

    @templated.setter
    def templated(self, templated):
        """Sets the templated of this HalLink.


        :param templated: The templated of this HalLink.  # noqa: E501
        :type: bool
        """

        self._templated = templated

    @property
    def type(self):
        """Gets the type of this HalLink.  # noqa: E501


        :return: The type of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HalLink.


        :param type: The type of this HalLink.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def deprecation(self):
        """Gets the deprecation of this HalLink.  # noqa: E501


        :return: The deprecation of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._deprecation

    @deprecation.setter
    def deprecation(self, deprecation):
        """Sets the deprecation of this HalLink.


        :param deprecation: The deprecation of this HalLink.  # noqa: E501
        :type: str
        """

        self._deprecation = deprecation

    @property
    def profile(self):
        """Gets the profile of this HalLink.  # noqa: E501


        :return: The profile of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this HalLink.


        :param profile: The profile of this HalLink.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def title(self):
        """Gets the title of this HalLink.  # noqa: E501


        :return: The title of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HalLink.


        :param title: The title of this HalLink.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def hreflang(self):
        """Gets the hreflang of this HalLink.  # noqa: E501


        :return: The hreflang of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._hreflang

    @hreflang.setter
    def hreflang(self, hreflang):
        """Sets the hreflang of this HalLink.


        :param hreflang: The hreflang of this HalLink.  # noqa: E501
        :type: str
        """

        self._hreflang = hreflang

    @property
    def name(self):
        """Gets the name of this HalLink.  # noqa: E501


        :return: The name of this HalLink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HalLink.


        :param name: The name of this HalLink.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HalLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HalLink):
            return True

        return self.to_dict() != other.to_dict()
