# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class Metric(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'severity': 'str',
        'passed': 'bool',
        'override': 'bool',
        'actual_value': 'str',
        'expected_value': 'str',
        'comparator': 'str',
        'kpi': 'str'
    }

    attribute_map = {
        'id': 'id',
        'severity': 'severity',
        'passed': 'passed',
        'override': 'override',
        'actual_value': 'actualValue',
        'expected_value': 'expectedValue',
        'comparator': 'comparator',
        'kpi': 'kpi'
    }

    def __init__(self, id=None, severity=None, passed=False, override=False, actual_value=None, expected_value=None, comparator=None, kpi=None, local_vars_configuration=None):  # noqa: E501
        """Metric - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._severity = None
        self._passed = None
        self._override = None
        self._actual_value = None
        self._expected_value = None
        self._comparator = None
        self._kpi = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if severity is not None:
            self.severity = severity
        if passed is not None:
            self.passed = passed
        if override is not None:
            self.override = override
        if actual_value is not None:
            self.actual_value = actual_value
        if expected_value is not None:
            self.expected_value = expected_value
        if comparator is not None:
            self.comparator = comparator
        if kpi is not None:
            self.kpi = kpi

    @property
    def id(self):
        """Gets the id of this Metric.  # noqa: E501

        KPI result identifier  # noqa: E501

        :return: The id of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metric.

        KPI result identifier  # noqa: E501

        :param id: The id of this Metric.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def severity(self):
        """Gets the severity of this Metric.  # noqa: E501

        Severity of the metric  # noqa: E501

        :return: The severity of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Metric.

        Severity of the metric  # noqa: E501

        :param severity: The severity of this Metric.  # noqa: E501
        :type: str
        """
        allowed_values = ["critical", "important", "informational"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and severity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def passed(self):
        """Gets the passed of this Metric.  # noqa: E501

        Whether metric is considered passed  # noqa: E501

        :return: The passed of this Metric.  # noqa: E501
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this Metric.

        Whether metric is considered passed  # noqa: E501

        :param passed: The passed of this Metric.  # noqa: E501
        :type: bool
        """

        self._passed = passed

    @property
    def override(self):
        """Gets the override of this Metric.  # noqa: E501

        Whether user override the failed metric  # noqa: E501

        :return: The override of this Metric.  # noqa: E501
        :rtype: bool
        """
        return self._override

    @override.setter
    def override(self, override):
        """Sets the override of this Metric.

        Whether user override the failed metric  # noqa: E501

        :param override: The override of this Metric.  # noqa: E501
        :type: bool
        """

        self._override = override

    @property
    def actual_value(self):
        """Gets the actual_value of this Metric.  # noqa: E501

        Expected value for the metric  # noqa: E501

        :return: The actual_value of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this Metric.

        Expected value for the metric  # noqa: E501

        :param actual_value: The actual_value of this Metric.  # noqa: E501
        :type: str
        """

        self._actual_value = actual_value

    @property
    def expected_value(self):
        """Gets the expected_value of this Metric.  # noqa: E501

        Expected value for the metric  # noqa: E501

        :return: The expected_value of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this Metric.

        Expected value for the metric  # noqa: E501

        :param expected_value: The expected_value of this Metric.  # noqa: E501
        :type: str
        """

        self._expected_value = expected_value

    @property
    def comparator(self):
        """Gets the comparator of this Metric.  # noqa: E501

        Comparator used for the metric  # noqa: E501

        :return: The comparator of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this Metric.

        Comparator used for the metric  # noqa: E501

        :param comparator: The comparator of this Metric.  # noqa: E501
        :type: str
        """
        allowed_values = ["GT", "GTE", "LT", "LTE", "EQ", "NEQ"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and comparator not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `comparator` ({0}), must be one of {1}"  # noqa: E501
                .format(comparator, allowed_values)
            )

        self._comparator = comparator

    @property
    def kpi(self):
        """Gets the kpi of this Metric.  # noqa: E501

        KPI identifier  # noqa: E501

        :return: The kpi of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._kpi

    @kpi.setter
    def kpi(self, kpi):
        """Sets the kpi of this Metric.

        KPI identifier  # noqa: E501

        :param kpi: The kpi of this Metric.  # noqa: E501
        :type: str
        """

        self._kpi = kpi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Metric):
            return True

        return self.to_dict() != other.to_dict()
