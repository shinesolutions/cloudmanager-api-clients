# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class PipelineExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'program_id': 'str',
        'pipeline_id': 'str',
        'artifacts_version': 'str',
        'user': 'str',
        'status': 'str',
        'trigger': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'finished_at': 'datetime',
        'embedded': 'PipelineExecutionEmbedded',
        'links': 'PipelineExecutionLinks'
    }

    attribute_map = {
        'id': 'id',
        'program_id': 'programId',
        'pipeline_id': 'pipelineId',
        'artifacts_version': 'artifactsVersion',
        'user': 'user',
        'status': 'status',
        'trigger': 'trigger',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'finished_at': 'finishedAt',
        'embedded': '_embedded',
        'links': '_links'
    }

    def __init__(self, id=None, program_id=None, pipeline_id=None, artifacts_version=None, user=None, status=None, trigger=None, created_at=None, updated_at=None, finished_at=None, embedded=None, links=None, local_vars_configuration=None):  # noqa: E501
        """PipelineExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._program_id = None
        self._pipeline_id = None
        self._artifacts_version = None
        self._user = None
        self._status = None
        self._trigger = None
        self._created_at = None
        self._updated_at = None
        self._finished_at = None
        self._embedded = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if program_id is not None:
            self.program_id = program_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if artifacts_version is not None:
            self.artifacts_version = artifacts_version
        if user is not None:
            self.user = user
        if status is not None:
            self.status = status
        if trigger is not None:
            self.trigger = trigger
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if finished_at is not None:
            self.finished_at = finished_at
        if embedded is not None:
            self.embedded = embedded
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this PipelineExecution.  # noqa: E501

        Pipeline execution identifier  # noqa: E501

        :return: The id of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineExecution.

        Pipeline execution identifier  # noqa: E501

        :param id: The id of this PipelineExecution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def program_id(self):
        """Gets the program_id of this PipelineExecution.  # noqa: E501

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The program_id of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this PipelineExecution.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param program_id: The program_id of this PipelineExecution.  # noqa: E501
        :type: str
        """

        self._program_id = program_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineExecution.  # noqa: E501

        Identifier of the pipeline. Unique within the space.  # noqa: E501

        :return: The pipeline_id of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineExecution.

        Identifier of the pipeline. Unique within the space.  # noqa: E501

        :param pipeline_id: The pipeline_id of this PipelineExecution.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def artifacts_version(self):
        """Gets the artifacts_version of this PipelineExecution.  # noqa: E501

        Version of the artifacts generated during this execution  # noqa: E501

        :return: The artifacts_version of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._artifacts_version

    @artifacts_version.setter
    def artifacts_version(self, artifacts_version):
        """Sets the artifacts_version of this PipelineExecution.

        Version of the artifacts generated during this execution  # noqa: E501

        :param artifacts_version: The artifacts_version of this PipelineExecution.  # noqa: E501
        :type: str
        """

        self._artifacts_version = artifacts_version

    @property
    def user(self):
        """Gets the user of this PipelineExecution.  # noqa: E501

        AdobeID who started the pipeline. Empty for auto triggered builds  # noqa: E501

        :return: The user of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PipelineExecution.

        AdobeID who started the pipeline. Empty for auto triggered builds  # noqa: E501

        :param user: The user of this PipelineExecution.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def status(self):
        """Gets the status of this PipelineExecution.  # noqa: E501

        Status of the execution  # noqa: E501

        :return: The status of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineExecution.

        Status of the execution  # noqa: E501

        :param status: The status of this PipelineExecution.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_STARTED", "RUNNING", "CANCELLING", "CANCELLED", "FINISHED", "ERROR", "FAILED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trigger(self):
        """Gets the trigger of this PipelineExecution.  # noqa: E501

        How the execution was triggered.  # noqa: E501

        :return: The trigger of this PipelineExecution.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this PipelineExecution.

        How the execution was triggered.  # noqa: E501

        :param trigger: The trigger of this PipelineExecution.  # noqa: E501
        :type: str
        """
        allowed_values = ["ON_COMMIT", "MANUAL", "SCHEDULE", "PUSH_UPGRADES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and trigger not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def created_at(self):
        """Gets the created_at of this PipelineExecution.  # noqa: E501

        Start time  # noqa: E501

        :return: The created_at of this PipelineExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PipelineExecution.

        Start time  # noqa: E501

        :param created_at: The created_at of this PipelineExecution.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PipelineExecution.  # noqa: E501

        Date of last status change  # noqa: E501

        :return: The updated_at of this PipelineExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PipelineExecution.

        Date of last status change  # noqa: E501

        :param updated_at: The updated_at of this PipelineExecution.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def finished_at(self):
        """Gets the finished_at of this PipelineExecution.  # noqa: E501

        Date the execution reached a final state  # noqa: E501

        :return: The finished_at of this PipelineExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this PipelineExecution.

        Date the execution reached a final state  # noqa: E501

        :param finished_at: The finished_at of this PipelineExecution.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def embedded(self):
        """Gets the embedded of this PipelineExecution.  # noqa: E501


        :return: The embedded of this PipelineExecution.  # noqa: E501
        :rtype: PipelineExecutionEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this PipelineExecution.


        :param embedded: The embedded of this PipelineExecution.  # noqa: E501
        :type: PipelineExecutionEmbedded
        """

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this PipelineExecution.  # noqa: E501


        :return: The links of this PipelineExecution.  # noqa: E501
        :rtype: PipelineExecutionLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PipelineExecution.


        :param links: The links of this PipelineExecution.  # noqa: E501
        :type: PipelineExecutionLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineExecution):
            return True

        return self.to_dict() != other.to_dict()
