# coding: utf-8

"""
    Cloud Manager API

    This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pyaemcloudmanagerapi.configuration import Configuration


class Environment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'program_id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'str',
        'links': 'EnvironmentLinks'
    }

    attribute_map = {
        'id': 'id',
        'program_id': 'programId',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'links': '_links'
    }

    def __init__(self, id=None, program_id=None, name=None, description=None, type=None, links=None, local_vars_configuration=None):  # noqa: E501
        """Environment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._program_id = None
        self._name = None
        self._description = None
        self._type = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if program_id is not None:
            self.program_id = program_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this Environment.  # noqa: E501

        id  # noqa: E501

        :return: The id of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.

        id  # noqa: E501

        :param id: The id of this Environment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def program_id(self):
        """Gets the program_id of this Environment.  # noqa: E501

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The program_id of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this Environment.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param program_id: The program_id of this Environment.  # noqa: E501
        :type: str
        """

        self._program_id = program_id

    @property
    def name(self):
        """Gets the name of this Environment.  # noqa: E501

        Name of the environment  # noqa: E501

        :return: The name of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.

        Name of the environment  # noqa: E501

        :param name: The name of this Environment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Environment.  # noqa: E501

        Description of the environment  # noqa: E501

        :return: The description of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.

        Description of the environment  # noqa: E501

        :param description: The description of this Environment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Environment.  # noqa: E501

        Type of the environment  # noqa: E501

        :return: The type of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Environment.

        Type of the environment  # noqa: E501

        :param type: The type of this Environment.  # noqa: E501
        :type: str
        """
        allowed_values = ["dev", "stage", "prod"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def links(self):
        """Gets the links of this Environment.  # noqa: E501


        :return: The links of this Environment.  # noqa: E501
        :rtype: EnvironmentLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Environment.


        :param links: The links of this Environment.  # noqa: E501
        :type: EnvironmentLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Environment):
            return True

        return self.to_dict() != other.to_dict()
