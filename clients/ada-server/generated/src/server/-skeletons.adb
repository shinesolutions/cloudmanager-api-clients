--  Cloud Manager API
--  This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager_api_docs/master/swagger_specs/api.yaml.
--
--  The version of the OpenAPI document: 1.0.0
--  Contact: opensource@shinesolutions.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 4.3.1-SNAPSHOT.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is

   package body Skeleton is


      package API_Get_Branches is
         new Swagger.Servers.Operation (Handler => Get_Branches,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/repository/{repositoryId}/branches");

      --  List Branches
      procedure Get_Branches
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Repository_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.BranchList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Repository_Id);
         Impl.Get_Branches
            (Program_Id,
             Repository_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Branches;

      package API_Delete_Environment is
         new Swagger.Servers.Operation (Handler => Delete_Environment,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}");

      --  DeleteEnvironment
      procedure Delete_Environment
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Environment_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Impl.Delete_Environment
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Environment;

      package API_Download_Logs is
         new Swagger.Servers.Operation (Handler => Download_Logs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/logs/download");

      --  Download Logs
      procedure Download_Logs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         Service : Swagger.UString;
         Name : Swagger.UString;
         Date : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         P_Accept : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "service", Service);
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "date", Date);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Impl.Download_Logs
            (Program_Id,
             Environment_Id,
             Service,
             Name,
             Date,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             P_Accept, Context);

      end Download_Logs;

      package API_Get_Environment is
         new Swagger.Servers.Operation (Handler => Get_Environment,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}");

      --  Get Environment
      procedure Get_Environment
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Environment_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Impl.Get_Environment
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environment;

      package API_Get_Environment_Logs is
         new Swagger.Servers.Operation (Handler => Get_Environment_Logs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/logs");

      --  Get Environment Logs
      procedure Get_Environment_Logs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         Days : Integer;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Service : Swagger.UString_Vectors.Vector;
         Name : Swagger.UString_Vectors.Vector;
         Result : .Models.EnvironmentLogs_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "service", Service);
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "days", Days);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Impl.Get_Environment_Logs
            (Program_Id,
             Environment_Id,
             Days,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Service,
             Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environment_Logs;

      package API_Get_Environments is
         new Swagger.Servers.Operation (Handler => Get_Environments,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environments");

      --  List Environments
      procedure Get_Environments
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         P_Type : Swagger.Nullable_UString;
         Result : .Models.EnvironmentList_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "type", P_Type);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Impl.Get_Environments
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             P_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environments;

      package API_Advance_Pipeline_Execution is
         new Swagger.Servers.Operation (Handler => Advance_Pipeline_Execution,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance");

      --  Advance
      procedure Advance_Pipeline_Execution
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : Swagger.Object;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Impl.Advance_Pipeline_Execution
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Context);

      end Advance_Pipeline_Execution;

      package API_Cancel_Pipeline_Execution_Step is
         new Swagger.Servers.Operation (Handler => Cancel_Pipeline_Execution_Step,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel");

      --  Cancel
      procedure Cancel_Pipeline_Execution_Step
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : Swagger.Object;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Impl.Cancel_Pipeline_Execution_Step
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Context);

      end Cancel_Pipeline_Execution_Step;

      package API_Get_Current_Execution is
         new Swagger.Servers.Operation (Handler => Get_Current_Execution,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution");

      --  Get current pipeline execution
      procedure Get_Current_Execution
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineExecution_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Impl.Get_Current_Execution
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Current_Execution;

      package API_Get_Execution is
         new Swagger.Servers.Operation (Handler => Get_Execution,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}");

      --  Get pipeline execution
      procedure Get_Execution
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineExecution_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 3, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Execution_Id);
         Impl.Get_Execution
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Execution;

      package API_Get_Executions is
         new Swagger.Servers.Operation (Handler => Get_Executions,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/executions");

      --  List Executions
      procedure Get_Executions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Start : Swagger.Nullable_UString;
         Limit : Swagger.Nullable_Integer;
         Result : .Models.PipelineExecutionListRepresentation_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "start", Start);
         Swagger.Servers.Get_Query_Parameter (Req, "limit", Limit);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Impl.Get_Executions
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Start,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Executions;

      package API_Get_Step_Logs is
         new Swagger.Servers.Operation (Handler => Get_Step_Logs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs");

      --  Get logs
      procedure Get_Step_Logs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         File : Swagger.Nullable_UString;
         P_Accept : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "file", File);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Impl.Get_Step_Logs
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             File,
             P_Accept, Context);

      end Get_Step_Logs;

      package API_Start_Pipeline is
         new Swagger.Servers.Operation (Handler => Start_Pipeline,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution");

      --  Start the pipeline
      procedure Start_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Impl.Start_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type, Context);

      end Start_Pipeline;

      package API_Step_Metric is
         new Swagger.Servers.Operation (Handler => Step_Metric,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics");

      --  Get step metrics
      procedure Step_Metric
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineStepMetrics_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Impl.Step_Metric
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Step_Metric;

      package API_Step_State is
         new Swagger.Servers.Operation (Handler => Step_State,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}");

      --  Get step state
      procedure Step_State
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineExecutionStepState_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Impl.Step_State
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Step_State;

      package API_Delete_Pipeline is
         new Swagger.Servers.Operation (Handler => Delete_Pipeline,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}");

      --  Delete a Pipeline
      procedure Delete_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Impl.Delete_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Context);

      end Delete_Pipeline;

      package API_Get_Pipeline is
         new Swagger.Servers.Operation (Handler => Get_Pipeline,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}");

      --  Get Pipeline
      procedure Get_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Pipeline_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Impl.Get_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Pipeline;

      package API_Get_Pipelines is
         new Swagger.Servers.Operation (Handler => Get_Pipelines,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipelines");

      --  List Pipelines
      procedure Get_Pipelines
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Impl.Get_Pipelines
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Pipelines;

      package API_Patch_Pipeline is
         new Swagger.Servers.Operation (Handler => Patch_Pipeline,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}");

      --  Patches Pipeline
      procedure Patch_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : Pipeline_Type;
         Result : .Models.Pipeline_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Impl.Patch_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Patch_Pipeline;

      package API_Delete_Program is
         new Swagger.Servers.Operation (Handler => Delete_Program,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/api/program/{programId}");

      --  Delete Program
      procedure Delete_Program
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Program_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Impl.Delete_Program
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Program;

      package API_Get_Program is
         new Swagger.Servers.Operation (Handler => Get_Program,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}");

      --  Get Program
      procedure Get_Program
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Program_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Impl.Get_Program
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Program;

      package API_Get_Programs is
         new Swagger.Servers.Operation (Handler => Get_Programs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/programs");

      --  Lists Programs
      procedure Get_Programs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.ProgramList_Type;
      begin
         Impl.Get_Programs
            (X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Programs;

      package API_Get_Repositories is
         new Swagger.Servers.Operation (Handler => Get_Repositories,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/repositories");

      --  Lists Repositories
      procedure Get_Repositories
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.RepositoryList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Impl.Get_Repositories
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Repositories;

      package API_Get_Repository is
         new Swagger.Servers.Operation (Handler => Get_Repository,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/repository/{repositoryId}");

      --  Get Repository
      procedure Get_Repository
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Repository_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Repository_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Repository_Id);
         Impl.Get_Repository
            (Program_Id,
             Repository_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Repository;

      package API_Get_Environment_Variables is
         new Swagger.Servers.Operation (Handler => Get_Environment_Variables,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/variables");

      --  List User Environment Variables
      procedure Get_Environment_Variables
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.VariableList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Impl.Get_Environment_Variables
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environment_Variables;

      package API_Patch_Environment_Variables is
         new Swagger.Servers.Operation (Handler => Patch_Environment_Variables,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/variables");

      --  Patch User Environment Variables
      procedure Patch_Environment_Variables
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : .Models.Variable_Type_Vectors.Vector;
         Result : .Models.VariableList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Impl.Patch_Environment_Variables
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Patch_Environment_Variables;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Branches.Definition);
         Swagger.Servers.Register (Server, API_Delete_Environment.Definition);
         Swagger.Servers.Register (Server, API_Download_Logs.Definition);
         Swagger.Servers.Register (Server, API_Get_Environment.Definition);
         Swagger.Servers.Register (Server, API_Get_Environment_Logs.Definition);
         Swagger.Servers.Register (Server, API_Get_Environments.Definition);
         Swagger.Servers.Register (Server, API_Advance_Pipeline_Execution.Definition);
         Swagger.Servers.Register (Server, API_Cancel_Pipeline_Execution_Step.Definition);
         Swagger.Servers.Register (Server, API_Get_Current_Execution.Definition);
         Swagger.Servers.Register (Server, API_Get_Execution.Definition);
         Swagger.Servers.Register (Server, API_Get_Executions.Definition);
         Swagger.Servers.Register (Server, API_Get_Step_Logs.Definition);
         Swagger.Servers.Register (Server, API_Start_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Step_Metric.Definition);
         Swagger.Servers.Register (Server, API_Step_State.Definition);
         Swagger.Servers.Register (Server, API_Delete_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipelines.Definition);
         Swagger.Servers.Register (Server, API_Patch_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Delete_Program.Definition);
         Swagger.Servers.Register (Server, API_Get_Program.Definition);
         Swagger.Servers.Register (Server, API_Get_Programs.Definition);
         Swagger.Servers.Register (Server, API_Get_Repositories.Definition);
         Swagger.Servers.Register (Server, API_Get_Repository.Definition);
         Swagger.Servers.Register (Server, API_Get_Environment_Variables.Definition);
         Swagger.Servers.Register (Server, API_Patch_Environment_Variables.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  List Branches
      procedure Get_Branches
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Repository_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.BranchList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Repository_Id);
         Server.Get_Branches
            (Program_Id,
             Repository_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Branches;

      package API_Get_Branches is
         new Swagger.Servers.Operation (Handler => Get_Branches,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/repository/{repositoryId}/branches");

      --  DeleteEnvironment
      procedure Delete_Environment
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Environment_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Server.Delete_Environment
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Environment;

      package API_Delete_Environment is
         new Swagger.Servers.Operation (Handler => Delete_Environment,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}");

      --  Download Logs
      procedure Download_Logs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         Service : Swagger.UString;
         Name : Swagger.UString;
         Date : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         P_Accept : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "service", Service);
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "date", Date);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Server.Download_Logs
            (Program_Id,
             Environment_Id,
             Service,
             Name,
             Date,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             P_Accept, Context);

      end Download_Logs;

      package API_Download_Logs is
         new Swagger.Servers.Operation (Handler => Download_Logs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/logs/download");

      --  Get Environment
      procedure Get_Environment
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Environment_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Server.Get_Environment
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environment;

      package API_Get_Environment is
         new Swagger.Servers.Operation (Handler => Get_Environment,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}");

      --  Get Environment Logs
      procedure Get_Environment_Logs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         Days : Integer;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Service : Swagger.UString_Vectors.Vector;
         Name : Swagger.UString_Vectors.Vector;
         Result : .Models.EnvironmentLogs_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "service", Service);
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "days", Days);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Server.Get_Environment_Logs
            (Program_Id,
             Environment_Id,
             Days,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Service,
             Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environment_Logs;

      package API_Get_Environment_Logs is
         new Swagger.Servers.Operation (Handler => Get_Environment_Logs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/logs");

      --  List Environments
      procedure Get_Environments
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         P_Type : Swagger.Nullable_UString;
         Result : .Models.EnvironmentList_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "type", P_Type);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Server.Get_Environments
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             P_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environments;

      package API_Get_Environments is
         new Swagger.Servers.Operation (Handler => Get_Environments,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environments");

      --  Advance
      procedure Advance_Pipeline_Execution
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : Swagger.Object;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Advance_Pipeline_Execution
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Context);

      end Advance_Pipeline_Execution;

      package API_Advance_Pipeline_Execution is
         new Swagger.Servers.Operation (Handler => Advance_Pipeline_Execution,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance");

      --  Cancel
      procedure Cancel_Pipeline_Execution_Step
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : Swagger.Object;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Cancel_Pipeline_Execution_Step
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Context);

      end Cancel_Pipeline_Execution_Step;

      package API_Cancel_Pipeline_Execution_Step is
         new Swagger.Servers.Operation (Handler => Cancel_Pipeline_Execution_Step,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel");

      --  Get current pipeline execution
      procedure Get_Current_Execution
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineExecution_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Server.Get_Current_Execution
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Current_Execution;

      package API_Get_Current_Execution is
         new Swagger.Servers.Operation (Handler => Get_Current_Execution,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution");

      --  Get pipeline execution
      procedure Get_Execution
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineExecution_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 3, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 3, Execution_Id);
         Server.Get_Execution
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Execution;

      package API_Get_Execution is
         new Swagger.Servers.Operation (Handler => Get_Execution,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}");

      --  List Executions
      procedure Get_Executions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Start : Swagger.Nullable_UString;
         Limit : Swagger.Nullable_Integer;
         Result : .Models.PipelineExecutionListRepresentation_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "start", Start);
         Swagger.Servers.Get_Query_Parameter (Req, "limit", Limit);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Server.Get_Executions
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Start,
             Limit, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Executions;

      package API_Get_Executions is
         new Swagger.Servers.Operation (Handler => Get_Executions,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/executions");

      --  Get logs
      procedure Get_Step_Logs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         File : Swagger.Nullable_UString;
         P_Accept : Swagger.Nullable_UString;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "file", File);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Server.Get_Step_Logs
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             File,
             P_Accept, Context);

      end Get_Step_Logs;

      package API_Get_Step_Logs is
         new Swagger.Servers.Operation (Handler => Get_Step_Logs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs");

      --  Start the pipeline
      procedure Start_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Server.Start_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type, Context);

      end Start_Pipeline;

      package API_Start_Pipeline is
         new Swagger.Servers.Operation (Handler => Start_Pipeline,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution");

      --  Get step metrics
      procedure Step_Metric
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineStepMetrics_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Server.Step_Metric
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Step_Metric;

      package API_Step_Metric is
         new Swagger.Servers.Operation (Handler => Step_Metric,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics");

      --  Get step state
      procedure Step_State
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         Execution_Id : Swagger.UString;
         Phase_Id : Swagger.UString;
         Step_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineExecutionStepState_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 5, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Pipeline_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Execution_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Phase_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 5, Step_Id);
         Server.Step_State
            (Program_Id,
             Pipeline_Id,
             Execution_Id,
             Phase_Id,
             Step_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Step_State;

      package API_Step_State is
         new Swagger.Servers.Operation (Handler => Step_State,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}");

      --  Delete a Pipeline
      procedure Delete_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Server.Delete_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Context);

      end Delete_Pipeline;

      package API_Delete_Pipeline is
         new Swagger.Servers.Operation (Handler => Delete_Pipeline,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}");

      --  Get Pipeline
      procedure Get_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Pipeline_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Server.Get_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Pipeline;

      package API_Get_Pipeline is
         new Swagger.Servers.Operation (Handler => Get_Pipeline,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}");

      --  List Pipelines
      procedure Get_Pipelines
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.PipelineList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Server.Get_Pipelines
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Pipelines;

      package API_Get_Pipelines is
         new Swagger.Servers.Operation (Handler => Get_Pipelines,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipelines");

      --  Patches Pipeline
      procedure Patch_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Program_Id : Swagger.UString;
         Pipeline_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : Pipeline_Type;
         Result : .Models.Pipeline_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Pipeline_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Patch_Pipeline
            (Program_Id,
             Pipeline_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Patch_Pipeline;

      package API_Patch_Pipeline is
         new Swagger.Servers.Operation (Handler => Patch_Pipeline,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/api/program/{programId}/pipeline/{pipelineId}");

      --  Delete Program
      procedure Delete_Program
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Program_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Server.Delete_Program
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Program;

      package API_Delete_Program is
         new Swagger.Servers.Operation (Handler => Delete_Program,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/api/program/{programId}");

      --  Get Program
      procedure Get_Program
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Program_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Server.Get_Program
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Program;

      package API_Get_Program is
         new Swagger.Servers.Operation (Handler => Get_Program,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}");

      --  Lists Programs
      procedure Get_Programs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.ProgramList_Type;
      begin
         Server.Get_Programs
            (X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Programs;

      package API_Get_Programs is
         new Swagger.Servers.Operation (Handler => Get_Programs,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/programs");

      --  Lists Repositories
      procedure Get_Repositories
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.RepositoryList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Program_Id);
         Server.Get_Repositories
            (Program_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Repositories;

      package API_Get_Repositories is
         new Swagger.Servers.Operation (Handler => Get_Repositories,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/repositories");

      --  Get Repository
      procedure Get_Repository
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Repository_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.Repository_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Repository_Id);
         Server.Get_Repository
            (Program_Id,
             Repository_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Repository;

      package API_Get_Repository is
         new Swagger.Servers.Operation (Handler => Get_Repository,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/repository/{repositoryId}");

      --  List User Environment Variables
      procedure Get_Environment_Variables
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Result : .Models.VariableList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Server.Get_Environment_Variables
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Environment_Variables;

      package API_Get_Environment_Variables is
         new Swagger.Servers.Operation (Handler => Get_Environment_Variables,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/variables");

      --  Patch User Environment Variables
      procedure Patch_Environment_Variables
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Program_Id : Swagger.UString;
         Environment_Id : Swagger.UString;
         X_Gw_Ims_Org_Id : Swagger.UString;
         Authorization : Swagger.UString;
         X_Api_Key : Swagger.UString;
         Content_Type : Swagger.UString;
         P_Body : .Models.Variable_Type_Vectors.Vector;
         Result : .Models.VariableList_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 2, Program_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Environment_Id);
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Patch_Environment_Variables
            (Program_Id,
             Environment_Id,
             X_Gw_Ims_Org_Id,
             Authorization,
             X_Api_Key,
             Content_Type,
             P_Body, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Patch_Environment_Variables;

      package API_Patch_Environment_Variables is
         new Swagger.Servers.Operation (Handler => Patch_Environment_Variables,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/api/program/{programId}/environment/{environmentId}/variables");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Branches.Definition);
         Swagger.Servers.Register (Server, API_Delete_Environment.Definition);
         Swagger.Servers.Register (Server, API_Download_Logs.Definition);
         Swagger.Servers.Register (Server, API_Get_Environment.Definition);
         Swagger.Servers.Register (Server, API_Get_Environment_Logs.Definition);
         Swagger.Servers.Register (Server, API_Get_Environments.Definition);
         Swagger.Servers.Register (Server, API_Advance_Pipeline_Execution.Definition);
         Swagger.Servers.Register (Server, API_Cancel_Pipeline_Execution_Step.Definition);
         Swagger.Servers.Register (Server, API_Get_Current_Execution.Definition);
         Swagger.Servers.Register (Server, API_Get_Execution.Definition);
         Swagger.Servers.Register (Server, API_Get_Executions.Definition);
         Swagger.Servers.Register (Server, API_Get_Step_Logs.Definition);
         Swagger.Servers.Register (Server, API_Start_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Step_Metric.Definition);
         Swagger.Servers.Register (Server, API_Step_State.Definition);
         Swagger.Servers.Register (Server, API_Delete_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipelines.Definition);
         Swagger.Servers.Register (Server, API_Patch_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Delete_Program.Definition);
         Swagger.Servers.Register (Server, API_Get_Program.Definition);
         Swagger.Servers.Register (Server, API_Get_Programs.Definition);
         Swagger.Servers.Register (Server, API_Get_Repositories.Definition);
         Swagger.Servers.Register (Server, API_Get_Repository.Definition);
         Swagger.Servers.Register (Server, API_Get_Environment_Variables.Definition);
         Swagger.Servers.Register (Server, API_Patch_Environment_Variables.Definition);
      end Register;

      protected body Server is
         --  List Branches
         procedure Get_Branches
            (Program_Id : in Swagger.UString;
             Repository_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.BranchList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Branches
               (Program_Id,
                Repository_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Branches;

         --  DeleteEnvironment
         procedure Delete_Environment
            (Program_Id : in Swagger.UString;
             Environment_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.Environment_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Environment
               (Program_Id,
                Environment_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Delete_Environment;

         --  Download Logs
         procedure Download_Logs
            (Program_Id : in Swagger.UString;
             Environment_Id : in Swagger.UString;
             Service : in Swagger.UString;
             Name : in Swagger.UString;
             Date : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             P_Accept : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Download_Logs
               (Program_Id,
                Environment_Id,
                Service,
                Name,
                Date,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                P_Accept,
                Context);
         end Download_Logs;

         --  Get Environment
         procedure Get_Environment
            (Program_Id : in Swagger.UString;
             Environment_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.Environment_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Environment
               (Program_Id,
                Environment_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Environment;

         --  Get Environment Logs
         procedure Get_Environment_Logs
            (Program_Id : in Swagger.UString;
             Environment_Id : in Swagger.UString;
             Days : in Integer;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Service : in Swagger.UString_Vectors.Vector;
             Name : in Swagger.UString_Vectors.Vector;
             Result : out .Models.EnvironmentLogs_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Environment_Logs
               (Program_Id,
                Environment_Id,
                Days,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Service,
                Name,
                Result,
                Context);
         end Get_Environment_Logs;

         --  List Environments
         procedure Get_Environments
            (Program_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             P_Type : in Swagger.Nullable_UString;
             Result : out .Models.EnvironmentList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Environments
               (Program_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                P_Type,
                Result,
                Context);
         end Get_Environments;

         --  Advance
         procedure Advance_Pipeline_Execution
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             Execution_Id : in Swagger.UString;
             Phase_Id : in Swagger.UString;
             Step_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Content_Type : in Swagger.UString;
             P_Body : in Swagger.Object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Advance_Pipeline_Execution
               (Program_Id,
                Pipeline_Id,
                Execution_Id,
                Phase_Id,
                Step_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Content_Type,
                P_Body,
                Context);
         end Advance_Pipeline_Execution;

         --  Cancel
         procedure Cancel_Pipeline_Execution_Step
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             Execution_Id : in Swagger.UString;
             Phase_Id : in Swagger.UString;
             Step_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Content_Type : in Swagger.UString;
             P_Body : in Swagger.Object;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Cancel_Pipeline_Execution_Step
               (Program_Id,
                Pipeline_Id,
                Execution_Id,
                Phase_Id,
                Step_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Content_Type,
                P_Body,
                Context);
         end Cancel_Pipeline_Execution_Step;

         --  Get current pipeline execution
         procedure Get_Current_Execution
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.PipelineExecution_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Current_Execution
               (Program_Id,
                Pipeline_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Current_Execution;

         --  Get pipeline execution
         procedure Get_Execution
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             Execution_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.PipelineExecution_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Execution
               (Program_Id,
                Pipeline_Id,
                Execution_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Execution;

         --  List Executions
         procedure Get_Executions
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Start : in Swagger.Nullable_UString;
             Limit : in Swagger.Nullable_Integer;
             Result : out .Models.PipelineExecutionListRepresentation_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Executions
               (Program_Id,
                Pipeline_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Start,
                Limit,
                Result,
                Context);
         end Get_Executions;

         --  Get logs
         procedure Get_Step_Logs
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             Execution_Id : in Swagger.UString;
             Phase_Id : in Swagger.UString;
             Step_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             File : in Swagger.Nullable_UString;
             P_Accept : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Step_Logs
               (Program_Id,
                Pipeline_Id,
                Execution_Id,
                Phase_Id,
                Step_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                File,
                P_Accept,
                Context);
         end Get_Step_Logs;

         --  Start the pipeline
         procedure Start_Pipeline
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Content_Type : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Start_Pipeline
               (Program_Id,
                Pipeline_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Content_Type,
                Context);
         end Start_Pipeline;

         --  Get step metrics
         procedure Step_Metric
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             Execution_Id : in Swagger.UString;
             Phase_Id : in Swagger.UString;
             Step_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.PipelineStepMetrics_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Step_Metric
               (Program_Id,
                Pipeline_Id,
                Execution_Id,
                Phase_Id,
                Step_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Step_Metric;

         --  Get step state
         procedure Step_State
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             Execution_Id : in Swagger.UString;
             Phase_Id : in Swagger.UString;
             Step_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.PipelineExecutionStepState_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Step_State
               (Program_Id,
                Pipeline_Id,
                Execution_Id,
                Phase_Id,
                Step_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Step_State;

         --  Delete a Pipeline
         procedure Delete_Pipeline
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Pipeline
               (Program_Id,
                Pipeline_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Context);
         end Delete_Pipeline;

         --  Get Pipeline
         procedure Get_Pipeline
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.Pipeline_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline
               (Program_Id,
                Pipeline_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Pipeline;

         --  List Pipelines
         procedure Get_Pipelines
            (Program_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.PipelineList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipelines
               (Program_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Pipelines;

         --  Patches Pipeline
         procedure Patch_Pipeline
            (Program_Id : in Swagger.UString;
             Pipeline_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Content_Type : in Swagger.UString;
             P_Body : in Pipeline_Type;
             Result : out .Models.Pipeline_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Patch_Pipeline
               (Program_Id,
                Pipeline_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Content_Type,
                P_Body,
                Result,
                Context);
         end Patch_Pipeline;

         --  Delete Program
         procedure Delete_Program
            (Program_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.Program_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Program
               (Program_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Delete_Program;

         --  Get Program
         procedure Get_Program
            (Program_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.Program_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Program
               (Program_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Program;

         --  Lists Programs
         procedure Get_Programs
            (X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.ProgramList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Programs
               (X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Programs;

         --  Lists Repositories
         procedure Get_Repositories
            (Program_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.RepositoryList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Repositories
               (Program_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Repositories;

         --  Get Repository
         procedure Get_Repository
            (Program_Id : in Swagger.UString;
             Repository_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.Repository_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Repository
               (Program_Id,
                Repository_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Repository;

         --  List User Environment Variables
         procedure Get_Environment_Variables
            (Program_Id : in Swagger.UString;
             Environment_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Result : out .Models.VariableList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Environment_Variables
               (Program_Id,
                Environment_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Result,
                Context);
         end Get_Environment_Variables;

         --  Patch User Environment Variables
         procedure Patch_Environment_Variables
            (Program_Id : in Swagger.UString;
             Environment_Id : in Swagger.UString;
             X_Gw_Ims_Org_Id : in Swagger.UString;
             Authorization : in Swagger.UString;
             X_Api_Key : in Swagger.UString;
             Content_Type : in Swagger.UString;
             P_Body : in .Models.Variable_Type_Vectors.Vector;
             Result : out .Models.VariableList_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Patch_Environment_Variables
               (Program_Id,
                Environment_Id,
                X_Gw_Ims_Org_Id,
                Authorization,
                X_Api_Key,
                Content_Type,
                P_Body,
                Result,
                Context);
         end Patch_Environment_Variables;

      end Server;

   end Shared_Instance;

end .Skeletons;
