// @flow
/* eslint-disable no-use-before-define */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://cloudmanager.adobe.io".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}


/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * A Bad Request response error.
 * @export
 */
export type BadRequestError = {
    /**
     * HTTP status code of the response.
     * @type {number}
     * @memberof BadRequestError
     */
    status?: number;
    /**
     * Error type identifier.
     * @type {string}
     * @memberof BadRequestError
     */
    type?: string;
    /**
     * A short summary of the error.
     * @type {string}
     * @memberof BadRequestError
     */
    title?: string;
    /**
     * Request\'s missing parameters.
     * @type {Array<MissingParameter>}
     * @memberof BadRequestError
     */
    missingParams?: Array<MissingParameter>;
    /**
     * Request\'s invalid parameters.
     * @type {Array<InvalidParameter>}
     * @memberof BadRequestError
     */
    invalidParams?: Array<InvalidParameter>;
}


/**
 * 
 * @export
 */
export type BranchList = {
    /**
     * 
     * @type {number}
     * @memberof BranchList
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {BranchListEmbedded}
     * @memberof BranchList
     */
    _embedded?: BranchListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof BranchList
     */
    _links?: ProgramListLinks;
}


/**
 * 
 * @export
 */
export type BranchListEmbedded = {
    /**
     * 
     * @type {Array<RepositoryBranch>}
     * @memberof BranchListEmbedded
     */
    branches?: Array<RepositoryBranch>;
}


/**
 * Describes an __Embedded Program__
 * @export
 */
export type EmbeddedProgram = {
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof EmbeddedProgram
     */
    id?: string;
    /**
     * Name of the program
     * @type {string}
     * @memberof EmbeddedProgram
     */
    name?: string;
    /**
     * Whether this Program has been enabled for Cloud Manager usage
     * @type {boolean}
     * @memberof EmbeddedProgram
     */
    enabled?: boolean;
    /**
     * Tenant Id
     * @type {string}
     * @memberof EmbeddedProgram
     */
    tenantId?: string;
}



            export type EnvironmentTypeEnum = 'dev' | 'stage' | 'prod';
/**
 * An Environment that 
 * @export
 */
export type Environment = {
    /**
     * id
     * @type {string}
     * @memberof Environment
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Environment
     */
    programId?: string;
    /**
     * Name of the environment
     * @type {string}
     * @memberof Environment
     */
    name?: string;
    /**
     * Description of the environment
     * @type {string}
     * @memberof Environment
     */
    description?: string;
    /**
     * Type of the environment
     * @type {string}
     * @memberof Environment
     */
    type?: EnvironmentTypeEnum;
    /**
     * 
     * @type {EnvironmentLinks}
     * @memberof Environment
     */
    _links?: EnvironmentLinks;
}


/**
 * 
 * @export
 */
export type EnvironmentLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_author?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_publish?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_developerConsole?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_logs?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    http__ns_adobe_com_adobecloud_rel_variables?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLinks
     */
    self?: HalLink;
}


/**
 * 
 * @export
 */
export type EnvironmentList = {
    /**
     * 
     * @type {number}
     * @memberof EnvironmentList
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {EnvironmentListEmbedded}
     * @memberof EnvironmentList
     */
    _embedded?: EnvironmentListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof EnvironmentList
     */
    _links?: ProgramListLinks;
}


/**
 * 
 * @export
 */
export type EnvironmentListEmbedded = {
    /**
     * 
     * @type {Array<Environment>}
     * @memberof EnvironmentListEmbedded
     */
    environments?: Array<Environment>;
}


/**
 * Log from Environment
 * @export
 */
export type EnvironmentLog = {
    /**
     * Name of the service
     * @type {string}
     * @memberof EnvironmentLog
     */
    service?: string;
    /**
     * Name of the Log
     * @type {string}
     * @memberof EnvironmentLog
     */
    name?: string;
    /**
     * date of the Log
     * @type {string}
     * @memberof EnvironmentLog
     */
    _date?: string;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentLog
     */
    programId?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentLog
     */
    environmentId?: number;
    /**
     * 
     * @type {EnvironmentLogLinks}
     * @memberof EnvironmentLog
     */
    _links?: EnvironmentLogLinks;
}


/**
 * 
 * @export
 */
export type EnvironmentLogLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLogLinks
     */
    http__ns_adobe_com_adobecloud_rel_logs_download?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLogLinks
     */
    http__ns_adobe_com_adobecloud_rel_logs_tail?: HalLink;
}


/**
 * Logs of an Environment
 * @export
 */
export type EnvironmentLogs = {
    /**
     * Name of the service
     * @type {Array<string>}
     * @memberof EnvironmentLogs
     */
    service?: Array<string>;
    /**
     * Name of the Log
     * @type {Array<string>}
     * @memberof EnvironmentLogs
     */
    name?: Array<string>;
    /**
     * Number of days
     * @type {number}
     * @memberof EnvironmentLogs
     */
    days?: number;
    /**
     * 
     * @type {EnvironmentLogsLinks}
     * @memberof EnvironmentLogs
     */
    _links?: EnvironmentLogsLinks;
    /**
     * 
     * @type {EnvironmentLogsEmbedded}
     * @memberof EnvironmentLogs
     */
    _embedded?: EnvironmentLogsEmbedded;
}


/**
 * 
 * @export
 */
export type EnvironmentLogsEmbedded = {
    /**
     * Links to logs
     * @type {Array<EnvironmentLog>}
     * @memberof EnvironmentLogsEmbedded
     */
    downloads?: Array<EnvironmentLog>;
}


/**
 * 
 * @export
 */
export type EnvironmentLogsLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLogsLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof EnvironmentLogsLinks
     */
    self?: HalLink;
}


/**
 * 
 * @export
 */
export type HalLink = {
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    href?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HalLink
     */
    templated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    deprecation?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    profile?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    hreflang?: string;
    /**
     * 
     * @type {string}
     * @memberof HalLink
     */
    name?: string;
}


/**
 * 
 * @export
 */
export type InvalidParameter = {
    /**
     * Name of the invalid parameter.
     * @type {string}
     * @memberof InvalidParameter
     */
    name?: string;
    /**
     * Reason of why the parameter\'s value is not accepted.
     * @type {string}
     * @memberof InvalidParameter
     */
    reason?: string;
}



            export type MetricSeverityEnum = 'critical' | 'important' | 'informational';

            export type MetricComparatorEnum = 'GT' | 'GTE' | 'LT' | 'LTE' | 'EQ' | 'NEQ';
/**
 * Describes a __Metric__
 * @export
 */
export type Metric = {
    /**
     * KPI result identifier
     * @type {string}
     * @memberof Metric
     */
    id?: string;
    /**
     * Severity of the metric
     * @type {string}
     * @memberof Metric
     */
    severity?: MetricSeverityEnum;
    /**
     * Whether metric is considered passed
     * @type {boolean}
     * @memberof Metric
     */
    passed?: boolean;
    /**
     * Whether user override the failed metric
     * @type {boolean}
     * @memberof Metric
     */
    override?: boolean;
    /**
     * Expected value for the metric
     * @type {string}
     * @memberof Metric
     */
    actualValue?: string;
    /**
     * Expected value for the metric
     * @type {string}
     * @memberof Metric
     */
    expectedValue?: string;
    /**
     * Comparator used for the metric
     * @type {string}
     * @memberof Metric
     */
    comparator?: MetricComparatorEnum;
    /**
     * KPI identifier
     * @type {string}
     * @memberof Metric
     */
    kpi?: string;
}


/**
 * 
 * @export
 */
export type MissingParameter = {
    /**
     * Name of the missing parameter.
     * @type {string}
     * @memberof MissingParameter
     */
    name?: string;
    /**
     * Type of the missing parameter.
     * @type {string}
     * @memberof MissingParameter
     */
    type?: string;
}



            export type PipelineTriggerEnum = 'ON_COMMIT' | 'MANUAL' | 'SCHEDULE';

            export type PipelineStatusEnum = 'IDLE' | 'BUSY' | 'WAITING';
/**
 * Describes a __CI/CD Pipeline__
 * @export
 */
export type Pipeline = {
    /**
     * Identifier of the pipeline. Unique within the program.
     * @type {string}
     * @memberof Pipeline
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Pipeline
     */
    programId?: string;
    /**
     * Name of the pipeline
     * @type {string}
     * @memberof Pipeline
     */
    name: string;
    /**
     * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
     * @type {string}
     * @memberof Pipeline
     */
    trigger?: PipelineTriggerEnum;
    /**
     * Pipeline status
     * @type {string}
     * @memberof Pipeline
     */
    status?: PipelineStatusEnum;
    /**
     * Create date
     * @type {Date}
     * @memberof Pipeline
     */
    createdAt?: Date;
    /**
     * Update date
     * @type {Date}
     * @memberof Pipeline
     */
    updatedAt?: Date;
    /**
     * Last pipeline execution start
     * @type {Date}
     * @memberof Pipeline
     */
    lastStartedAt?: Date;
    /**
     * Last pipeline execution end
     * @type {Date}
     * @memberof Pipeline
     */
    lastFinishedAt?: Date;
    /**
     * Pipeline phases in execution order
     * @type {Array<PipelinePhase>}
     * @memberof Pipeline
     */
    phases: Array<PipelinePhase>;
    /**
     * 
     * @type {PipelineLinks}
     * @memberof Pipeline
     */
    _links?: PipelineLinks;
}



            export type PipelineExecutionStatusEnum = 'NOT_STARTED' | 'RUNNING' | 'CANCELLING' | 'CANCELLED' | 'FINISHED' | 'ERROR' | 'FAILED';

            export type PipelineExecutionTriggerEnum = 'ON_COMMIT' | 'MANUAL' | 'SCHEDULE' | 'PUSH_UPGRADES';
/**
 * Wraps a pipeline execution
 * @export
 */
export type PipelineExecution = {
    /**
     * Pipeline execution identifier
     * @type {string}
     * @memberof PipelineExecution
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof PipelineExecution
     */
    programId?: string;
    /**
     * Identifier of the pipeline. Unique within the space.
     * @type {string}
     * @memberof PipelineExecution
     */
    pipelineId?: string;
    /**
     * Version of the artifacts generated during this execution
     * @type {string}
     * @memberof PipelineExecution
     */
    artifactsVersion?: string;
    /**
     * AdobeID who started the pipeline. Empty for auto triggered builds
     * @type {string}
     * @memberof PipelineExecution
     */
    user?: string;
    /**
     * Status of the execution
     * @type {string}
     * @memberof PipelineExecution
     */
    status?: PipelineExecutionStatusEnum;
    /**
     * How the execution was triggered.
     * @type {string}
     * @memberof PipelineExecution
     */
    trigger?: PipelineExecutionTriggerEnum;
    /**
     * Start time
     * @type {Date}
     * @memberof PipelineExecution
     */
    createdAt?: Date;
    /**
     * Date of last status change
     * @type {Date}
     * @memberof PipelineExecution
     */
    updatedAt?: Date;
    /**
     * Date the execution reached a final state
     * @type {Date}
     * @memberof PipelineExecution
     */
    finishedAt?: Date;
    /**
     * 
     * @type {PipelineExecutionEmbedded}
     * @memberof PipelineExecution
     */
    _embedded?: PipelineExecutionEmbedded;
    /**
     * 
     * @type {PipelineExecutionLinks}
     * @memberof PipelineExecution
     */
    _links?: PipelineExecutionLinks;
}


/**
 * 
 * @export
 */
export type PipelineExecutionEmbedded = {
    /**
     * 
     * @type {Array<PipelineExecutionStepState>}
     * @memberof PipelineExecutionEmbedded
     */
    stepStates?: Array<PipelineExecutionStepState>;
}


/**
 * 
 * @export
 */
export type PipelineExecutionLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionLinks
     */
    self?: HalLink;
}


/**
 * List of pipeline executions
 * @export
 */
export type PipelineExecutionListRepresentation = {
    /**
     * 
     * @type {number}
     * @memberof PipelineExecutionListRepresentation
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {RequestedPageDetails}
     * @memberof PipelineExecutionListRepresentation
     */
    _page?: RequestedPageDetails;
    /**
     * 
     * @type {PipelineExecutionListRepresentationEmbedded}
     * @memberof PipelineExecutionListRepresentation
     */
    _embedded?: PipelineExecutionListRepresentationEmbedded;
    /**
     * 
     * @type {PipelineExecutionListRepresentationLinks}
     * @memberof PipelineExecutionListRepresentation
     */
    _links?: PipelineExecutionListRepresentationLinks;
}


/**
 * 
 * @export
 */
export type PipelineExecutionListRepresentationEmbedded = {
    /**
     * 
     * @type {Array<PipelineExecution>}
     * @memberof PipelineExecutionListRepresentationEmbedded
     */
    executions?: Array<PipelineExecution>;
}


/**
 * 
 * @export
 */
export type PipelineExecutionListRepresentationLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    next?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    page?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    prev?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionListRepresentationLinks
     */
    self?: HalLink;
}



            export type PipelineExecutionStepStateStatusEnum = 'NOT_STARTED' | 'RUNNING' | 'FINISHED' | 'ERROR' | 'ROLLING_BACK' | 'ROLLED_BACK' | 'WAITING' | 'CANCELLED' | 'FAILED';
/**
 * Describes the status of a particular pipeline execution step for display purposes
 * @export
 */
export type PipelineExecutionStepState = {
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    stepId?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    phaseId?: string;
    /**
     * Name of the action
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    action?: string;
    /**
     * Target repository
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    repository?: string;
    /**
     * Target branch
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    branch?: string;
    /**
     * Target environment
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    environment?: string;
    /**
     * Target environment type
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    environmentType?: string;
    /**
     * Start time
     * @type {Date}
     * @memberof PipelineExecutionStepState
     */
    startedAt?: Date;
    /**
     * Date the execution reached a final state
     * @type {Date}
     * @memberof PipelineExecutionStepState
     */
    finishedAt?: Date;
    /**
     * Information about step result
     * @type {{ [key: string]: Object; }}
     * @memberof PipelineExecutionStepState
     */
    details?: { [key: string]: Object; };
    /**
     * Action status
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    status?: PipelineExecutionStepStateStatusEnum;
    /**
     * 
     * @type {PipelineExecutionStepStateLinks}
     * @memberof PipelineExecutionStepState
     */
    _links?: PipelineExecutionStepStateLinks;
}


/**
 * 
 * @export
 */
export type PipelineExecutionStepStateLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_execution?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline_logs?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline_metrics?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline_advance?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipeline_cancel?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineExecutionStepStateLinks
     */
    self?: HalLink;
}


/**
 * 
 * @export
 */
export type PipelineLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    http__ns_adobe_com_adobecloud_rel_execution?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    http__ns_adobe_com_adobecloud_rel_executions?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    http__ns_adobe_com_adobecloud_rel_rollbackLastSuccessfulExecution?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof PipelineLinks
     */
    self?: HalLink;
}


/**
 * 
 * @export
 */
export type PipelineList = {
    /**
     * 
     * @type {number}
     * @memberof PipelineList
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {PipelineListEmbedded}
     * @memberof PipelineList
     */
    _embedded?: PipelineListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof PipelineList
     */
    _links?: ProgramListLinks;
}


/**
 * 
 * @export
 */
export type PipelineListEmbedded = {
    /**
     * 
     * @type {Array<Pipeline>}
     * @memberof PipelineListEmbedded
     */
    pipelines?: Array<Pipeline>;
}



            export type PipelinePhaseTypeEnum = 'VALIDATE' | 'BUILD' | 'DEPLOY';
/**
 * Describes a phase of a pipeline
 * @export
 */
export type PipelinePhase = {
    /**
     * Name of the phase
     * @type {string}
     * @memberof PipelinePhase
     */
    name?: string;
    /**
     * Type of the phase
     * @type {string}
     * @memberof PipelinePhase
     */
    type: PipelinePhaseTypeEnum;
    /**
     * Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD
     * @type {string}
     * @memberof PipelinePhase
     */
    repositoryId?: string;
    /**
     * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.
     * @type {string}
     * @memberof PipelinePhase
     */
    branch?: string;
    /**
     * Identifier of the target environment. Mandatory if type=DEPLOY
     * @type {string}
     * @memberof PipelinePhase
     */
    environmentId?: string;
}


/**
 * 
 * @export
 */
export type PipelineStepMetrics = {
    /**
     * metrics
     * @type {Array<Metric>}
     * @memberof PipelineStepMetrics
     */
    metrics?: Array<Metric>;
}


/**
 * Describes a __Program__
 * @export
 */
export type Program = {
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Program
     */
    id?: string;
    /**
     * Name of the program
     * @type {string}
     * @memberof Program
     */
    name: string;
    /**
     * Whether this Program has been enabled for Cloud Manager usage
     * @type {boolean}
     * @memberof Program
     */
    enabled?: boolean;
    /**
     * Tenant Id
     * @type {string}
     * @memberof Program
     */
    tenantId?: string;
    /**
     * Organisation Id
     * @type {string}
     * @memberof Program
     */
    imsOrgId?: string;
    /**
     * 
     * @type {ProgramLinks}
     * @memberof Program
     */
    _links?: ProgramLinks;
}


/**
 * 
 * @export
 */
export type ProgramLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    http__ns_adobe_com_adobecloud_rel_pipelines?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    http__ns_adobe_com_adobecloud_rel_environments?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    http__ns_adobe_com_adobecloud_rel_repositories?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramLinks
     */
    self?: HalLink;
}


/**
 * 
 * @export
 */
export type ProgramList = {
    /**
     * 
     * @type {number}
     * @memberof ProgramList
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {ProgramListEmbedded}
     * @memberof ProgramList
     */
    _embedded?: ProgramListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof ProgramList
     */
    _links?: ProgramListLinks;
}


/**
 * 
 * @export
 */
export type ProgramListEmbedded = {
    /**
     * 
     * @type {Array<EmbeddedProgram>}
     * @memberof ProgramListEmbedded
     */
    programs?: Array<EmbeddedProgram>;
}


/**
 * 
 * @export
 */
export type ProgramListLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramListLinks
     */
    next?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramListLinks
     */
    prev?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof ProgramListLinks
     */
    self?: HalLink;
}


/**
 * A sourcecode repository
 * @export
 */
export type Repository = {
    /**
     * Repository name
     * @type {string}
     * @memberof Repository
     */
    repo?: string;
    /**
     * description
     * @type {string}
     * @memberof Repository
     */
    description?: string;
    /**
     * 
     * @type {RepositoryLinks}
     * @memberof Repository
     */
    _links?: RepositoryLinks;
}


/**
 * Represents a Git Branch
 * @export
 */
export type RepositoryBranch = {
    /**
     * Identifier of the program. Unique within the space
     * @type {string}
     * @memberof RepositoryBranch
     */
    programId?: string;
    /**
     * Identifier of the repository
     * @type {number}
     * @memberof RepositoryBranch
     */
    repositoryId?: number;
    /**
     * Name of the branch
     * @type {string}
     * @memberof RepositoryBranch
     */
    name?: string;
    /**
     * 
     * @type {RepositoryBranchLinks}
     * @memberof RepositoryBranch
     */
    _links?: RepositoryBranchLinks;
}


/**
 * 
 * @export
 */
export type RepositoryBranchLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryBranchLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryBranchLinks
     */
    http__ns_adobe_com_adobecloud_rel_repository?: HalLink;
}


/**
 * 
 * @export
 */
export type RepositoryLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryLinks
     */
    http__ns_adobe_com_adobecloud_rel_branches?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof RepositoryLinks
     */
    self?: HalLink;
}


/**
 * 
 * @export
 */
export type RepositoryList = {
    /**
     * 
     * @type {number}
     * @memberof RepositoryList
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {RepositoryListEmbedded}
     * @memberof RepositoryList
     */
    _embedded?: RepositoryListEmbedded;
    /**
     * 
     * @type {ProgramListLinks}
     * @memberof RepositoryList
     */
    _links?: ProgramListLinks;
}


/**
 * 
 * @export
 */
export type RepositoryListEmbedded = {
    /**
     * 
     * @type {Array<Repository>}
     * @memberof RepositoryListEmbedded
     */
    repositories?: Array<Repository>;
}


/**
 * Filtering and sorting page details
 * @export
 */
export type RequestedPageDetails = {
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    start?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    limit?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestedPageDetails
     */
    orderBy?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestedPageDetails
     */
    property?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestedPageDetails
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    next?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestedPageDetails
     */
    prev?: number;
}



            export type VariableTypeEnum = 'string' | 'secretString';
/**
 * A named value than can be set on an Environment
 * @export
 */
export type Variable = {
    /**
     * Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.
     * @type {string}
     * @memberof Variable
     */
    name?: string;
    /**
     * Value of the variable. Read-Write for non-secrets, write-only for secrets.
     * @type {string}
     * @memberof Variable
     */
    value?: string;
    /**
     * Type of the variable. Default `string` if missing. Cannot be changed after creation.
     * @type {string}
     * @memberof Variable
     */
    type?: VariableTypeEnum;
}


/**
 * 
 * @export
 */
export type VariableList = {
    /**
     * 
     * @type {number}
     * @memberof VariableList
     */
    _totalNumberOfItems?: number;
    /**
     * 
     * @type {VariableListEmbedded}
     * @memberof VariableList
     */
    _embedded?: VariableListEmbedded;
    /**
     * 
     * @type {VariableListLinks}
     * @memberof VariableList
     */
    _links?: VariableListLinks;
}


/**
 * 
 * @export
 */
export type VariableListEmbedded = {
    /**
     * Variables set on environment
     * @type {Array<Variable>}
     * @memberof VariableListEmbedded
     */
    variables?: Array<Variable>;
}


/**
 * 
 * @export
 */
export type VariableListLinks = {
    /**
     * 
     * @type {HalLink}
     * @memberof VariableListLinks
     */
    http__ns_adobe_com_adobecloud_rel_environment?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof VariableListLinks
     */
    http__ns_adobe_com_adobecloud_rel_program?: HalLink;
    /**
     * 
     * @type {HalLink}
     * @memberof VariableListLinks
     */
    self?: HalLink;
}




/**
 * BranchesApi - fetch parameter creator
 * @export
 */
export const BranchesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of branches from a repository
         * @summary List Branches
         * @throws {RequiredError}
         */
        getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getBranches.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling getBranches.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getBranches.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getBranches.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getBranches.');
            }
            const localVarPath = `/api/program/{programId}/repository/{repositoryId}/branches`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BranchesApiType = { 
    getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<BranchList>,
}

/**
 * BranchesApi - factory function to inject configuration 
 * @export
 */
export const BranchesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BranchesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Returns the list of branches from a repository
         * @summary List Branches
         * @throws {RequiredError}
         */
        getBranches(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<BranchList> {
            const localVarFetchArgs = BranchesApiFetchParamCreator(configuration).getBranches(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * EnvironmentsApi - fetch parameter creator
 * @export
 */
export const EnvironmentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete environment
         * @summary DeleteEnvironment
         * @throws {RequiredError}
         */
        deleteEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling deleteEnvironment.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling deleteEnvironment.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling deleteEnvironment.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteEnvironment.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling deleteEnvironment.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download environment logs
         * @summary Download Logs
         * @throws {RequiredError}
         */
        downloadLogs(programId: string, environmentId: string, service: string, name: string, _date: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling downloadLogs.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling downloadLogs.');
            }
            // verify required parameter 'service' is not null or undefined
            if (service === null || service === undefined) {
                throw new RequiredError('service','Required parameter service was null or undefined when calling downloadLogs.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling downloadLogs.');
            }
            // verify required parameter '_date' is not null or undefined
            if (_date === null || _date === undefined) {
                throw new RequiredError('_date','Required parameter _date was null or undefined when calling downloadLogs.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling downloadLogs.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling downloadLogs.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling downloadLogs.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}/logs/download`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (service !== undefined) {
                localVarQueryParameter['service'] = ((service:any):string);
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = ((name:any):string);
            }

            if (_date !== undefined) {
                localVarQueryParameter['date'] = ((_date:any):string);
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = ((accept:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an environment by its id
         * @summary Get Environment
         * @throws {RequiredError}
         */
        getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnvironment.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getEnvironment.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all logs available in environment
         * @summary Get Environment Logs
         * @throws {RequiredError}
         */
        getEnvironmentLogs(programId: string, environmentId: string, days: number, xGwImsOrgId: string, authorization: string, xApiKey: string, service?: Array<string>, name?: Array<string>, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getEnvironmentLogs.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling getEnvironmentLogs.');
            }
            // verify required parameter 'days' is not null or undefined
            if (days === null || days === undefined) {
                throw new RequiredError('days','Required parameter days was null or undefined when calling getEnvironmentLogs.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getEnvironmentLogs.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnvironmentLogs.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getEnvironmentLogs.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}/logs`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (service) {
                localVarQueryParameter['service'] = service;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = ((days:any):string);
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all environments in an program
         * @summary List Environments
         * @throws {RequiredError}
         */
        getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getEnvironments.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getEnvironments.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnvironments.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getEnvironments.');
            }
            const localVarPath = `/api/program/{programId}/environments`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (type !== undefined) {
                localVarQueryParameter['type'] = ((type:any):string);
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type EnvironmentsApiType = { 
    deleteEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Environment>,

    downloadLogs(programId: string, environmentId: string, service: string, name: string, _date: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options?: RequestOptions): Promise<Response>,

    getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Environment>,

    getEnvironmentLogs(programId: string, environmentId: string, days: number, xGwImsOrgId: string, authorization: string, xApiKey: string, service?: Array<string>, name?: Array<string>, options?: RequestOptions): Promise<EnvironmentLogs>,

    getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options?: RequestOptions): Promise<EnvironmentList>,
}

/**
 * EnvironmentsApi - factory function to inject configuration 
 * @export
 */
export const EnvironmentsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): EnvironmentsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Delete environment
         * @summary DeleteEnvironment
         * @throws {RequiredError}
         */
        deleteEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Environment> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).deleteEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Download environment logs
         * @summary Download Logs
         * @throws {RequiredError}
         */
        downloadLogs(programId: string, environmentId: string, service: string, name: string, _date: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).downloadLogs(programId, environmentId, service, name, _date, xGwImsOrgId, authorization, xApiKey, accept, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns an environment by its id
         * @summary Get Environment
         * @throws {RequiredError}
         */
        getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Environment> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).getEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * List all logs available in environment
         * @summary Get Environment Logs
         * @throws {RequiredError}
         */
        getEnvironmentLogs(programId: string, environmentId: string, days: number, xGwImsOrgId: string, authorization: string, xApiKey: string, service?: Array<string>, name?: Array<string>, options?: RequestOptions = {}): Promise<EnvironmentLogs> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).getEnvironmentLogs(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Lists all environments in an program
         * @summary List Environments
         * @throws {RequiredError}
         */
        getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', options?: RequestOptions = {}): Promise<EnvironmentList> {
            const localVarFetchArgs = EnvironmentsApiFetchParamCreator(configuration).getEnvironments(programId, xGwImsOrgId, authorization, xApiKey, type, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * PipelineExecutionApi - fetch parameter creator
 * @export
 */
export const PipelineExecutionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
         * @summary Advance
         * @throws {RequiredError}
         */
        advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Object, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling advancePipelineExecution.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling advancePipelineExecution.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = ((contentType:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body != null ? body : {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
         * @summary Cancel
         * @throws {RequiredError}
         */
        cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Object, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling cancelPipelineExecutionStep.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling cancelPipelineExecutionStep.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = ((contentType:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body != null ? body : {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns current pipeline execution if any.
         * @summary Get current pipeline execution
         * @throws {RequiredError}
         */
        getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getCurrentExecution.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getCurrentExecution.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline execution by id
         * @summary Get pipeline execution
         * @throws {RequiredError}
         */
        getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getExecution.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getExecution.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getExecution.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the history of pipeline executions in a newest to oldest order
         * @summary List Executions
         * @throws {RequiredError}
         */
        getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getExecutions.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getExecutions.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/executions`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (start !== undefined) {
                localVarQueryParameter['start'] = ((start:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the logs associated with a step.
         * @summary Get logs
         * @throws {RequiredError}
         */
        getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, file?: string, accept?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getStepLogs.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getStepLogs.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (file !== undefined) {
                localVarQueryParameter['file'] = ((file:any):string);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = ((accept:any):string);
            }

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the Pipeline. This works only if the pipeline is not already started.
         * @summary Start the pipeline
         * @throws {RequiredError}
         */
        startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling startPipeline.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling startPipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = ((contentType:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get step metrics
         * @throws {RequiredError}
         */
        stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling stepMetric.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling stepMetric.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get step state
         * @throws {RequiredError}
         */
        stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling stepState.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling stepState.');
            }
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling stepState.');
            }
            // verify required parameter 'phaseId' is not null or undefined
            if (phaseId === null || phaseId === undefined) {
                throw new RequiredError('phaseId','Required parameter phaseId was null or undefined when calling stepState.');
            }
            // verify required parameter 'stepId' is not null or undefined
            if (stepId === null || stepId === undefined) {
                throw new RequiredError('stepId','Required parameter stepId was null or undefined when calling stepState.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling stepState.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling stepState.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling stepState.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)))
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)))
                .replace(`{${"phaseId"}}`, encodeURIComponent(String(phaseId)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PipelineExecutionApiType = { 
    advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Object, options?: RequestOptions): Promise<Response>,

    cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Object, options?: RequestOptions): Promise<Response>,

    getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<PipelineExecution>,

    getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<PipelineExecution>,

    getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options?: RequestOptions): Promise<PipelineExecutionListRepresentation>,

    getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, file?: string, accept?: string, options?: RequestOptions): Promise<Response>,

    startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options?: RequestOptions): Promise<Response>,

    stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<PipelineStepMetrics>,

    stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<PipelineExecutionStepState>,
}

/**
 * PipelineExecutionApi - factory function to inject configuration 
 * @export
 */
export const PipelineExecutionApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PipelineExecutionApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
         * @summary Advance
         * @throws {RequiredError}
         */
        advancePipelineExecution(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Object, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).advancePipelineExecution(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
         * @summary Cancel
         * @throws {RequiredError}
         */
        cancelPipelineExecutionStep(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Object, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).cancelPipelineExecutionStep(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns current pipeline execution if any.
         * @summary Get current pipeline execution
         * @throws {RequiredError}
         */
        getCurrentExecution(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<PipelineExecution> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).getCurrentExecution(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a pipeline execution by id
         * @summary Get pipeline execution
         * @throws {RequiredError}
         */
        getExecution(programId: string, pipelineId: string, executionId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<PipelineExecution> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).getExecution(programId, pipelineId, executionId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns the history of pipeline executions in a newest to oldest order
         * @summary List Executions
         * @throws {RequiredError}
         */
        getExecutions(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, start?: string, limit?: number, options?: RequestOptions = {}): Promise<PipelineExecutionListRepresentation> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).getExecutions(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, start, limit, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get the logs associated with a step.
         * @summary Get logs
         * @throws {RequiredError}
         */
        getStepLogs(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, file?: string, accept?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).getStepLogs(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, file, accept, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Starts the Pipeline. This works only if the pipeline is not already started.
         * @summary Start the pipeline
         * @throws {RequiredError}
         */
        startPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).startPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Get step metrics
         * @throws {RequiredError}
         */
        stepMetric(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<PipelineStepMetrics> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).stepMetric(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Get step state
         * @throws {RequiredError}
         */
        stepState(programId: string, pipelineId: string, executionId: string, phaseId: string, stepId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<PipelineExecutionStepState> {
            const localVarFetchArgs = PipelineExecutionApiFetchParamCreator(configuration).stepState(programId, pipelineId, executionId, phaseId, stepId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * PipelinesApi - fetch parameter creator
 * @export
 */
export const PipelinesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a pipeline. All the data is wiped.
         * @summary Delete a Pipeline
         * @throws {RequiredError}
         */
        deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deletePipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling deletePipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a pipeline by its id
         * @summary Get Pipeline
         * @throws {RequiredError}
         */
        getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getPipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getPipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all the pipelines that the requesting user has access to in an program
         * @summary List Pipelines
         * @throws {RequiredError}
         */
        getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getPipelines.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getPipelines.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getPipelines.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getPipelines.');
            }
            const localVarPath = `/api/program/{programId}/pipelines`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patches a pipeline within an program.
         * @summary Patches Pipeline
         * @throws {RequiredError}
         */
        patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'pipelineId' is not null or undefined
            if (pipelineId === null || pipelineId === undefined) {
                throw new RequiredError('pipelineId','Required parameter pipelineId was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling patchPipeline.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchPipeline.');
            }
            const localVarPath = `/api/program/{programId}/pipeline/{pipelineId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"pipelineId"}}`, encodeURIComponent(String(pipelineId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = ((contentType:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body != null ? body : {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PipelinesApiType = { 
    deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Response>,

    getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Pipeline>,

    getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<PipelineList>,

    patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options?: RequestOptions): Promise<Pipeline>,
}

/**
 * PipelinesApi - factory function to inject configuration 
 * @export
 */
export const PipelinesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PipelinesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Delete a pipeline. All the data is wiped.
         * @summary Delete a Pipeline
         * @throws {RequiredError}
         */
        deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PipelinesApiFetchParamCreator(configuration).deletePipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a pipeline by its id
         * @summary Get Pipeline
         * @throws {RequiredError}
         */
        getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Pipeline> {
            const localVarFetchArgs = PipelinesApiFetchParamCreator(configuration).getPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns all the pipelines that the requesting user has access to in an program
         * @summary List Pipelines
         * @throws {RequiredError}
         */
        getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<PipelineList> {
            const localVarFetchArgs = PipelinesApiFetchParamCreator(configuration).getPipelines(programId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Patches a pipeline within an program.
         * @summary Patches Pipeline
         * @throws {RequiredError}
         */
        patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, options?: RequestOptions = {}): Promise<Pipeline> {
            const localVarFetchArgs = PipelinesApiFetchParamCreator(configuration).patchPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * ProgramsApi - fetch parameter creator
 * @export
 */
export const ProgramsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an program
         * @summary Delete Program
         * @throws {RequiredError}
         */
        deleteProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling deleteProgram.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling deleteProgram.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteProgram.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling deleteProgram.');
            }
            const localVarPath = `/api/program/{programId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a program by its id
         * @summary Get Program
         * @throws {RequiredError}
         */
        getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getProgram.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getProgram.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getProgram.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getProgram.');
            }
            const localVarPath = `/api/program/{programId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all programs that the requesting user has access to
         * @summary Lists Programs
         * @throws {RequiredError}
         */
        getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getPrograms.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getPrograms.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getPrograms.');
            }
            const localVarPath = `/api/programs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ProgramsApiType = { 
    deleteProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Program>,

    getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Program>,

    getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<ProgramList>,
}

/**
 * ProgramsApi - factory function to inject configuration 
 * @export
 */
export const ProgramsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ProgramsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Delete an program
         * @summary Delete Program
         * @throws {RequiredError}
         */
        deleteProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Program> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).deleteProgram(programId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a program by its id
         * @summary Get Program
         * @throws {RequiredError}
         */
        getProgram(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Program> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).getProgram(programId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns all programs that the requesting user has access to
         * @summary Lists Programs
         * @throws {RequiredError}
         */
        getPrograms(xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<ProgramList> {
            const localVarFetchArgs = ProgramsApiFetchParamCreator(configuration).getPrograms(xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * RepositoriesApi - fetch parameter creator
 * @export
 */
export const RepositoriesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists all Repositories in an program
         * @summary Lists Repositories
         * @throws {RequiredError}
         */
        getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getRepositories.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getRepositories.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getRepositories.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getRepositories.');
            }
            const localVarPath = `/api/program/{programId}/repositories`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an repository by its id
         * @summary Get Repository
         * @throws {RequiredError}
         */
        getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getRepository.');
            }
            // verify required parameter 'repositoryId' is not null or undefined
            if (repositoryId === null || repositoryId === undefined) {
                throw new RequiredError('repositoryId','Required parameter repositoryId was null or undefined when calling getRepository.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getRepository.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getRepository.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getRepository.');
            }
            const localVarPath = `/api/program/{programId}/repository/{repositoryId}`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"repositoryId"}}`, encodeURIComponent(String(repositoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type RepositoriesApiType = { 
    getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<RepositoryList>,

    getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<Repository>,
}

/**
 * RepositoriesApi - factory function to inject configuration 
 * @export
 */
export const RepositoriesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): RepositoriesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Lists all Repositories in an program
         * @summary Lists Repositories
         * @throws {RequiredError}
         */
        getRepositories(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<RepositoryList> {
            const localVarFetchArgs = RepositoriesApiFetchParamCreator(configuration).getRepositories(programId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns an repository by its id
         * @summary Get Repository
         * @throws {RequiredError}
         */
        getRepository(programId: string, repositoryId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<Repository> {
            const localVarFetchArgs = RepositoriesApiFetchParamCreator(configuration).getRepository(programId, repositoryId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * VariablesApi - fetch parameter creator
 * @export
 */
export const VariablesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List the user defined variables for an environment (Cloud Service only).
         * @summary List User Environment Variables
         * @throws {RequiredError}
         */
        getEnvironmentVariables(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling getEnvironmentVariables.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling getEnvironmentVariables.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling getEnvironmentVariables.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnvironmentVariables.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling getEnvironmentVariables.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}/variables`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
         * @summary Patch User Environment Variables
         * @throws {RequiredError}
         */
        patchEnvironmentVariables(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Array<Variable>, options: RequestOptions): FetchArgs {
            // verify required parameter 'programId' is not null or undefined
            if (programId === null || programId === undefined) {
                throw new RequiredError('programId','Required parameter programId was null or undefined when calling patchEnvironmentVariables.');
            }
            // verify required parameter 'environmentId' is not null or undefined
            if (environmentId === null || environmentId === undefined) {
                throw new RequiredError('environmentId','Required parameter environmentId was null or undefined when calling patchEnvironmentVariables.');
            }
            // verify required parameter 'xGwImsOrgId' is not null or undefined
            if (xGwImsOrgId === null || xGwImsOrgId === undefined) {
                throw new RequiredError('xGwImsOrgId','Required parameter xGwImsOrgId was null or undefined when calling patchEnvironmentVariables.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchEnvironmentVariables.');
            }
            // verify required parameter 'xApiKey' is not null or undefined
            if (xApiKey === null || xApiKey === undefined) {
                throw new RequiredError('xApiKey','Required parameter xApiKey was null or undefined when calling patchEnvironmentVariables.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling patchEnvironmentVariables.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchEnvironmentVariables.');
            }
            const localVarPath = `/api/program/{programId}/environment/{environmentId}/variables`
                .replace(`{${"programId"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (xGwImsOrgId !== undefined && xGwImsOrgId !== null) {
                localVarHeaderParameter['x-gw-ims-org-id'] = ((xGwImsOrgId:any):string);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = ((authorization:any):string);
            }

            if (xApiKey !== undefined && xApiKey !== null) {
                localVarHeaderParameter['x-api-key'] = ((xApiKey:any):string);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = ((contentType:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body != null ? body : {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type VariablesApiType = { 
    getEnvironmentVariables(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions): Promise<VariableList>,

    patchEnvironmentVariables(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Array<Variable>, options?: RequestOptions): Promise<VariableList>,
}

/**
 * VariablesApi - factory function to inject configuration 
 * @export
 */
export const VariablesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): VariablesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * List the user defined variables for an environment (Cloud Service only).
         * @summary List User Environment Variables
         * @throws {RequiredError}
         */
        getEnvironmentVariables(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, options?: RequestOptions = {}): Promise<VariableList> {
            const localVarFetchArgs = VariablesApiFetchParamCreator(configuration).getEnvironmentVariables(programId, environmentId, xGwImsOrgId, authorization, xApiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
         * @summary Patch User Environment Variables
         * @throws {RequiredError}
         */
        patchEnvironmentVariables(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Array<Variable>, options?: RequestOptions = {}): Promise<VariableList> {
            const localVarFetchArgs = VariablesApiFetchParamCreator(configuration).patchEnvironmentVariables(programId, environmentId, xGwImsOrgId, authorization, xApiKey, contentType, body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

export type ApiTypes = { 
    BranchesApi: BranchesApiType,

    EnvironmentsApi: EnvironmentsApiType,

    PipelineExecutionApi: PipelineExecutionApiType,

    PipelinesApi: PipelinesApiType,

    ProgramsApi: ProgramsApiType,

    RepositoriesApi: RepositoriesApiType,

    VariablesApi: VariablesApiType,
 }
