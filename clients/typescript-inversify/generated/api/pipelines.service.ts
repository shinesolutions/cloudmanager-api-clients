/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { Pipeline } from "../model/pipeline";
import { PipelineList } from "../model/pipelineList";

import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class PipelinesService {
    private basePath: string = 'https://cloudmanager.adobe.io';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Delete a Pipeline
     * Delete a pipeline. All the data is wiped.
     * @param programId Identifier of the program
     * @param pipelineId Identifier of the pipeline
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     
     */
    public deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'body', headers?: Headers): Observable<any>;
    public deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public deletePipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling deletePipeline.');
        }

        if (pipelineId === null || pipelineId === undefined){
            throw new Error('Required parameter pipelineId was null or undefined when calling deletePipeline.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling deletePipeline.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling deletePipeline.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling deletePipeline.');
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/pipeline/${encodeURIComponent(String(pipelineId))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Pipeline
     * Returns a pipeline by its id
     * @param programId Identifier of the program
     * @param pipelineId Identifier of the pipeline
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     
     */
    public getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'body', headers?: Headers): Observable<Pipeline>;
    public getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Pipeline>>;
    public getPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling getPipeline.');
        }

        if (pipelineId === null || pipelineId === undefined){
            throw new Error('Required parameter pipelineId was null or undefined when calling getPipeline.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling getPipeline.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling getPipeline.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling getPipeline.');
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Pipeline>> = this.httpClient.get(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/pipeline/${encodeURIComponent(String(pipelineId))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Pipeline>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List Pipelines
     * Returns all the pipelines that the requesting user has access to in an program
     * @param programId Identifier of the program
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     
     */
    public getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'body', headers?: Headers): Observable<PipelineList>;
    public getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineList>>;
    public getPipelines(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling getPipelines.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling getPipelines.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling getPipelines.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling getPipelines.');
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineList>> = this.httpClient.get(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/pipelines`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <PipelineList>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Patches Pipeline
     * Patches a pipeline within an program.
     * @param programId Identifier of the program
     * @param pipelineId Identifier of the pipeline
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param contentType Must always be application/json
     * @param body The updated Pipeline
     
     */
    public patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, observe?: 'body', headers?: Headers): Observable<Pipeline>;
    public patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, observe?: 'response', headers?: Headers): Observable<HttpResponse<Pipeline>>;
    public patchPipeline(programId: string, pipelineId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, contentType: string, body: Pipeline, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling patchPipeline.');
        }

        if (pipelineId === null || pipelineId === undefined){
            throw new Error('Required parameter pipelineId was null or undefined when calling patchPipeline.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling patchPipeline.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling patchPipeline.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling patchPipeline.');
        }

        if (contentType === null || contentType === undefined){
            throw new Error('Required parameter contentType was null or undefined when calling patchPipeline.');
        }

        if (body === null || body === undefined){
            throw new Error('Required parameter body was null or undefined when calling patchPipeline.');
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Pipeline>> = this.httpClient.patch(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/pipeline/${encodeURIComponent(String(pipelineId))}`, body , headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Pipeline>(httpResponse.response))
               );
        }
        return response;
    }

}
