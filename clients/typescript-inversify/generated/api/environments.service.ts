/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";

import { map } from "rxjs/operators";
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { BadRequestError } from "../model/badRequestError";
import { Environment } from "../model/environment";
import { EnvironmentList } from "../model/environmentList";
import { EnvironmentLogs } from "../model/environmentLogs";

import { COLLECTION_FORMATS }  from "../variables";



@injectable()
export class EnvironmentsService {
    private basePath: string = 'https://cloudmanager.adobe.io';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * DeleteEnvironment
     * Delete environment
     * @param programId Identifier of the application
     * @param environmentId Identifier of the environment
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     
     */
    public deleteEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'body', headers?: Headers): Observable<Environment>;
    public deleteEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Environment>>;
    public deleteEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling deleteEnvironment.');
        }

        if (environmentId === null || environmentId === undefined){
            throw new Error('Required parameter environmentId was null or undefined when calling deleteEnvironment.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling deleteEnvironment.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling deleteEnvironment.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling deleteEnvironment.');
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Environment>> = this.httpClient.delete(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/environment/${encodeURIComponent(String(environmentId))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Environment>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Logs
     * Download environment logs
     * @param programId Identifier of the program
     * @param environmentId Identifier of the environment
     * @param service Name of service
     * @param name Name of log
     * @param date date for which log is required
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
     
     */
    public downloadLogs(programId: string, environmentId: string, service: string, name: string, date: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public downloadLogs(programId: string, environmentId: string, service: string, name: string, date: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public downloadLogs(programId: string, environmentId: string, service: string, name: string, date: string, xGwImsOrgId: string, authorization: string, xApiKey: string, accept?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling downloadLogs.');
        }

        if (environmentId === null || environmentId === undefined){
            throw new Error('Required parameter environmentId was null or undefined when calling downloadLogs.');
        }

        if (service === null || service === undefined){
            throw new Error('Required parameter service was null or undefined when calling downloadLogs.');
        }

        if (name === null || name === undefined){
            throw new Error('Required parameter name was null or undefined when calling downloadLogs.');
        }

        if (date === null || date === undefined){
            throw new Error('Required parameter date was null or undefined when calling downloadLogs.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling downloadLogs.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling downloadLogs.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling downloadLogs.');
        }

        let queryParameters: string[] = [];
        if (service !== undefined) {
            queryParameters.push("service="+encodeURIComponent(String(service)));
        }
        if (name !== undefined) {
            queryParameters.push("name="+encodeURIComponent(String(name)));
        }
        if (date !== undefined) {
            queryParameters.push("date="+encodeURIComponent(String(date)));
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/environment/${encodeURIComponent(String(environmentId))}/logs/download?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Environment
     * Returns an environment by its id
     * @param programId Identifier of the program
     * @param environmentId Identifier of the environment
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     
     */
    public getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'body', headers?: Headers): Observable<Environment>;
    public getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Environment>>;
    public getEnvironment(programId: string, environmentId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling getEnvironment.');
        }

        if (environmentId === null || environmentId === undefined){
            throw new Error('Required parameter environmentId was null or undefined when calling getEnvironment.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling getEnvironment.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling getEnvironment.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling getEnvironment.');
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Environment>> = this.httpClient.get(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/environment/${encodeURIComponent(String(environmentId))}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <Environment>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Environment Logs
     * List all logs available in environment
     * @param programId Identifier of the program
     * @param environmentId Identifier of the environment
     * @param days number of days for which logs are required
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param service Names of services
     * @param name Names of log
     
     */
    public getEnvironmentLogs(programId: string, environmentId: string, days: number, xGwImsOrgId: string, authorization: string, xApiKey: string, service?: Array<string>, name?: Array<string>, observe?: 'body', headers?: Headers): Observable<EnvironmentLogs>;
    public getEnvironmentLogs(programId: string, environmentId: string, days: number, xGwImsOrgId: string, authorization: string, xApiKey: string, service?: Array<string>, name?: Array<string>, observe?: 'response', headers?: Headers): Observable<HttpResponse<EnvironmentLogs>>;
    public getEnvironmentLogs(programId: string, environmentId: string, days: number, xGwImsOrgId: string, authorization: string, xApiKey: string, service?: Array<string>, name?: Array<string>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling getEnvironmentLogs.');
        }

        if (environmentId === null || environmentId === undefined){
            throw new Error('Required parameter environmentId was null or undefined when calling getEnvironmentLogs.');
        }

        if (days === null || days === undefined){
            throw new Error('Required parameter days was null or undefined when calling getEnvironmentLogs.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling getEnvironmentLogs.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling getEnvironmentLogs.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling getEnvironmentLogs.');
        }

        let queryParameters: string[] = [];
        if (service) {
            service.forEach((element) => {
                queryParameters.push("service="+encodeURIComponent(String(service)));
            })
        }
        if (name) {
            name.forEach((element) => {
                queryParameters.push("name="+encodeURIComponent(String(name)));
            })
        }
        if (days !== undefined) {
            queryParameters.push("days="+encodeURIComponent(String(days)));
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EnvironmentLogs>> = this.httpClient.get(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/environment/${encodeURIComponent(String(environmentId))}/logs?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <EnvironmentLogs>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List Environments
     * Lists all environments in an program
     * @param programId Identifier of the program
     * @param xGwImsOrgId IMS organization ID that the request is being made under.
     * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
     * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
     * @param type Type of the environment
     
     */
    public getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', observe?: 'body', headers?: Headers): Observable<EnvironmentList>;
    public getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', observe?: 'response', headers?: Headers): Observable<HttpResponse<EnvironmentList>>;
    public getEnvironments(programId: string, xGwImsOrgId: string, authorization: string, xApiKey: string, type?: 'dev' | 'stage' | 'prod', observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (programId === null || programId === undefined){
            throw new Error('Required parameter programId was null or undefined when calling getEnvironments.');
        }

        if (xGwImsOrgId === null || xGwImsOrgId === undefined){
            throw new Error('Required parameter xGwImsOrgId was null or undefined when calling getEnvironments.');
        }

        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling getEnvironments.');
        }

        if (xApiKey === null || xApiKey === undefined){
            throw new Error('Required parameter xApiKey was null or undefined when calling getEnvironments.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push("type="+encodeURIComponent(String(type)));
        }

        if (xGwImsOrgId) {
            headers['x-gw-ims-org-id'] = String(xGwImsOrgId);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xApiKey) {
            headers['x-api-key'] = String(xApiKey);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EnvironmentList>> = this.httpClient.get(`${this.basePath}/api/program/${encodeURIComponent(String(programId))}/environments?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.pipe(
                   map(httpResponse => <EnvironmentList>(httpResponse.response))
               );
        }
        return response;
    }

}
