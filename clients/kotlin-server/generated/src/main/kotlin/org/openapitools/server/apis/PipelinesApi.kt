/**
* Cloud Manager API
* This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
*
* The version of the OpenAPI document: 1.0.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.post
import io.ktor.routing.put
import io.ktor.routing.route

import org.openapitools.server.Paths
import org.openapitools.server.infrastructure.ApiPrincipal


import org.openapitools.server.models.Pipeline
import org.openapitools.server.models.PipelineList

@KtorExperimentalLocationsAPI
fun Route.PipelinesApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    delete<Paths.deletePipeline> {  _: Paths.deletePipeline ->
        call.respond(HttpStatusCode.NotImplemented)
    }


    get<Paths.getPipeline> {  _: Paths.getPipeline ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "createdAt" : "2000-01-23T04:56:07.000+00:00",
          "_links" : {
            "http://ns.adobe.com/adobecloud/rel/program" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "self" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/executions" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/execution" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            }
          },
          "lastStartedAt" : "2000-01-23T04:56:07.000+00:00",
          "name" : "AcmeCorp Main Pipeline",
          "lastFinishedAt" : "2000-01-23T04:56:07.000+00:00",
          "id" : "29",
          "trigger" : "MANUAL",
          "programId" : "14",
          "phases" : [ {
            "environmentId" : "environmentId",
            "name" : "DEV Build",
            "repositoryId" : "repositoryId",
            "type" : "DEPLOY",
            "branch" : "branch"
          }, {
            "environmentId" : "environmentId",
            "name" : "DEV Build",
            "repositoryId" : "repositoryId",
            "type" : "DEPLOY",
            "branch" : "branch"
          }, {
            "environmentId" : "environmentId",
            "name" : "DEV Build",
            "repositoryId" : "repositoryId",
            "type" : "DEPLOY",
            "branch" : "branch"
          }, {
            "environmentId" : "environmentId",
            "name" : "DEV Build",
            "repositoryId" : "repositoryId",
            "type" : "DEPLOY",
            "branch" : "branch"
          }, {
            "environmentId" : "environmentId",
            "name" : "DEV Build",
            "repositoryId" : "repositoryId",
            "type" : "DEPLOY",
            "branch" : "branch"
          } ],
          "status" : "RUNNING,FAILED",
          "updatedAt" : "2000-01-23T04:56:07.000+00:00"
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }


    get<Paths.getPipelines> {  _: Paths.getPipelines ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "_totalNumberOfItems" : 0,
          "_embedded" : {
            "pipelines" : [ {
              "createdAt" : "2000-01-23T04:56:07.000+00:00",
              "_links" : {
                "http://ns.adobe.com/adobecloud/rel/program" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "self" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/executions" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/execution" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                }
              },
              "lastStartedAt" : "2000-01-23T04:56:07.000+00:00",
              "name" : "AcmeCorp Main Pipeline",
              "lastFinishedAt" : "2000-01-23T04:56:07.000+00:00",
              "id" : "29",
              "trigger" : "MANUAL",
              "programId" : "14",
              "phases" : [ {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              } ],
              "status" : "RUNNING,FAILED",
              "updatedAt" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "createdAt" : "2000-01-23T04:56:07.000+00:00",
              "_links" : {
                "http://ns.adobe.com/adobecloud/rel/program" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "self" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/executions" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/execution" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                }
              },
              "lastStartedAt" : "2000-01-23T04:56:07.000+00:00",
              "name" : "AcmeCorp Main Pipeline",
              "lastFinishedAt" : "2000-01-23T04:56:07.000+00:00",
              "id" : "29",
              "trigger" : "MANUAL",
              "programId" : "14",
              "phases" : [ {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              } ],
              "status" : "RUNNING,FAILED",
              "updatedAt" : "2000-01-23T04:56:07.000+00:00"
            } ]
          },
          "_links" : {
            "next" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "prev" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "self" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            }
          }
        }"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }


    route("/api/program/{programId}/pipeline/{pipelineId}") {
        patch {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "createdAt" : "2000-01-23T04:56:07.000+00:00",
              "_links" : {
                "http://ns.adobe.com/adobecloud/rel/program" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "self" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/executions" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                },
                "http://ns.adobe.com/adobecloud/rel/execution" : {
                  "hreflang" : "hreflang",
                  "templated" : false,
                  "profile" : "profile",
                  "name" : "name",
                  "href" : "href",
                  "type" : "type",
                  "deprecation" : "deprecation",
                  "title" : "title"
                }
              },
              "lastStartedAt" : "2000-01-23T04:56:07.000+00:00",
              "name" : "AcmeCorp Main Pipeline",
              "lastFinishedAt" : "2000-01-23T04:56:07.000+00:00",
              "id" : "29",
              "trigger" : "MANUAL",
              "programId" : "14",
              "phases" : [ {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              }, {
                "environmentId" : "environmentId",
                "name" : "DEV Build",
                "repositoryId" : "repositoryId",
                "type" : "DEPLOY",
                "branch" : "branch"
              } ],
              "status" : "RUNNING,FAILED",
              "updatedAt" : "2000-01-23T04:56:07.000+00:00"
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }

}
