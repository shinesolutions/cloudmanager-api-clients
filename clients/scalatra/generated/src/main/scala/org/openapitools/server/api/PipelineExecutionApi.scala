/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.PipelineExecution
import org.openapitools.server.model.PipelineExecutionListRepresentation
import org.openapitools.server.model.PipelineExecutionStepState
import org.openapitools.server.model.PipelineStepMetrics

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class PipelineExecutionApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "PipelineExecutionApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val advancePipelineExecutionOperation = (apiOperation[Unit]("advancePipelineExecution")
    summary "Advance"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), pathParam[String]("executionId").description(""), pathParam[String]("phaseId").description(""), pathParam[String]("stepId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), headerParam[String]("contentType").description(""), bodyParam[Any]("body").description(""))
  )

  put("/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/advance", operation(advancePipelineExecutionOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val executionId = params.getOrElse("executionId", halt(400))
    //println("executionId: " + executionId)
    val phaseId = params.getOrElse("phaseId", halt(400))
    //println("phaseId: " + phaseId)
    val stepId = params.getOrElse("stepId", halt(400))
    //println("stepId: " + stepId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
    val contentType = request.getHeader("contentType")
    //println("contentType: " + contentType)
    //println("body: " + body)
  }

  

  val cancelPipelineExecutionStepOperation = (apiOperation[Unit]("cancelPipelineExecutionStep")
    summary "Cancel"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), pathParam[String]("executionId").description(""), pathParam[String]("phaseId").description(""), pathParam[String]("stepId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), headerParam[String]("contentType").description(""), bodyParam[Any]("body").description(""))
  )

  put("/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/cancel", operation(cancelPipelineExecutionStepOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val executionId = params.getOrElse("executionId", halt(400))
    //println("executionId: " + executionId)
    val phaseId = params.getOrElse("phaseId", halt(400))
    //println("phaseId: " + phaseId)
    val stepId = params.getOrElse("stepId", halt(400))
    //println("stepId: " + stepId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
    val contentType = request.getHeader("contentType")
    //println("contentType: " + contentType)
    //println("body: " + body)
  }

  

  val getCurrentExecutionOperation = (apiOperation[PipelineExecution]("getCurrentExecution")
    summary "Get current pipeline execution"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/program/:programId/pipeline/:pipelineId/execution", operation(getCurrentExecutionOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val getExecutionOperation = (apiOperation[PipelineExecution]("getExecution")
    summary "Get pipeline execution"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), pathParam[String]("executionId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/program/:programId/pipeline/:pipelineId/execution/:executionId", operation(getExecutionOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val executionId = params.getOrElse("executionId", halt(400))
    //println("executionId: " + executionId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val getExecutionsOperation = (apiOperation[PipelineExecutionListRepresentation]("getExecutions")
    summary "List Executions"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), queryParam[String]("start").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/api/program/:programId/pipeline/:pipelineId/executions", operation(getExecutionsOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
            val start = params.getAs[String]("start")

    //println("start: " + start)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getStepLogsOperation = (apiOperation[Unit]("getStepLogs")
    summary "Get logs"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), pathParam[String]("executionId").description(""), pathParam[String]("phaseId").description(""), pathParam[String]("stepId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), queryParam[String]("file").description("").optional, headerParam[String]("accept").description("").optional)
  )

  get("/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/logs", operation(getStepLogsOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val executionId = params.getOrElse("executionId", halt(400))
    //println("executionId: " + executionId)
    val phaseId = params.getOrElse("phaseId", halt(400))
    //println("phaseId: " + phaseId)
    val stepId = params.getOrElse("stepId", halt(400))
    //println("stepId: " + stepId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
            val file = params.getAs[String]("file")

    //println("file: " + file)
    val accept = request.getHeader("accept")
    //println("accept: " + accept)
  }

  

  val startPipelineOperation = (apiOperation[Unit]("startPipeline")
    summary "Start the pipeline"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), headerParam[String]("contentType").description(""))
  )

  put("/api/program/:programId/pipeline/:pipelineId/execution", operation(startPipelineOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
    val contentType = request.getHeader("contentType")
    //println("contentType: " + contentType)
  }

  

  val stepMetricOperation = (apiOperation[PipelineStepMetrics]("stepMetric")
    summary "Get step metrics"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), pathParam[String]("executionId").description(""), pathParam[String]("phaseId").description(""), pathParam[String]("stepId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/metrics", operation(stepMetricOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val executionId = params.getOrElse("executionId", halt(400))
    //println("executionId: " + executionId)
    val phaseId = params.getOrElse("phaseId", halt(400))
    //println("phaseId: " + phaseId)
    val stepId = params.getOrElse("stepId", halt(400))
    //println("stepId: " + stepId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val stepStateOperation = (apiOperation[PipelineExecutionStepState]("stepState")
    summary "Get step state"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("pipelineId").description(""), pathParam[String]("executionId").description(""), pathParam[String]("phaseId").description(""), pathParam[String]("stepId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId", operation(stepStateOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val pipelineId = params.getOrElse("pipelineId", halt(400))
    //println("pipelineId: " + pipelineId)
    val executionId = params.getOrElse("executionId", halt(400))
    //println("executionId: " + executionId)
    val phaseId = params.getOrElse("phaseId", halt(400))
    //println("phaseId: " + phaseId)
    val stepId = params.getOrElse("stepId", halt(400))
    //println("stepId: " + stepId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

}
