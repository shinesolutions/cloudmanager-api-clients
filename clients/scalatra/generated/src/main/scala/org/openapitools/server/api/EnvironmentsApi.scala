/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.BadRequestError
import org.openapitools.server.model.Environment
import org.openapitools.server.model.EnvironmentList
import org.openapitools.server.model.EnvironmentLogs

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class EnvironmentsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "EnvironmentsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteEnvironmentOperation = (apiOperation[Environment]("deleteEnvironment")
    summary "DeleteEnvironment"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("environmentId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  delete("/api/program/:programId/environment/:environmentId", operation(deleteEnvironmentOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val environmentId = params.getOrElse("environmentId", halt(400))
    //println("environmentId: " + environmentId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val downloadLogsOperation = (apiOperation[Unit]("downloadLogs")
    summary "Download Logs"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("environmentId").description(""), queryParam[String]("service").description(""), queryParam[String]("name").description(""), queryParam[String]("date").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), headerParam[String]("accept").description("").optional)
  )

  get("/api/program/:programId/environment/:environmentId/logs/download", operation(downloadLogsOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val environmentId = params.getOrElse("environmentId", halt(400))
    //println("environmentId: " + environmentId)
            val service = params.getAs[String]("service")

    //println("service: " + service)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val date = params.getAs[String]("date")

    //println("date: " + date)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
    val accept = request.getHeader("accept")
    //println("accept: " + accept)
  }

  

  val getEnvironmentOperation = (apiOperation[Environment]("getEnvironment")
    summary "Get Environment"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("environmentId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/program/:programId/environment/:environmentId", operation(getEnvironmentOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val environmentId = params.getOrElse("environmentId", halt(400))
    //println("environmentId: " + environmentId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val getEnvironmentLogsOperation = (apiOperation[EnvironmentLogs]("getEnvironmentLogs")
    summary "Get Environment Logs"
    parameters(pathParam[String]("programId").description(""), pathParam[String]("environmentId").description(""), queryParam[Int]("days").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), queryParam[List[String]]("service").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("name").description("").optional.defaultValue(List.empty[String] ))
  )

  get("/api/program/:programId/environment/:environmentId/logs", operation(getEnvironmentLogsOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val environmentId = params.getOrElse("environmentId", halt(400))
    //println("environmentId: " + environmentId)
            val days = params.getAs[Int]("days")

    //println("days: " + days)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
        val serviceString = params.getAs[String]("service")
    val service = if("multi" == "default" || "multi" == "csv") {
      serviceString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("service: " + service)
        val nameString = params.getAs[String]("name")
    val name = if("multi" == "default" || "multi" == "csv") {
      nameString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("name: " + name)
  }

  

  val getEnvironmentsOperation = (apiOperation[EnvironmentList]("getEnvironments")
    summary "List Environments"
    parameters(pathParam[String]("programId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""), queryParam[String]("`type`").description("").optional)
  )

  get("/api/program/:programId/environments", operation(getEnvironmentsOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
  }

}
