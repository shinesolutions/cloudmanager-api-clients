/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.Program
import org.openapitools.server.model.ProgramList

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ProgramsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ProgramsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteProgramOperation = (apiOperation[Program]("deleteProgram")
    summary "Delete Program"
    parameters(pathParam[String]("programId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  delete("/api/program/:programId", operation(deleteProgramOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val getProgramOperation = (apiOperation[Program]("getProgram")
    summary "Get Program"
    parameters(pathParam[String]("programId").description(""), headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/program/:programId", operation(getProgramOperation)) {
    val programId = params.getOrElse("programId", halt(400))
    //println("programId: " + programId)
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

  

  val getProgramsOperation = (apiOperation[ProgramList]("getPrograms")
    summary "Lists Programs"
    parameters(headerParam[String]("xGwImsOrgId").description(""), headerParam[String]("authorization").description(""), headerParam[String]("xApiKey").description(""))
  )

  get("/api/programs", operation(getProgramsOperation)) {
    val xGwImsOrgId = request.getHeader("xGwImsOrgId")
    //println("xGwImsOrgId: " + xGwImsOrgId)
    val authorization = request.getHeader("authorization")
    //println("authorization: " + authorization)
    val xApiKey = request.getHeader("xApiKey")
    //println("xApiKey: " + xApiKey)
  }

}
