/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Program,
    ProgramFromJSON,
    ProgramToJSON,
    ProgramList,
    ProgramListFromJSON,
    ProgramListToJSON,
} from '../models';

export interface DeleteProgramRequest {
    programId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetProgramRequest {
    programId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetProgramsRequest {
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

/**
 * no description
 */
export class ProgramsApi extends runtime.BaseAPI {

    /**
     * Delete an program
     * Delete Program
     */
    async deleteProgramRaw(requestParameters: DeleteProgramRequest): Promise<runtime.ApiResponse<Program>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling deleteProgram.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling deleteProgram.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteProgram.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling deleteProgram.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramFromJSON(jsonValue));
    }

    /**
     * Delete an program
     * Delete Program
     */
    async deleteProgram(requestParameters: DeleteProgramRequest): Promise<Program> {
        const response = await this.deleteProgramRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a program by its id
     * Get Program
     */
    async getProgramRaw(requestParameters: GetProgramRequest): Promise<runtime.ApiResponse<Program>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getProgram.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getProgram.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getProgram.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getProgram.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramFromJSON(jsonValue));
    }

    /**
     * Returns a program by its id
     * Get Program
     */
    async getProgram(requestParameters: GetProgramRequest): Promise<Program> {
        const response = await this.getProgramRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all programs that the requesting user has access to
     * Lists Programs
     */
    async getProgramsRaw(requestParameters: GetProgramsRequest): Promise<runtime.ApiResponse<ProgramList>> {
        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getPrograms.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPrograms.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getPrograms.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/programs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramListFromJSON(jsonValue));
    }

    /**
     * Returns all programs that the requesting user has access to
     * Lists Programs
     */
    async getPrograms(requestParameters: GetProgramsRequest): Promise<ProgramList> {
        const response = await this.getProgramsRaw(requestParameters);
        return await response.value();
    }

}
