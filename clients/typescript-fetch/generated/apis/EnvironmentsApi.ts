/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequestError,
    BadRequestErrorFromJSON,
    BadRequestErrorToJSON,
    Environment,
    EnvironmentFromJSON,
    EnvironmentToJSON,
    EnvironmentList,
    EnvironmentListFromJSON,
    EnvironmentListToJSON,
    EnvironmentLogs,
    EnvironmentLogsFromJSON,
    EnvironmentLogsToJSON,
} from '../models';

export interface DeleteEnvironmentRequest {
    programId: string;
    environmentId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface DownloadLogsRequest {
    programId: string;
    environmentId: string;
    service: string;
    name: string;
    date: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    accept?: string;
}

export interface GetEnvironmentRequest {
    programId: string;
    environmentId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetEnvironmentLogsRequest {
    programId: string;
    environmentId: string;
    days: number;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    service?: Array<string>;
    name?: Array<string>;
}

export interface GetEnvironmentsRequest {
    programId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    type?: GetEnvironmentsTypeEnum;
}

/**
 * no description
 */
export class EnvironmentsApi extends runtime.BaseAPI {

    /**
     * Delete environment
     * DeleteEnvironment
     */
    async deleteEnvironmentRaw(requestParameters: DeleteEnvironmentRequest): Promise<runtime.ApiResponse<Environment>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling deleteEnvironment.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling deleteEnvironment.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling deleteEnvironment.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteEnvironment.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling deleteEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environment/{environmentId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentFromJSON(jsonValue));
    }

    /**
     * Delete environment
     * DeleteEnvironment
     */
    async deleteEnvironment(requestParameters: DeleteEnvironmentRequest): Promise<Environment> {
        const response = await this.deleteEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Download environment logs
     * Download Logs
     */
    async downloadLogsRaw(requestParameters: DownloadLogsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling downloadLogs.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling downloadLogs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environment/{environmentId}/logs/download`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download environment logs
     * Download Logs
     */
    async downloadLogs(requestParameters: DownloadLogsRequest): Promise<void> {
        await this.downloadLogsRaw(requestParameters);
    }

    /**
     * Returns an environment by its id
     * Get Environment
     */
    async getEnvironmentRaw(requestParameters: GetEnvironmentRequest): Promise<runtime.ApiResponse<Environment>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getEnvironment.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getEnvironment.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getEnvironment.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEnvironment.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environment/{environmentId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentFromJSON(jsonValue));
    }

    /**
     * Returns an environment by its id
     * Get Environment
     */
    async getEnvironment(requestParameters: GetEnvironmentRequest): Promise<Environment> {
        const response = await this.getEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all logs available in environment
     * Get Environment Logs
     */
    async getEnvironmentLogsRaw(requestParameters: GetEnvironmentLogsRequest): Promise<runtime.ApiResponse<EnvironmentLogs>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getEnvironmentLogs.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentLogs.');
        }

        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling getEnvironmentLogs.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getEnvironmentLogs.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEnvironmentLogs.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getEnvironmentLogs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.service) {
            queryParameters['service'] = requestParameters.service;
        }

        if (requestParameters.name) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environment/{environmentId}/logs`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentLogsFromJSON(jsonValue));
    }

    /**
     * List all logs available in environment
     * Get Environment Logs
     */
    async getEnvironmentLogs(requestParameters: GetEnvironmentLogsRequest): Promise<EnvironmentLogs> {
        const response = await this.getEnvironmentLogsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all environments in an program
     * List Environments
     */
    async getEnvironmentsRaw(requestParameters: GetEnvironmentsRequest): Promise<runtime.ApiResponse<EnvironmentList>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getEnvironments.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getEnvironments.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEnvironments.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getEnvironments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environments`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentListFromJSON(jsonValue));
    }

    /**
     * Lists all environments in an program
     * List Environments
     */
    async getEnvironments(requestParameters: GetEnvironmentsRequest): Promise<EnvironmentList> {
        const response = await this.getEnvironmentsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetEnvironmentsTypeEnum {
    Dev = 'dev',
    Stage = 'stage',
    Prod = 'prod'
}
