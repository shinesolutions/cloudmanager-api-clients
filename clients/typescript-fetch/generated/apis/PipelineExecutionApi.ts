/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PipelineExecution,
    PipelineExecutionFromJSON,
    PipelineExecutionToJSON,
    PipelineExecutionListRepresentation,
    PipelineExecutionListRepresentationFromJSON,
    PipelineExecutionListRepresentationToJSON,
    PipelineExecutionStepState,
    PipelineExecutionStepStateFromJSON,
    PipelineExecutionStepStateToJSON,
    PipelineStepMetrics,
    PipelineStepMetricsFromJSON,
    PipelineStepMetricsToJSON,
} from '../models';

export interface AdvancePipelineExecutionRequest {
    programId: string;
    pipelineId: string;
    executionId: string;
    phaseId: string;
    stepId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    contentType: string;
    body: object;
}

export interface CancelPipelineExecutionStepRequest {
    programId: string;
    pipelineId: string;
    executionId: string;
    phaseId: string;
    stepId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    contentType: string;
    body: object;
}

export interface GetCurrentExecutionRequest {
    programId: string;
    pipelineId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetExecutionRequest {
    programId: string;
    pipelineId: string;
    executionId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetExecutionsRequest {
    programId: string;
    pipelineId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    start?: string;
    limit?: number;
}

export interface GetStepLogsRequest {
    programId: string;
    pipelineId: string;
    executionId: string;
    phaseId: string;
    stepId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    file?: string;
    accept?: string;
}

export interface StartPipelineRequest {
    programId: string;
    pipelineId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    contentType: string;
}

export interface StepMetricRequest {
    programId: string;
    pipelineId: string;
    executionId: string;
    phaseId: string;
    stepId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface StepStateRequest {
    programId: string;
    pipelineId: string;
    executionId: string;
    phaseId: string;
    stepId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

/**
 * no description
 */
export class PipelineExecutionApi extends runtime.BaseAPI {

    /**
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * Advance
     */
    async advancePipelineExecutionRaw(requestParameters: AdvancePipelineExecutionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.executionId === null || requestParameters.executionId === undefined) {
            throw new runtime.RequiredError('executionId','Required parameter requestParameters.executionId was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling advancePipelineExecution.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling advancePipelineExecution.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters.executionId))).replace(`{${"phaseId"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     * Advance
     */
    async advancePipelineExecution(requestParameters: AdvancePipelineExecutionRequest): Promise<void> {
        await this.advancePipelineExecutionRaw(requestParameters);
    }

    /**
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * Cancel
     */
    async cancelPipelineExecutionStepRaw(requestParameters: CancelPipelineExecutionStepRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.executionId === null || requestParameters.executionId === undefined) {
            throw new runtime.RequiredError('executionId','Required parameter requestParameters.executionId was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling cancelPipelineExecutionStep.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling cancelPipelineExecutionStep.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters.executionId))).replace(`{${"phaseId"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     * Cancel
     */
    async cancelPipelineExecutionStep(requestParameters: CancelPipelineExecutionStepRequest): Promise<void> {
        await this.cancelPipelineExecutionStepRaw(requestParameters);
    }

    /**
     * Returns current pipeline execution if any.
     * Get current pipeline execution
     */
    async getCurrentExecutionRaw(requestParameters: GetCurrentExecutionRequest): Promise<runtime.ApiResponse<PipelineExecution>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getCurrentExecution.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getCurrentExecution.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getCurrentExecution.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCurrentExecution.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getCurrentExecution.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineExecutionFromJSON(jsonValue));
    }

    /**
     * Returns current pipeline execution if any.
     * Get current pipeline execution
     */
    async getCurrentExecution(requestParameters: GetCurrentExecutionRequest): Promise<PipelineExecution> {
        const response = await this.getCurrentExecutionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a pipeline execution by id
     * Get pipeline execution
     */
    async getExecutionRaw(requestParameters: GetExecutionRequest): Promise<runtime.ApiResponse<PipelineExecution>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getExecution.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getExecution.');
        }

        if (requestParameters.executionId === null || requestParameters.executionId === undefined) {
            throw new runtime.RequiredError('executionId','Required parameter requestParameters.executionId was null or undefined when calling getExecution.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getExecution.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getExecution.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getExecution.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters.executionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineExecutionFromJSON(jsonValue));
    }

    /**
     * Returns a pipeline execution by id
     * Get pipeline execution
     */
    async getExecution(requestParameters: GetExecutionRequest): Promise<PipelineExecution> {
        const response = await this.getExecutionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the history of pipeline executions in a newest to oldest order
     * List Executions
     */
    async getExecutionsRaw(requestParameters: GetExecutionsRequest): Promise<runtime.ApiResponse<PipelineExecutionListRepresentation>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getExecutions.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getExecutions.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getExecutions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getExecutions.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getExecutions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/executions`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineExecutionListRepresentationFromJSON(jsonValue));
    }

    /**
     * Returns the history of pipeline executions in a newest to oldest order
     * List Executions
     */
    async getExecutions(requestParameters: GetExecutionsRequest): Promise<PipelineExecutionListRepresentation> {
        const response = await this.getExecutionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the logs associated with a step.
     * Get logs
     */
    async getStepLogsRaw(requestParameters: GetStepLogsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.executionId === null || requestParameters.executionId === undefined) {
            throw new runtime.RequiredError('executionId','Required parameter requestParameters.executionId was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getStepLogs.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getStepLogs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.file !== undefined) {
            queryParameters['file'] = requestParameters.file;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters.executionId))).replace(`{${"phaseId"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the logs associated with a step.
     * Get logs
     */
    async getStepLogs(requestParameters: GetStepLogsRequest): Promise<void> {
        await this.getStepLogsRaw(requestParameters);
    }

    /**
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * Start the pipeline
     */
    async startPipelineRaw(requestParameters: StartPipelineRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling startPipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling startPipeline.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling startPipeline.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling startPipeline.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling startPipeline.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling startPipeline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts the Pipeline. This works only if the pipeline is not already started.
     * Start the pipeline
     */
    async startPipeline(requestParameters: StartPipelineRequest): Promise<void> {
        await this.startPipelineRaw(requestParameters);
    }

    /**
     * Get step metrics
     */
    async stepMetricRaw(requestParameters: StepMetricRequest): Promise<runtime.ApiResponse<PipelineStepMetrics>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling stepMetric.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling stepMetric.');
        }

        if (requestParameters.executionId === null || requestParameters.executionId === undefined) {
            throw new runtime.RequiredError('executionId','Required parameter requestParameters.executionId was null or undefined when calling stepMetric.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling stepMetric.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling stepMetric.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling stepMetric.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling stepMetric.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling stepMetric.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters.executionId))).replace(`{${"phaseId"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineStepMetricsFromJSON(jsonValue));
    }

    /**
     * Get step metrics
     */
    async stepMetric(requestParameters: StepMetricRequest): Promise<PipelineStepMetrics> {
        const response = await this.stepMetricRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get step state
     */
    async stepStateRaw(requestParameters: StepStateRequest): Promise<runtime.ApiResponse<PipelineExecutionStepState>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling stepState.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling stepState.');
        }

        if (requestParameters.executionId === null || requestParameters.executionId === undefined) {
            throw new runtime.RequiredError('executionId','Required parameter requestParameters.executionId was null or undefined when calling stepState.');
        }

        if (requestParameters.phaseId === null || requestParameters.phaseId === undefined) {
            throw new runtime.RequiredError('phaseId','Required parameter requestParameters.phaseId was null or undefined when calling stepState.');
        }

        if (requestParameters.stepId === null || requestParameters.stepId === undefined) {
            throw new runtime.RequiredError('stepId','Required parameter requestParameters.stepId was null or undefined when calling stepState.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling stepState.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling stepState.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling stepState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))).replace(`{${"executionId"}}`, encodeURIComponent(String(requestParameters.executionId))).replace(`{${"phaseId"}}`, encodeURIComponent(String(requestParameters.phaseId))).replace(`{${"stepId"}}`, encodeURIComponent(String(requestParameters.stepId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineExecutionStepStateFromJSON(jsonValue));
    }

    /**
     * Get step state
     */
    async stepState(requestParameters: StepStateRequest): Promise<PipelineExecutionStepState> {
        const response = await this.stepStateRaw(requestParameters);
        return await response.value();
    }

}
