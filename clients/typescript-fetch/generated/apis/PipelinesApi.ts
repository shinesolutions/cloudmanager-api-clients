/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Pipeline,
    PipelineFromJSON,
    PipelineToJSON,
    PipelineList,
    PipelineListFromJSON,
    PipelineListToJSON,
} from '../models';

export interface DeletePipelineRequest {
    programId: string;
    pipelineId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetPipelineRequest {
    programId: string;
    pipelineId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface GetPipelinesRequest {
    programId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface PatchPipelineRequest {
    programId: string;
    pipelineId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    contentType: string;
    body: Pipeline;
}

/**
 * no description
 */
export class PipelinesApi extends runtime.BaseAPI {

    /**
     * Delete a pipeline. All the data is wiped.
     * Delete a Pipeline
     */
    async deletePipelineRaw(requestParameters: DeletePipelineRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling deletePipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling deletePipeline.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling deletePipeline.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deletePipeline.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling deletePipeline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a pipeline. All the data is wiped.
     * Delete a Pipeline
     */
    async deletePipeline(requestParameters: DeletePipelineRequest): Promise<void> {
        await this.deletePipelineRaw(requestParameters);
    }

    /**
     * Returns a pipeline by its id
     * Get Pipeline
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getPipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling getPipeline.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getPipeline.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPipeline.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getPipeline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * Returns a pipeline by its id
     * Get Pipeline
     */
    async getPipeline(requestParameters: GetPipelineRequest): Promise<Pipeline> {
        const response = await this.getPipelineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all the pipelines that the requesting user has access to in an program
     * List Pipelines
     */
    async getPipelinesRaw(requestParameters: GetPipelinesRequest): Promise<runtime.ApiResponse<PipelineList>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getPipelines.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getPipelines.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPipelines.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getPipelines.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipelines`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineListFromJSON(jsonValue));
    }

    /**
     * Returns all the pipelines that the requesting user has access to in an program
     * List Pipelines
     */
    async getPipelines(requestParameters: GetPipelinesRequest): Promise<PipelineList> {
        const response = await this.getPipelinesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Patches a pipeline within an program.
     * Patches Pipeline
     */
    async patchPipelineRaw(requestParameters: PatchPipelineRequest): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling patchPipeline.');
        }

        if (requestParameters.pipelineId === null || requestParameters.pipelineId === undefined) {
            throw new runtime.RequiredError('pipelineId','Required parameter requestParameters.pipelineId was null or undefined when calling patchPipeline.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling patchPipeline.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling patchPipeline.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling patchPipeline.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling patchPipeline.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchPipeline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        const response = await this.request({
            path: `/api/program/{programId}/pipeline/{pipelineId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"pipelineId"}}`, encodeURIComponent(String(requestParameters.pipelineId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * Patches a pipeline within an program.
     * Patches Pipeline
     */
    async patchPipeline(requestParameters: PatchPipelineRequest): Promise<Pipeline> {
        const response = await this.patchPipelineRaw(requestParameters);
        return await response.value();
    }

}
