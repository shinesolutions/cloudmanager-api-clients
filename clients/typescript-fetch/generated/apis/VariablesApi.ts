/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Variable,
    VariableFromJSON,
    VariableToJSON,
    VariableList,
    VariableListFromJSON,
    VariableListToJSON,
} from '../models';

export interface GetEnvironmentVariablesRequest {
    programId: string;
    environmentId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
}

export interface PatchEnvironmentVariablesRequest {
    programId: string;
    environmentId: string;
    xGwImsOrgId: string;
    authorization: string;
    xApiKey: string;
    contentType: string;
    body: Array<Variable>;
}

/**
 * no description
 */
export class VariablesApi extends runtime.BaseAPI {

    /**
     * List the user defined variables for an environment (Cloud Service only).
     * List User Environment Variables
     */
    async getEnvironmentVariablesRaw(requestParameters: GetEnvironmentVariablesRequest): Promise<runtime.ApiResponse<VariableList>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getEnvironmentVariables.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentVariables.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling getEnvironmentVariables.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEnvironmentVariables.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getEnvironmentVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environment/{environmentId}/variables`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableListFromJSON(jsonValue));
    }

    /**
     * List the user defined variables for an environment (Cloud Service only).
     * List User Environment Variables
     */
    async getEnvironmentVariables(requestParameters: GetEnvironmentVariablesRequest): Promise<VariableList> {
        const response = await this.getEnvironmentVariablesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
     * Patch User Environment Variables
     */
    async patchEnvironmentVariablesRaw(requestParameters: PatchEnvironmentVariablesRequest): Promise<runtime.ApiResponse<VariableList>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling patchEnvironmentVariables.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling patchEnvironmentVariables.');
        }

        if (requestParameters.xGwImsOrgId === null || requestParameters.xGwImsOrgId === undefined) {
            throw new runtime.RequiredError('xGwImsOrgId','Required parameter requestParameters.xGwImsOrgId was null or undefined when calling patchEnvironmentVariables.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling patchEnvironmentVariables.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling patchEnvironmentVariables.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling patchEnvironmentVariables.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchEnvironmentVariables.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGwImsOrgId !== undefined && requestParameters.xGwImsOrgId !== null) {
            headerParameters['x-gw-ims-org-id'] = String(requestParameters.xGwImsOrgId);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        const response = await this.request({
            path: `/api/program/{programId}/environment/{environmentId}/variables`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(VariableToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VariableListFromJSON(jsonValue));
    }

    /**
     * Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.
     * Patch User Environment Variables
     */
    async patchEnvironmentVariables(requestParameters: PatchEnvironmentVariablesRequest): Promise<VariableList> {
        const response = await this.patchEnvironmentVariablesRaw(requestParameters);
        return await response.value();
    }

}
