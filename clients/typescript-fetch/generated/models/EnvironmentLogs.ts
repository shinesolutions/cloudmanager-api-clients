/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnvironmentLogsEmbedded,
    EnvironmentLogsEmbeddedFromJSON,
    EnvironmentLogsEmbeddedFromJSONTyped,
    EnvironmentLogsEmbeddedToJSON,
    EnvironmentLogsLinks,
    EnvironmentLogsLinksFromJSON,
    EnvironmentLogsLinksFromJSONTyped,
    EnvironmentLogsLinksToJSON,
} from './';

/**
 * Logs of an Environment
 * @export
 * @interface EnvironmentLogs
 */
export interface EnvironmentLogs {
    /**
     * Name of the service
     * @type {Array<string>}
     * @memberof EnvironmentLogs
     */
    service?: Array<string>;
    /**
     * Name of the Log
     * @type {Array<string>}
     * @memberof EnvironmentLogs
     */
    name?: Array<string>;
    /**
     * Number of days
     * @type {number}
     * @memberof EnvironmentLogs
     */
    days?: number;
    /**
     * 
     * @type {EnvironmentLogsLinks}
     * @memberof EnvironmentLogs
     */
    links?: EnvironmentLogsLinks;
    /**
     * 
     * @type {EnvironmentLogsEmbedded}
     * @memberof EnvironmentLogs
     */
    embedded?: EnvironmentLogsEmbedded;
}

export function EnvironmentLogsFromJSON(json: any): EnvironmentLogs {
    return EnvironmentLogsFromJSONTyped(json, false);
}

export function EnvironmentLogsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvironmentLogs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'service': !exists(json, 'service') ? undefined : json['service'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'days': !exists(json, 'days') ? undefined : json['days'],
        'links': !exists(json, '_links') ? undefined : EnvironmentLogsLinksFromJSON(json['_links']),
        'embedded': !exists(json, '_embedded') ? undefined : EnvironmentLogsEmbeddedFromJSON(json['_embedded']),
    };
}

export function EnvironmentLogsToJSON(value?: EnvironmentLogs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'service': value.service,
        'name': value.name,
        'days': value.days,
        '_links': EnvironmentLogsLinksToJSON(value.links),
        '_embedded': EnvironmentLogsEmbeddedToJSON(value.embedded),
    };
}


