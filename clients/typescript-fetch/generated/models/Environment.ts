/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnvironmentLinks,
    EnvironmentLinksFromJSON,
    EnvironmentLinksFromJSONTyped,
    EnvironmentLinksToJSON,
} from './';

/**
 * An Environment that 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * id
     * @type {string}
     * @memberof Environment
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Environment
     */
    programId?: string;
    /**
     * Name of the environment
     * @type {string}
     * @memberof Environment
     */
    name?: string;
    /**
     * Description of the environment
     * @type {string}
     * @memberof Environment
     */
    description?: string;
    /**
     * Type of the environment
     * @type {string}
     * @memberof Environment
     */
    type?: EnvironmentTypeEnum;
    /**
     * 
     * @type {EnvironmentLinks}
     * @memberof Environment
     */
    links?: EnvironmentLinks;
}

export function EnvironmentFromJSON(json: any): Environment {
    return EnvironmentFromJSONTyped(json, false);
}

export function EnvironmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Environment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'programId': !exists(json, 'programId') ? undefined : json['programId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'links': !exists(json, '_links') ? undefined : EnvironmentLinksFromJSON(json['_links']),
    };
}

export function EnvironmentToJSON(value?: Environment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'programId': value.programId,
        'name': value.name,
        'description': value.description,
        'type': value.type,
        '_links': EnvironmentLinksToJSON(value.links),
    };
}

/**
* @export
* @enum {string}
*/
export enum EnvironmentTypeEnum {
    Dev = 'dev',
    Stage = 'stage',
    Prod = 'prod'
}


