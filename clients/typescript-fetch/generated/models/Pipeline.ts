/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PipelineLinks,
    PipelineLinksFromJSON,
    PipelineLinksFromJSONTyped,
    PipelineLinksToJSON,
    PipelinePhase,
    PipelinePhaseFromJSON,
    PipelinePhaseFromJSONTyped,
    PipelinePhaseToJSON,
} from './';

/**
 * Describes a __CI/CD Pipeline__
 * @export
 * @interface Pipeline
 */
export interface Pipeline {
    /**
     * Identifier of the pipeline. Unique within the program.
     * @type {string}
     * @memberof Pipeline
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof Pipeline
     */
    programId?: string;
    /**
     * Name of the pipeline
     * @type {string}
     * @memberof Pipeline
     */
    name: string;
    /**
     * How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}
     * @type {string}
     * @memberof Pipeline
     */
    trigger?: PipelineTriggerEnum;
    /**
     * Pipeline status
     * @type {string}
     * @memberof Pipeline
     */
    status?: PipelineStatusEnum;
    /**
     * Create date
     * @type {Date}
     * @memberof Pipeline
     */
    readonly createdAt?: Date;
    /**
     * Update date
     * @type {Date}
     * @memberof Pipeline
     */
    readonly updatedAt?: Date;
    /**
     * Last pipeline execution start
     * @type {Date}
     * @memberof Pipeline
     */
    readonly lastStartedAt?: Date;
    /**
     * Last pipeline execution end
     * @type {Date}
     * @memberof Pipeline
     */
    readonly lastFinishedAt?: Date;
    /**
     * Pipeline phases in execution order
     * @type {Array<PipelinePhase>}
     * @memberof Pipeline
     */
    phases: Array<PipelinePhase>;
    /**
     * 
     * @type {PipelineLinks}
     * @memberof Pipeline
     */
    links?: PipelineLinks;
}

export function PipelineFromJSON(json: any): Pipeline {
    return PipelineFromJSONTyped(json, false);
}

export function PipelineFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pipeline {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'programId': !exists(json, 'programId') ? undefined : json['programId'],
        'name': json['name'],
        'trigger': !exists(json, 'trigger') ? undefined : json['trigger'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'lastStartedAt': !exists(json, 'lastStartedAt') ? undefined : (new Date(json['lastStartedAt'])),
        'lastFinishedAt': !exists(json, 'lastFinishedAt') ? undefined : (new Date(json['lastFinishedAt'])),
        'phases': ((json['phases'] as Array<any>).map(PipelinePhaseFromJSON)),
        'links': !exists(json, '_links') ? undefined : PipelineLinksFromJSON(json['_links']),
    };
}

export function PipelineToJSON(value?: Pipeline | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'programId': value.programId,
        'name': value.name,
        'trigger': value.trigger,
        'status': value.status,
        'phases': ((value.phases as Array<any>).map(PipelinePhaseToJSON)),
        '_links': PipelineLinksToJSON(value.links),
    };
}

/**
* @export
* @enum {string}
*/
export enum PipelineTriggerEnum {
    ONCOMMIT = 'ON_COMMIT',
    MANUAL = 'MANUAL',
    SCHEDULE = 'SCHEDULE'
}
/**
* @export
* @enum {string}
*/
export enum PipelineStatusEnum {
    IDLE = 'IDLE',
    BUSY = 'BUSY',
    WAITING = 'WAITING'
}


