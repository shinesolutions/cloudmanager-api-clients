/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PipelineExecutionEmbedded,
    PipelineExecutionEmbeddedFromJSON,
    PipelineExecutionEmbeddedFromJSONTyped,
    PipelineExecutionEmbeddedToJSON,
    PipelineExecutionLinks,
    PipelineExecutionLinksFromJSON,
    PipelineExecutionLinksFromJSONTyped,
    PipelineExecutionLinksToJSON,
} from './';

/**
 * Wraps a pipeline execution
 * @export
 * @interface PipelineExecution
 */
export interface PipelineExecution {
    /**
     * Pipeline execution identifier
     * @type {string}
     * @memberof PipelineExecution
     */
    id?: string;
    /**
     * Identifier of the program. Unique within the space.
     * @type {string}
     * @memberof PipelineExecution
     */
    readonly programId?: string;
    /**
     * Identifier of the pipeline. Unique within the space.
     * @type {string}
     * @memberof PipelineExecution
     */
    readonly pipelineId?: string;
    /**
     * Version of the artifacts generated during this execution
     * @type {string}
     * @memberof PipelineExecution
     */
    artifactsVersion?: string;
    /**
     * AdobeID who started the pipeline. Empty for auto triggered builds
     * @type {string}
     * @memberof PipelineExecution
     */
    user?: string;
    /**
     * Status of the execution
     * @type {string}
     * @memberof PipelineExecution
     */
    status?: PipelineExecutionStatusEnum;
    /**
     * How the execution was triggered.
     * @type {string}
     * @memberof PipelineExecution
     */
    trigger?: PipelineExecutionTriggerEnum;
    /**
     * Start time
     * @type {Date}
     * @memberof PipelineExecution
     */
    createdAt?: Date;
    /**
     * Date of last status change
     * @type {Date}
     * @memberof PipelineExecution
     */
    updatedAt?: Date;
    /**
     * Date the execution reached a final state
     * @type {Date}
     * @memberof PipelineExecution
     */
    finishedAt?: Date;
    /**
     * 
     * @type {PipelineExecutionEmbedded}
     * @memberof PipelineExecution
     */
    embedded?: PipelineExecutionEmbedded;
    /**
     * 
     * @type {PipelineExecutionLinks}
     * @memberof PipelineExecution
     */
    links?: PipelineExecutionLinks;
}

export function PipelineExecutionFromJSON(json: any): PipelineExecution {
    return PipelineExecutionFromJSONTyped(json, false);
}

export function PipelineExecutionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PipelineExecution {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'programId': !exists(json, 'programId') ? undefined : json['programId'],
        'pipelineId': !exists(json, 'pipelineId') ? undefined : json['pipelineId'],
        'artifactsVersion': !exists(json, 'artifactsVersion') ? undefined : json['artifactsVersion'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'trigger': !exists(json, 'trigger') ? undefined : json['trigger'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
        'embedded': !exists(json, '_embedded') ? undefined : PipelineExecutionEmbeddedFromJSON(json['_embedded']),
        'links': !exists(json, '_links') ? undefined : PipelineExecutionLinksFromJSON(json['_links']),
    };
}

export function PipelineExecutionToJSON(value?: PipelineExecution | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'artifactsVersion': value.artifactsVersion,
        'user': value.user,
        'status': value.status,
        'trigger': value.trigger,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'finishedAt': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        '_embedded': PipelineExecutionEmbeddedToJSON(value.embedded),
        '_links': PipelineExecutionLinksToJSON(value.links),
    };
}

/**
* @export
* @enum {string}
*/
export enum PipelineExecutionStatusEnum {
    NOTSTARTED = 'NOT_STARTED',
    RUNNING = 'RUNNING',
    CANCELLING = 'CANCELLING',
    CANCELLED = 'CANCELLED',
    FINISHED = 'FINISHED',
    ERROR = 'ERROR',
    FAILED = 'FAILED'
}
/**
* @export
* @enum {string}
*/
export enum PipelineExecutionTriggerEnum {
    ONCOMMIT = 'ON_COMMIT',
    MANUAL = 'MANUAL',
    SCHEDULE = 'SCHEDULE',
    PUSHUPGRADES = 'PUSH_UPGRADES'
}


