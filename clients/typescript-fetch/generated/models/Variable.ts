/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A named value than can be set on an Environment
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     * Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.
     * @type {string}
     * @memberof Variable
     */
    name?: string;
    /**
     * Value of the variable. Read-Write for non-secrets, write-only for secrets.
     * @type {string}
     * @memberof Variable
     */
    value?: string;
    /**
     * Type of the variable. Default `string` if missing. Cannot be changed after creation.
     * @type {string}
     * @memberof Variable
     */
    type?: VariableTypeEnum;
}

export function VariableFromJSON(json: any): Variable {
    return VariableFromJSONTyped(json, false);
}

export function VariableFromJSONTyped(json: any, ignoreDiscriminator: boolean): Variable {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function VariableToJSON(value?: Variable | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'value': value.value,
        'type': value.type,
    };
}

/**
* @export
* @enum {string}
*/
export enum VariableTypeEnum {
    String = 'string',
    SecretString = 'secretString'
}


