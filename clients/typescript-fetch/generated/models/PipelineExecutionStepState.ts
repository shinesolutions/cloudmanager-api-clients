/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PipelineExecutionStepStateLinks,
    PipelineExecutionStepStateLinksFromJSON,
    PipelineExecutionStepStateLinksFromJSONTyped,
    PipelineExecutionStepStateLinksToJSON,
} from './';

/**
 * Describes the status of a particular pipeline execution step for display purposes
 * @export
 * @interface PipelineExecutionStepState
 */
export interface PipelineExecutionStepState {
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    stepId?: string;
    /**
     * 
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    phaseId?: string;
    /**
     * Name of the action
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    action?: string;
    /**
     * Target repository
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    repository?: string;
    /**
     * Target branch
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    branch?: string;
    /**
     * Target environment
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    environment?: string;
    /**
     * Target environment type
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    environmentType?: string;
    /**
     * Start time
     * @type {Date}
     * @memberof PipelineExecutionStepState
     */
    startedAt?: Date;
    /**
     * Date the execution reached a final state
     * @type {Date}
     * @memberof PipelineExecutionStepState
     */
    finishedAt?: Date;
    /**
     * Information about step result
     * @type {{ [key: string]: object; }}
     * @memberof PipelineExecutionStepState
     */
    details?: { [key: string]: object; };
    /**
     * Action status
     * @type {string}
     * @memberof PipelineExecutionStepState
     */
    status?: PipelineExecutionStepStateStatusEnum;
    /**
     * 
     * @type {PipelineExecutionStepStateLinks}
     * @memberof PipelineExecutionStepState
     */
    links?: PipelineExecutionStepStateLinks;
}

export function PipelineExecutionStepStateFromJSON(json: any): PipelineExecutionStepState {
    return PipelineExecutionStepStateFromJSONTyped(json, false);
}

export function PipelineExecutionStepStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): PipelineExecutionStepState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'stepId': !exists(json, 'stepId') ? undefined : json['stepId'],
        'phaseId': !exists(json, 'phaseId') ? undefined : json['phaseId'],
        'action': !exists(json, 'action') ? undefined : json['action'],
        'repository': !exists(json, 'repository') ? undefined : json['repository'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
        'environmentType': !exists(json, 'environmentType') ? undefined : json['environmentType'],
        'startedAt': !exists(json, 'startedAt') ? undefined : (new Date(json['startedAt'])),
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
        'details': !exists(json, 'details') ? undefined : json['details'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'links': !exists(json, '_links') ? undefined : PipelineExecutionStepStateLinksFromJSON(json['_links']),
    };
}

export function PipelineExecutionStepStateToJSON(value?: PipelineExecutionStepState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'stepId': value.stepId,
        'phaseId': value.phaseId,
        'action': value.action,
        'repository': value.repository,
        'branch': value.branch,
        'environment': value.environment,
        'environmentType': value.environmentType,
        'startedAt': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
        'finishedAt': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        'details': value.details,
        'status': value.status,
        '_links': PipelineExecutionStepStateLinksToJSON(value.links),
    };
}

/**
* @export
* @enum {string}
*/
export enum PipelineExecutionStepStateStatusEnum {
    NOTSTARTED = 'NOT_STARTED',
    RUNNING = 'RUNNING',
    FINISHED = 'FINISHED',
    ERROR = 'ERROR',
    ROLLINGBACK = 'ROLLING_BACK',
    ROLLEDBACK = 'ROLLED_BACK',
    WAITING = 'WAITING',
    CANCELLED = 'CANCELLED',
    FAILED = 'FAILED'
}


