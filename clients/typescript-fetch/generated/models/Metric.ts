/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes a __Metric__
 * @export
 * @interface Metric
 */
export interface Metric {
    /**
     * KPI result identifier
     * @type {string}
     * @memberof Metric
     */
    id?: string;
    /**
     * Severity of the metric
     * @type {string}
     * @memberof Metric
     */
    severity?: MetricSeverityEnum;
    /**
     * Whether metric is considered passed
     * @type {boolean}
     * @memberof Metric
     */
    passed?: boolean;
    /**
     * Whether user override the failed metric
     * @type {boolean}
     * @memberof Metric
     */
    override?: boolean;
    /**
     * Expected value for the metric
     * @type {string}
     * @memberof Metric
     */
    actualValue?: string;
    /**
     * Expected value for the metric
     * @type {string}
     * @memberof Metric
     */
    expectedValue?: string;
    /**
     * Comparator used for the metric
     * @type {string}
     * @memberof Metric
     */
    comparator?: MetricComparatorEnum;
    /**
     * KPI identifier
     * @type {string}
     * @memberof Metric
     */
    kpi?: string;
}

export function MetricFromJSON(json: any): Metric {
    return MetricFromJSONTyped(json, false);
}

export function MetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): Metric {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'severity': !exists(json, 'severity') ? undefined : json['severity'],
        'passed': !exists(json, 'passed') ? undefined : json['passed'],
        'override': !exists(json, 'override') ? undefined : json['override'],
        'actualValue': !exists(json, 'actualValue') ? undefined : json['actualValue'],
        'expectedValue': !exists(json, 'expectedValue') ? undefined : json['expectedValue'],
        'comparator': !exists(json, 'comparator') ? undefined : json['comparator'],
        'kpi': !exists(json, 'kpi') ? undefined : json['kpi'],
    };
}

export function MetricToJSON(value?: Metric | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'severity': value.severity,
        'passed': value.passed,
        'override': value.override,
        'actualValue': value.actualValue,
        'expectedValue': value.expectedValue,
        'comparator': value.comparator,
        'kpi': value.kpi,
    };
}

/**
* @export
* @enum {string}
*/
export enum MetricSeverityEnum {
    Critical = 'critical',
    Important = 'important',
    Informational = 'informational'
}
/**
* @export
* @enum {string}
*/
export enum MetricComparatorEnum {
    GT = 'GT',
    GTE = 'GTE',
    LT = 'LT',
    LTE = 'LTE',
    EQ = 'EQ',
    NEQ = 'NEQ'
}


