/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Environment,
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
} from './';

/**
 * 
 * @export
 * @interface EnvironmentListEmbedded
 */
export interface EnvironmentListEmbedded {
    /**
     * 
     * @type {Array<Environment>}
     * @memberof EnvironmentListEmbedded
     */
    environments?: Array<Environment>;
}

export function EnvironmentListEmbeddedFromJSON(json: any): EnvironmentListEmbedded {
    return EnvironmentListEmbeddedFromJSONTyped(json, false);
}

export function EnvironmentListEmbeddedFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvironmentListEmbedded {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'environments': !exists(json, 'environments') ? undefined : ((json['environments'] as Array<any>).map(EnvironmentFromJSON)),
    };
}

export function EnvironmentListEmbeddedToJSON(value?: EnvironmentListEmbedded | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'environments': value.environments === undefined ? undefined : ((value.environments as Array<any>).map(EnvironmentToJSON)),
    };
}


