/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes a phase of a pipeline
 * @export
 * @interface PipelinePhase
 */
export interface PipelinePhase {
    /**
     * Name of the phase
     * @type {string}
     * @memberof PipelinePhase
     */
    name?: string;
    /**
     * Type of the phase
     * @type {string}
     * @memberof PipelinePhase
     */
    type: PipelinePhaseTypeEnum;
    /**
     * Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD
     * @type {string}
     * @memberof PipelinePhase
     */
    repositoryId?: string;
    /**
     * Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.
     * @type {string}
     * @memberof PipelinePhase
     */
    branch?: string;
    /**
     * Identifier of the target environment. Mandatory if type=DEPLOY
     * @type {string}
     * @memberof PipelinePhase
     */
    environmentId?: string;
}

export function PipelinePhaseFromJSON(json: any): PipelinePhase {
    return PipelinePhaseFromJSONTyped(json, false);
}

export function PipelinePhaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PipelinePhase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': json['type'],
        'repositoryId': !exists(json, 'repositoryId') ? undefined : json['repositoryId'],
        'branch': !exists(json, 'branch') ? undefined : json['branch'],
        'environmentId': !exists(json, 'environmentId') ? undefined : json['environmentId'],
    };
}

export function PipelinePhaseToJSON(value?: PipelinePhase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'repositoryId': value.repositoryId,
        'branch': value.branch,
        'environmentId': value.environmentId,
    };
}

/**
* @export
* @enum {string}
*/
export enum PipelinePhaseTypeEnum {
    VALIDATE = 'VALIDATE',
    BUILD = 'BUILD',
    DEPLOY = 'DEPLOY'
}


