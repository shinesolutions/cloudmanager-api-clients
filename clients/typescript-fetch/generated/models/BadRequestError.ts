/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InvalidParameter,
    InvalidParameterFromJSON,
    InvalidParameterFromJSONTyped,
    InvalidParameterToJSON,
    MissingParameter,
    MissingParameterFromJSON,
    MissingParameterFromJSONTyped,
    MissingParameterToJSON,
} from './';

/**
 * A Bad Request response error.
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * HTTP status code of the response.
     * @type {number}
     * @memberof BadRequestError
     */
    status?: number;
    /**
     * Error type identifier.
     * @type {string}
     * @memberof BadRequestError
     */
    type?: string;
    /**
     * A short summary of the error.
     * @type {string}
     * @memberof BadRequestError
     */
    title?: string;
    /**
     * Request\'s missing parameters.
     * @type {Array<MissingParameter>}
     * @memberof BadRequestError
     */
    missingParams?: Array<MissingParameter>;
    /**
     * Request\'s invalid parameters.
     * @type {Array<InvalidParameter>}
     * @memberof BadRequestError
     */
    invalidParams?: Array<InvalidParameter>;
}

export function BadRequestErrorFromJSON(json: any): BadRequestError {
    return BadRequestErrorFromJSONTyped(json, false);
}

export function BadRequestErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): BadRequestError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : json['status'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'missingParams': !exists(json, 'missingParams') ? undefined : ((json['missingParams'] as Array<any>).map(MissingParameterFromJSON)),
        'invalidParams': !exists(json, 'invalidParams') ? undefined : ((json['invalidParams'] as Array<any>).map(InvalidParameterFromJSON)),
    };
}

export function BadRequestErrorToJSON(value?: BadRequestError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'type': value.type,
        'title': value.title,
        'missingParams': value.missingParams === undefined ? undefined : ((value.missingParams as Array<any>).map(MissingParameterToJSON)),
        'invalidParams': value.invalidParams === undefined ? undefined : ((value.invalidParams as Array<any>).map(InvalidParameterToJSON)),
    };
}


