//
// PipelineExecution.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Wraps a pipeline execution */
public struct PipelineExecution: Codable { 


    public enum Status: String, Codable {
        case notStarted = "NOT_STARTED"
        case running = "RUNNING"
        case cancelling = "CANCELLING"
        case cancelled = "CANCELLED"
        case finished = "FINISHED"
        case error = "ERROR"
        case failed = "FAILED"
    }
    public enum Trigger: String, Codable {
        case onCommit = "ON_COMMIT"
        case manual = "MANUAL"
        case schedule = "SCHEDULE"
        case pushUpgrades = "PUSH_UPGRADES"
    }
    /** Pipeline execution identifier */
    public var id: String?
    /** Identifier of the program. Unique within the space. */
    public var programId: String?
    /** Identifier of the pipeline. Unique within the space. */
    public var pipelineId: String?
    /** Version of the artifacts generated during this execution */
    public var artifactsVersion: String?
    /** AdobeID who started the pipeline. Empty for auto triggered builds */
    public var user: String?
    /** Status of the execution */
    public var status: Status?
    /** How the execution was triggered. */
    public var trigger: Trigger?
    /** Start time */
    public var createdAt: Date?
    /** Date of last status change */
    public var updatedAt: Date?
    /** Date the execution reached a final state */
    public var finishedAt: Date?
    public var embedded: PipelineExecutionEmbedded?
    public var links: PipelineExecutionLinks?

    public init(id: String?, programId: String?, pipelineId: String?, artifactsVersion: String?, user: String?, status: Status?, trigger: Trigger?, createdAt: Date?, updatedAt: Date?, finishedAt: Date?, embedded: PipelineExecutionEmbedded?, links: PipelineExecutionLinks?) {
        self.id = id
        self.programId = programId
        self.pipelineId = pipelineId
        self.artifactsVersion = artifactsVersion
        self.user = user
        self.status = status
        self.trigger = trigger
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.finishedAt = finishedAt
        self.embedded = embedded
        self.links = links
    }

    public enum CodingKeys: String, CodingKey { 
        case id
        case programId
        case pipelineId
        case artifactsVersion
        case user
        case status
        case trigger
        case createdAt
        case updatedAt
        case finishedAt
        case embedded = "_embedded"
        case links = "_links"
    }

}
