//
// EnvironmentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class EnvironmentsAPI {
    /**
     DeleteEnvironment
     
     - parameter programId: (path) Identifier of the application 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEnvironment(programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: Environment?,_ error: Error?) -> Void)) {
        deleteEnvironmentWithRequestBuilder(programId: programId, environmentId: environmentId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     DeleteEnvironment
     - DELETE /api/program/{programId}/environment/{environmentId}
     - Delete environment
     - parameter programId: (path) Identifier of the application 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<Environment> 
     */
    open class func deleteEnvironmentWithRequestBuilder(programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Environment> {
        var path = "/api/program/{programId}/environment/{environmentId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let environmentIdPreEscape = "\(APIHelper.mapValueToPathItem(environmentId))"
        let environmentIdPostEscape = environmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{environmentId}", with: environmentIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Environment>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Download Logs
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter service: (query) Name of service 
     - parameter name: (query) Name of log 
     - parameter date: (query) date for which log is required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadLogs(programId: String, environmentId: String, service: String, name: String, date: String, xGwImsOrgId: String, authorization: String, xApiKey: String, accept: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadLogsWithRequestBuilder(programId: programId, environmentId: environmentId, service: service, name: name, date: date, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, accept: accept).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Download Logs
     - GET /api/program/{programId}/environment/{environmentId}/logs/download
     - Download environment logs
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter service: (query) Name of service 
     - parameter name: (query) Name of log 
     - parameter date: (query) date for which log is required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func downloadLogsWithRequestBuilder(programId: String, environmentId: String, service: String, name: String, date: String, xGwImsOrgId: String, authorization: String, xApiKey: String, accept: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/environment/{environmentId}/logs/download"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let environmentIdPreEscape = "\(APIHelper.mapValueToPathItem(environmentId))"
        let environmentIdPostEscape = environmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{environmentId}", with: environmentIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "service": service.encodeToJSON(), 
            "name": name.encodeToJSON(), 
            "date": date.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
            "Accept": accept?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Environment
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEnvironment(programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: Environment?,_ error: Error?) -> Void)) {
        getEnvironmentWithRequestBuilder(programId: programId, environmentId: environmentId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Environment
     - GET /api/program/{programId}/environment/{environmentId}
     - Returns an environment by its id
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<Environment> 
     */
    open class func getEnvironmentWithRequestBuilder(programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Environment> {
        var path = "/api/program/{programId}/environment/{environmentId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let environmentIdPreEscape = "\(APIHelper.mapValueToPathItem(environmentId))"
        let environmentIdPostEscape = environmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{environmentId}", with: environmentIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Environment>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Environment Logs
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter days: (query) number of days for which logs are required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter service: (query) Names of services (optional)
     - parameter name: (query) Names of log (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEnvironmentLogs(programId: String, environmentId: String, days: Int, xGwImsOrgId: String, authorization: String, xApiKey: String, service: [String]? = nil, name: [String]? = nil, completion: @escaping ((_ data: EnvironmentLogs?,_ error: Error?) -> Void)) {
        getEnvironmentLogsWithRequestBuilder(programId: programId, environmentId: environmentId, days: days, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, service: service, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Environment Logs
     - GET /api/program/{programId}/environment/{environmentId}/logs
     - List all logs available in environment
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter days: (query) number of days for which logs are required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter service: (query) Names of services (optional)
     - parameter name: (query) Names of log (optional)
     - returns: RequestBuilder<EnvironmentLogs> 
     */
    open class func getEnvironmentLogsWithRequestBuilder(programId: String, environmentId: String, days: Int, xGwImsOrgId: String, authorization: String, xApiKey: String, service: [String]? = nil, name: [String]? = nil) -> RequestBuilder<EnvironmentLogs> {
        var path = "/api/program/{programId}/environment/{environmentId}/logs"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let environmentIdPreEscape = "\(APIHelper.mapValueToPathItem(environmentId))"
        let environmentIdPostEscape = environmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{environmentId}", with: environmentIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "service": service?.encodeToJSON(), 
            "name": name?.encodeToJSON(), 
            "days": days.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<EnvironmentLogs>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getEnvironments: String {
        case dev = "dev"
        case stage = "stage"
        case prod = "prod"
    }

    /**
     List Environments
     
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter type: (query) Type of the environment (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEnvironments(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, type: ModelType_getEnvironments? = nil, completion: @escaping ((_ data: EnvironmentList?,_ error: Error?) -> Void)) {
        getEnvironmentsWithRequestBuilder(programId: programId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, type: type).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List Environments
     - GET /api/program/{programId}/environments
     - Lists all environments in an program
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter type: (query) Type of the environment (optional)
     - returns: RequestBuilder<EnvironmentList> 
     */
    open class func getEnvironmentsWithRequestBuilder(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, type: ModelType_getEnvironments? = nil) -> RequestBuilder<EnvironmentList> {
        var path = "/api/program/{programId}/environments"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<EnvironmentList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
