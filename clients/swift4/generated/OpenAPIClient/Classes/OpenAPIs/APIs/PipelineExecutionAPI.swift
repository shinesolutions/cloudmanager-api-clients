//
// PipelineExecutionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PipelineExecutionAPI {
    /**
     Advance
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func advancePipelineExecution(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Any, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        advancePipelineExecutionWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Advance
     - PUT /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance
     - Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 
     - returns: RequestBuilder<Void> 
     */
    open class func advancePipelineExecutionWithRequestBuilder(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Any) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let phaseIdPreEscape = "\(APIHelper.mapValueToPathItem(phaseId))"
        let phaseIdPostEscape = phaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phaseId}", with: phaseIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stepId}", with: stepIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Cancel
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelPipelineExecutionStep(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Any, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelPipelineExecutionStepWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Cancel
     - PUT /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel
     - Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 
     - returns: RequestBuilder<Void> 
     */
    open class func cancelPipelineExecutionStepWithRequestBuilder(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Any) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let phaseIdPreEscape = "\(APIHelper.mapValueToPathItem(phaseId))"
        let phaseIdPostEscape = phaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phaseId}", with: phaseIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stepId}", with: stepIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get current pipeline execution
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentExecution(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: PipelineExecution?,_ error: Error?) -> Void)) {
        getCurrentExecutionWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get current pipeline execution
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution
     - Returns current pipeline execution if any.
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<PipelineExecution> 
     */
    open class func getCurrentExecutionWithRequestBuilder(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineExecution> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PipelineExecution>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get pipeline execution
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExecution(programId: String, pipelineId: String, executionId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: PipelineExecution?,_ error: Error?) -> Void)) {
        getExecutionWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get pipeline execution
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}
     - Returns a pipeline execution by id
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<PipelineExecution> 
     */
    open class func getExecutionWithRequestBuilder(programId: String, pipelineId: String, executionId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineExecution> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PipelineExecution>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     List Executions
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter start: (query) Pagination start parameter (optional)
     - parameter limit: (query) Pagination limit parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExecutions(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, start: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: PipelineExecutionListRepresentation?,_ error: Error?) -> Void)) {
        getExecutionsWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, start: start, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List Executions
     - GET /api/program/{programId}/pipeline/{pipelineId}/executions
     - Returns the history of pipeline executions in a newest to oldest order
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter start: (query) Pagination start parameter (optional)
     - parameter limit: (query) Pagination limit parameter (optional)
     - returns: RequestBuilder<PipelineExecutionListRepresentation> 
     */
    open class func getExecutionsWithRequestBuilder(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, start: String? = nil, limit: Int? = nil) -> RequestBuilder<PipelineExecutionListRepresentation> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/executions"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PipelineExecutionListRepresentation>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get logs
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter file: (query) Identifier of the log file (optional)
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStepLogs(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, file: String? = nil, accept: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getStepLogsWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, file: file, accept: accept).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Get logs
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs
     - Get the logs associated with a step.
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter file: (query) Identifier of the log file (optional)
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getStepLogsWithRequestBuilder(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, file: String? = nil, accept: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let phaseIdPreEscape = "\(APIHelper.mapValueToPathItem(phaseId))"
        let phaseIdPostEscape = phaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phaseId}", with: phaseIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stepId}", with: stepIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "file": file?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Accept": accept?.encodeToJSON(),
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Start the pipeline
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startPipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        startPipelineWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Start the pipeline
     - PUT /api/program/{programId}/pipeline/{pipelineId}/execution
     - Starts the Pipeline. This works only if the pipeline is not already started.
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - returns: RequestBuilder<Void> 
     */
    open class func startPipelineWithRequestBuilder(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get step metrics
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stepMetric(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: PipelineStepMetrics?,_ error: Error?) -> Void)) {
        stepMetricWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get step metrics
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<PipelineStepMetrics> 
     */
    open class func stepMetricWithRequestBuilder(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineStepMetrics> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let phaseIdPreEscape = "\(APIHelper.mapValueToPathItem(phaseId))"
        let phaseIdPostEscape = phaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phaseId}", with: phaseIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stepId}", with: stepIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PipelineStepMetrics>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get step state
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stepState(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: PipelineExecutionStepState?,_ error: Error?) -> Void)) {
        stepStateWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get step state
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<PipelineExecutionStepState> 
     */
    open class func stepStateWithRequestBuilder(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineExecutionStepState> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let phaseIdPreEscape = "\(APIHelper.mapValueToPathItem(phaseId))"
        let phaseIdPostEscape = phaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phaseId}", with: phaseIdPostEscape, options: .literal, range: nil)
        let stepIdPreEscape = "\(APIHelper.mapValueToPathItem(stepId))"
        let stepIdPostEscape = stepIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stepId}", with: stepIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PipelineExecutionStepState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
