//
// RepositoriesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class RepositoriesAPI {
    /**
     Lists Repositories
     
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRepositories(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: RepositoryList?,_ error: Error?) -> Void)) {
        getRepositoriesWithRequestBuilder(programId: programId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Lists Repositories
     - GET /api/program/{programId}/repositories
     - Lists all Repositories in an program
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<RepositoryList> 
     */
    open class func getRepositoriesWithRequestBuilder(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<RepositoryList> {
        var path = "/api/program/{programId}/repositories"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RepositoryList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Repository
     
     - parameter programId: (path) Identifier of the program 
     - parameter repositoryId: (path) Identifier of the repository 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRepository(programId: String, repositoryId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        getRepositoryWithRequestBuilder(programId: programId, repositoryId: repositoryId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Repository
     - GET /api/program/{programId}/repository/{repositoryId}
     - Returns an repository by its id
     - parameter programId: (path) Identifier of the program 
     - parameter repositoryId: (path) Identifier of the repository 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<Repository> 
     */
    open class func getRepositoryWithRequestBuilder(programId: String, repositoryId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Repository> {
        var path = "/api/program/{programId}/repository/{repositoryId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let repositoryIdPreEscape = "\(APIHelper.mapValueToPathItem(repositoryId))"
        let repositoryIdPostEscape = repositoryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repositoryId}", with: repositoryIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Repository>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
