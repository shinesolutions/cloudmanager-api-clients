//
// PipelinesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PipelinesAPI {
    /**
     Delete a Pipeline
     
     - parameter programId: (path) Identifier of the program 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deletePipelineWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Pipeline
     - DELETE /api/program/{programId}/pipeline/{pipelineId}
     - Delete a pipeline. All the data is wiped.
     - parameter programId: (path) Identifier of the program 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<Void> 
     */
    open class func deletePipelineWithRequestBuilder(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Pipeline
     
     - parameter programId: (path) Identifier of the program 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: Pipeline?,_ error: Error?) -> Void)) {
        getPipelineWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get Pipeline
     - GET /api/program/{programId}/pipeline/{pipelineId}
     - Returns a pipeline by its id
     - parameter programId: (path) Identifier of the program 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<Pipeline> 
     */
    open class func getPipelineWithRequestBuilder(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Pipeline> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Pipeline>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     List Pipelines
     
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPipelines(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: @escaping ((_ data: PipelineList?,_ error: Error?) -> Void)) {
        getPipelinesWithRequestBuilder(programId: programId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List Pipelines
     - GET /api/program/{programId}/pipelines
     - Returns all the pipelines that the requesting user has access to in an program
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - returns: RequestBuilder<PipelineList> 
     */
    open class func getPipelinesWithRequestBuilder(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineList> {
        var path = "/api/program/{programId}/pipelines"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PipelineList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Patches Pipeline
     
     - parameter programId: (path) Identifier of the program 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) The updated Pipeline 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchPipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Pipeline, completion: @escaping ((_ data: Pipeline?,_ error: Error?) -> Void)) {
        patchPipelineWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Patches Pipeline
     - PATCH /api/program/{programId}/pipeline/{pipelineId}
     - Patches a pipeline within an program.
     - parameter programId: (path) Identifier of the program 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) The updated Pipeline 
     - returns: RequestBuilder<Pipeline> 
     */
    open class func patchPipelineWithRequestBuilder(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Pipeline) -> RequestBuilder<Pipeline> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}"
        let programIdPreEscape = "\(APIHelper.mapValueToPathItem(programId))"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let pipelineIdPreEscape = "\(APIHelper.mapValueToPathItem(pipelineId))"
        let pipelineIdPostEscape = pipelineIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pipelineId}", with: pipelineIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "x-gw-ims-org-id": xGwImsOrgId.encodeToJSON(),
            "Authorization": authorization.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Pipeline>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
