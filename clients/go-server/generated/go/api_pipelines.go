/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * API version: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A PipelinesApiController binds http requests to an api service and writes the service results to the http response
type PipelinesApiController struct {
	service PipelinesApiServicer
}

// NewPipelinesApiController creates a default api controller
func NewPipelinesApiController(s PipelinesApiServicer) Router {
	return &PipelinesApiController{ service: s }
}

// Routes returns all of the api route for the PipelinesApiController
func (c *PipelinesApiController) Routes() Routes {
	return Routes{ 
		{
			"DeletePipeline",
			strings.ToUpper("Delete"),
			"/api/program/{programId}/pipeline/{pipelineId}",
			c.DeletePipeline,
		},
		{
			"GetPipeline",
			strings.ToUpper("Get"),
			"/api/program/{programId}/pipeline/{pipelineId}",
			c.GetPipeline,
		},
		{
			"GetPipelines",
			strings.ToUpper("Get"),
			"/api/program/{programId}/pipelines",
			c.GetPipelines,
		},
		{
			"PatchPipeline",
			strings.ToUpper("Patch"),
			"/api/program/{programId}/pipeline/{pipelineId}",
			c.PatchPipeline,
		},
	}
}

// DeletePipeline - Delete a Pipeline
func (c *PipelinesApiController) DeletePipeline(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	programId := params["programId"]
	pipelineId := params["pipelineId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	result, err := c.service.DeletePipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetPipeline - Get Pipeline
func (c *PipelinesApiController) GetPipeline(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	programId := params["programId"]
	pipelineId := params["pipelineId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	result, err := c.service.GetPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetPipelines - List Pipelines
func (c *PipelinesApiController) GetPipelines(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	programId := params["programId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	result, err := c.service.GetPipelines(programId, xGwImsOrgId, authorization, xApiKey)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// PatchPipeline - Patches Pipeline
func (c *PipelinesApiController) PatchPipeline(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	programId := params["programId"]
	pipelineId := params["pipelineId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	contentType := r.Header.Get("contentType")
	body := &Pipeline{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.PatchPipeline(programId, pipelineId, xGwImsOrgId, authorization, xApiKey, contentType, *body)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
