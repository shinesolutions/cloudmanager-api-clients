/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * API version: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A EnvironmentsApiController binds http requests to an api service and writes the service results to the http response
type EnvironmentsApiController struct {
	service EnvironmentsApiServicer
}

// NewEnvironmentsApiController creates a default api controller
func NewEnvironmentsApiController(s EnvironmentsApiServicer) Router {
	return &EnvironmentsApiController{ service: s }
}

// Routes returns all of the api route for the EnvironmentsApiController
func (c *EnvironmentsApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteEnvironment",
			strings.ToUpper("Delete"),
			"/api/program/{programId}/environment/{environmentId}",
			c.DeleteEnvironment,
		},
		{
			"DownloadLogs",
			strings.ToUpper("Get"),
			"/api/program/{programId}/environment/{environmentId}/logs/download",
			c.DownloadLogs,
		},
		{
			"GetEnvironment",
			strings.ToUpper("Get"),
			"/api/program/{programId}/environment/{environmentId}",
			c.GetEnvironment,
		},
		{
			"GetEnvironmentLogs",
			strings.ToUpper("Get"),
			"/api/program/{programId}/environment/{environmentId}/logs",
			c.GetEnvironmentLogs,
		},
		{
			"GetEnvironments",
			strings.ToUpper("Get"),
			"/api/program/{programId}/environments",
			c.GetEnvironments,
		},
	}
}

// DeleteEnvironment - DeleteEnvironment
func (c *EnvironmentsApiController) DeleteEnvironment(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	programId := params["programId"]
	environmentId := params["environmentId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	result, err := c.service.DeleteEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DownloadLogs - Download Logs
func (c *EnvironmentsApiController) DownloadLogs(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	programId := params["programId"]
	environmentId := params["environmentId"]
	service := query.Get("service")
	name := query.Get("name")
	date := query.Get("date")
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	accept := r.Header.Get("accept")
	result, err := c.service.DownloadLogs(programId, environmentId, service, name, date, xGwImsOrgId, authorization, xApiKey, accept)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetEnvironment - Get Environment
func (c *EnvironmentsApiController) GetEnvironment(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	programId := params["programId"]
	environmentId := params["environmentId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	result, err := c.service.GetEnvironment(programId, environmentId, xGwImsOrgId, authorization, xApiKey)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetEnvironmentLogs - Get Environment Logs
func (c *EnvironmentsApiController) GetEnvironmentLogs(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	programId := params["programId"]
	environmentId := params["environmentId"]
	days := query.Get("days")
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	service := strings.Split(query.Get("service"), ",")
	name := strings.Split(query.Get("name"), ",")
	result, err := c.service.GetEnvironmentLogs(programId, environmentId, days, xGwImsOrgId, authorization, xApiKey, service, name)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetEnvironments - List Environments
func (c *EnvironmentsApiController) GetEnvironments(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	programId := params["programId"]
	xGwImsOrgId := r.Header.Get("xGwImsOrgId")
	authorization := r.Header.Get("authorization")
	xApiKey := r.Header.Get("xApiKey")
	type_ := query.Get("type_")
	result, err := c.service.GetEnvironments(programId, xGwImsOrgId, authorization, xApiKey, type_)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
