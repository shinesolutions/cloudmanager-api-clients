/*
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * API version: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
)


// BranchesApiRouter defines the required methods for binding the api requests to a responses for the BranchesApi
// The BranchesApiRouter implementation should parse necessary information from the http request, 
// pass the data to a BranchesApiServicer to perform the required actions, then write the service results to the http response.
type BranchesApiRouter interface { 
	GetBranches(http.ResponseWriter, *http.Request)
}
// EnvironmentsApiRouter defines the required methods for binding the api requests to a responses for the EnvironmentsApi
// The EnvironmentsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a EnvironmentsApiServicer to perform the required actions, then write the service results to the http response.
type EnvironmentsApiRouter interface { 
	DeleteEnvironment(http.ResponseWriter, *http.Request)
	DownloadLogs(http.ResponseWriter, *http.Request)
	GetEnvironment(http.ResponseWriter, *http.Request)
	GetEnvironmentLogs(http.ResponseWriter, *http.Request)
	GetEnvironments(http.ResponseWriter, *http.Request)
}
// PipelineExecutionApiRouter defines the required methods for binding the api requests to a responses for the PipelineExecutionApi
// The PipelineExecutionApiRouter implementation should parse necessary information from the http request, 
// pass the data to a PipelineExecutionApiServicer to perform the required actions, then write the service results to the http response.
type PipelineExecutionApiRouter interface { 
	AdvancePipelineExecution(http.ResponseWriter, *http.Request)
	CancelPipelineExecutionStep(http.ResponseWriter, *http.Request)
	GetCurrentExecution(http.ResponseWriter, *http.Request)
	GetExecution(http.ResponseWriter, *http.Request)
	GetExecutions(http.ResponseWriter, *http.Request)
	GetStepLogs(http.ResponseWriter, *http.Request)
	StartPipeline(http.ResponseWriter, *http.Request)
	StepMetric(http.ResponseWriter, *http.Request)
	StepState(http.ResponseWriter, *http.Request)
}
// PipelinesApiRouter defines the required methods for binding the api requests to a responses for the PipelinesApi
// The PipelinesApiRouter implementation should parse necessary information from the http request, 
// pass the data to a PipelinesApiServicer to perform the required actions, then write the service results to the http response.
type PipelinesApiRouter interface { 
	DeletePipeline(http.ResponseWriter, *http.Request)
	GetPipeline(http.ResponseWriter, *http.Request)
	GetPipelines(http.ResponseWriter, *http.Request)
	PatchPipeline(http.ResponseWriter, *http.Request)
}
// ProgramsApiRouter defines the required methods for binding the api requests to a responses for the ProgramsApi
// The ProgramsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a ProgramsApiServicer to perform the required actions, then write the service results to the http response.
type ProgramsApiRouter interface { 
	DeleteProgram(http.ResponseWriter, *http.Request)
	GetProgram(http.ResponseWriter, *http.Request)
	GetPrograms(http.ResponseWriter, *http.Request)
}
// RepositoriesApiRouter defines the required methods for binding the api requests to a responses for the RepositoriesApi
// The RepositoriesApiRouter implementation should parse necessary information from the http request, 
// pass the data to a RepositoriesApiServicer to perform the required actions, then write the service results to the http response.
type RepositoriesApiRouter interface { 
	GetRepositories(http.ResponseWriter, *http.Request)
	GetRepository(http.ResponseWriter, *http.Request)
}
// VariablesApiRouter defines the required methods for binding the api requests to a responses for the VariablesApi
// The VariablesApiRouter implementation should parse necessary information from the http request, 
// pass the data to a VariablesApiServicer to perform the required actions, then write the service results to the http response.
type VariablesApiRouter interface { 
	GetEnvironmentVariables(http.ResponseWriter, *http.Request)
	PatchEnvironmentVariables(http.ResponseWriter, *http.Request)
}


// BranchesApiServicer defines the api actions for the BranchesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type BranchesApiServicer interface { 
	GetBranches(string, string, string, string, string) (interface{}, error)
}


// EnvironmentsApiServicer defines the api actions for the EnvironmentsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type EnvironmentsApiServicer interface { 
	DeleteEnvironment(string, string, string, string, string) (interface{}, error)
	DownloadLogs(string, string, string, string, string, string, string, string, string) (interface{}, error)
	GetEnvironment(string, string, string, string, string) (interface{}, error)
	GetEnvironmentLogs(string, string, int32, string, string, string, []string, []string) (interface{}, error)
	GetEnvironments(string, string, string, string, string) (interface{}, error)
}


// PipelineExecutionApiServicer defines the api actions for the PipelineExecutionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type PipelineExecutionApiServicer interface { 
	AdvancePipelineExecution(string, string, string, string, string, string, string, string, string, map[string]interface{}) (interface{}, error)
	CancelPipelineExecutionStep(string, string, string, string, string, string, string, string, string, map[string]interface{}) (interface{}, error)
	GetCurrentExecution(string, string, string, string, string) (interface{}, error)
	GetExecution(string, string, string, string, string, string) (interface{}, error)
	GetExecutions(string, string, string, string, string, string, int32) (interface{}, error)
	GetStepLogs(string, string, string, string, string, string, string, string, string, string) (interface{}, error)
	StartPipeline(string, string, string, string, string, string) (interface{}, error)
	StepMetric(string, string, string, string, string, string, string, string) (interface{}, error)
	StepState(string, string, string, string, string, string, string, string) (interface{}, error)
}


// PipelinesApiServicer defines the api actions for the PipelinesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type PipelinesApiServicer interface { 
	DeletePipeline(string, string, string, string, string) (interface{}, error)
	GetPipeline(string, string, string, string, string) (interface{}, error)
	GetPipelines(string, string, string, string) (interface{}, error)
	PatchPipeline(string, string, string, string, string, string, Pipeline) (interface{}, error)
}


// ProgramsApiServicer defines the api actions for the ProgramsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type ProgramsApiServicer interface { 
	DeleteProgram(string, string, string, string) (interface{}, error)
	GetProgram(string, string, string, string) (interface{}, error)
	GetPrograms(string, string, string) (interface{}, error)
}


// RepositoriesApiServicer defines the api actions for the RepositoriesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type RepositoriesApiServicer interface { 
	GetRepositories(string, string, string, string) (interface{}, error)
	GetRepository(string, string, string, string, string) (interface{}, error)
}


// VariablesApiServicer defines the api actions for the VariablesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type VariablesApiServicer interface { 
	GetEnvironmentVariables(string, string, string, string, string) (interface{}, error)
	PatchEnvironmentVariables(string, string, string, string, string, string, []Variable) (interface{}, error)
}
