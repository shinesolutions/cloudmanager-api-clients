{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Pipelines exposing (deletePipeline, getPipeline, getPipelines, patchPipeline)

import Data.PipelineList as PipelineList exposing (PipelineList)
import Data.Pipeline as Pipeline exposing (Pipeline)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://cloudmanager.adobe.io"


{-| Delete a pipeline. All the data is wiped.
-}
deletePipeline :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error () -> msg



    , programId : String    , pipelineId : String

    }
    -> Cmd msg
deletePipeline headers params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns a pipeline by its id
-}
getPipeline :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error Pipeline -> msg



    , programId : String    , pipelineId : String

    }
    -> Cmd msg
getPipeline headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Pipeline.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns all the pipelines that the requesting user has access to in an program
-}
getPipelines :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error PipelineList -> msg



    , programId : String

    }
    -> Cmd msg
getPipelines headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipelines"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend PipelineList.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Patches a pipeline within an program.
-}
patchPipeline :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String

    , contentType : String
    } -> 
    { onSend : Result Http.Error Pipeline -> msg


    , body : Pipeline
    , programId : String    , pipelineId : String

    }
    -> Cmd msg
patchPipeline headers params =
    Http.request
        { method = "PATCH"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey, (Just << Http.header "Content-Type" << identity) headers.contentType]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId]
            (List.filterMap identity [])
        , body = Http.jsonBody <| Pipeline.encode params.body
        , expect = Http.expectJson params.onSend Pipeline.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
