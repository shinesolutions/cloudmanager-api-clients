{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Environments exposing (deleteEnvironment, downloadLogs, getEnvironment, getEnvironmentLogs, getEnvironments, Type(..))

import Data.EnvironmentLogs as EnvironmentLogs exposing (EnvironmentLogs)
import Data.Environment as Environment exposing (Environment)
import Data.EnvironmentList as EnvironmentList exposing (EnvironmentList)
import Data.BadRequestError as BadRequestError exposing (BadRequestError)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url


type Type
    = Dev
    | Stage
    | Prod

stringifyType : Type -> String
stringifyType value =
    case value of
        Dev ->
            "dev"

        Stage ->
            "stage"

        Prod ->
            "prod"





basePath : String
basePath =
    "https://cloudmanager.adobe.io"


{-| Delete environment
-}
deleteEnvironment :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error Environment -> msg



    , programId : String    , environmentId : String

    }
    -> Cmd msg
deleteEnvironment headers params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "environment", identity params.environmentId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Environment.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Download environment logs
-}
downloadLogs :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String

    , accept : Maybe (String)
    } -> 
    { onSend : Result Http.Error () -> msg



    , programId : String    , environmentId : String
    , service : String    , name : String    , date : String
    }
    -> Cmd msg
downloadLogs headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey, Maybe.map (Http.header "Accept" << identity) headers.accept]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "environment", identity params.environmentId, "logs", "download"]
            (List.filterMap identity [(Just << Url.string "service" << identity) params.service, (Just << Url.string "name" << identity) params.name, (Just << Url.string "date" << identity) params.date])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns an environment by its id
-}
getEnvironment :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error Environment -> msg



    , programId : String    , environmentId : String

    }
    -> Cmd msg
getEnvironment headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "environment", identity params.environmentId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Environment.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| List all logs available in environment
-}
getEnvironmentLogs :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error EnvironmentLogs -> msg



    , programId : String    , environmentId : String
    , service : Maybe (List String)    , name : Maybe (List String)    , days : Int
    }
    -> Cmd msg
getEnvironmentLogs headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "environment", identity params.environmentId, "logs"]
            (List.filterMap identity [Maybe.map (Url.string "service" << String.join "," << List.map identity) params.service, Maybe.map (Url.string "name" << String.join "," << List.map identity) params.name, (Just << Url.string "days" << String.fromInt) params.days])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend EnvironmentLogs.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Lists all environments in an program
-}
getEnvironments :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error EnvironmentList -> msg



    , programId : String
    , type_ : Maybe (Type)
    }
    -> Cmd msg
getEnvironments headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "environments"]
            (List.filterMap identity [Maybe.map (Url.string "type" << stringifyType) params.type_])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend EnvironmentList.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
