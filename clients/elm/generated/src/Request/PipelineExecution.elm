{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.PipelineExecution exposing (advancePipelineExecution, cancelPipelineExecutionStep, getCurrentExecution, getExecution, getExecutions, getStepLogs, startPipeline, stepMetric, stepState)

import Data.PipelineExecution as PipelineExecution exposing (PipelineExecution)
import Data.PipelineStepMetrics as PipelineStepMetrics exposing (PipelineStepMetrics)
import Data.PipelineExecutionListRepresentation as PipelineExecutionListRepresentation exposing (PipelineExecutionListRepresentation)
import Data.PipelineExecutionStepState as PipelineExecutionStepState exposing (PipelineExecutionStepState)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://cloudmanager.adobe.io"


{-| Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
-}
advancePipelineExecution :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String

    , contentType : String
    } -> 
    { onSend : Result Http.Error () -> msg


    , body : Object
    , programId : String    , pipelineId : String    , executionId : String    , phaseId : String    , stepId : String

    }
    -> Cmd msg
advancePipelineExecution headers params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey, (Just << Http.header "Content-Type" << identity) headers.contentType]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution", identity params.executionId, "phase", identity params.phaseId, "step", identity params.stepId, "advance"]
            (List.filterMap identity [])
        , body = Http.jsonBody <| Encode.object params.body
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
-}
cancelPipelineExecutionStep :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String

    , contentType : String
    } -> 
    { onSend : Result Http.Error () -> msg


    , body : Object
    , programId : String    , pipelineId : String    , executionId : String    , phaseId : String    , stepId : String

    }
    -> Cmd msg
cancelPipelineExecutionStep headers params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey, (Just << Http.header "Content-Type" << identity) headers.contentType]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution", identity params.executionId, "phase", identity params.phaseId, "step", identity params.stepId, "cancel"]
            (List.filterMap identity [])
        , body = Http.jsonBody <| Encode.object params.body
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns current pipeline execution if any.
-}
getCurrentExecution :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error PipelineExecution -> msg



    , programId : String    , pipelineId : String

    }
    -> Cmd msg
getCurrentExecution headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend PipelineExecution.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns a pipeline execution by id
-}
getExecution :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error PipelineExecution -> msg



    , programId : String    , pipelineId : String    , executionId : String

    }
    -> Cmd msg
getExecution headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution", identity params.executionId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend PipelineExecution.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns the history of pipeline executions in a newest to oldest order
-}
getExecutions :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error PipelineExecutionListRepresentation -> msg



    , programId : String    , pipelineId : String
    , start : Maybe (String)    , limit : Maybe (Int)
    }
    -> Cmd msg
getExecutions headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "executions"]
            (List.filterMap identity [Maybe.map (Url.string "start" << identity) params.start, Maybe.map (Url.string "limit" << String.fromInt) params.limit])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend PipelineExecutionListRepresentation.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Get the logs associated with a step.
-}
getStepLogs :
    { accept : Maybe (String)

    , xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error () -> msg



    , programId : String    , pipelineId : String    , executionId : String    , phaseId : String    , stepId : String
    , file : Maybe (String)
    }
    -> Cmd msg
getStepLogs headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [Maybe.map (Http.header "Accept" << identity) headers.accept, (Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution", identity params.executionId, "phase", identity params.phaseId, "step", identity params.stepId, "logs"]
            (List.filterMap identity [Maybe.map (Url.string "file" << identity) params.file])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Starts the Pipeline. This works only if the pipeline is not already started.
-}
startPipeline :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String

    , contentType : String
    } -> 
    { onSend : Result Http.Error () -> msg



    , programId : String    , pipelineId : String

    }
    -> Cmd msg
startPipeline headers params =
    Http.request
        { method = "PUT"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey, (Just << Http.header "Content-Type" << identity) headers.contentType]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectWhatever params.onSend
        , timeout = Just 30000
        , tracker = Nothing
        }


stepMetric :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error PipelineStepMetrics -> msg



    , programId : String    , pipelineId : String    , executionId : String    , phaseId : String    , stepId : String

    }
    -> Cmd msg
stepMetric headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution", identity params.executionId, "phase", identity params.phaseId, "step", identity params.stepId, "metrics"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend PipelineStepMetrics.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


stepState :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error PipelineExecutionStepState -> msg



    , programId : String    , pipelineId : String    , executionId : String    , phaseId : String    , stepId : String

    }
    -> Cmd msg
stepState headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "pipeline", identity params.pipelineId, "execution", identity params.executionId, "phase", identity params.phaseId, "step", identity params.stepId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend PipelineExecutionStepState.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
