{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Repositories exposing (getRepositories, getRepository)

import Data.Repository as Repository exposing (Repository)
import Data.RepositoryList as RepositoryList exposing (RepositoryList)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://cloudmanager.adobe.io"


{-| Lists all Repositories in an program
-}
getRepositories :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error RepositoryList -> msg



    , programId : String

    }
    -> Cmd msg
getRepositories headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "repositories"]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend RepositoryList.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| Returns an repository by its id
-}
getRepository :
    { xGwImsOrgId : String

    , authorization : String

    , xApiKey : String
    } -> 
    { onSend : Result Http.Error Repository -> msg



    , programId : String    , repositoryId : String

    }
    -> Cmd msg
getRepository headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [(Just << Http.header "x-gw-ims-org-id" << identity) headers.xGwImsOrgId, (Just << Http.header "Authorization" << identity) headers.authorization, (Just << Http.header "x-api-key" << identity) headers.xApiKey]
        , url = Url.crossOrigin basePath
            ["api", "program", identity params.programId, "repository", identity params.repositoryId]
            (List.filterMap identity [])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Repository.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
