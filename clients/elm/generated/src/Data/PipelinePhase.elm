{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.PipelinePhase exposing (PipelinePhase, Type(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Describes a phase of a pipeline
-}
type alias PipelinePhase =
    { name : Maybe (String)
    , type_ : Type
    , repositoryId : Maybe (String)
    , branch : Maybe (String)
    , environmentId : Maybe (String)
    }


type Type
    = VALIDATE
    | BUILD
    | DEPLOY



decoder : Decoder PipelinePhase
decoder =
    Decode.succeed PipelinePhase
        |> optional "name" (Decode.nullable Decode.string) Nothing
        |> required "type" typeDecoder
        |> optional "repositoryId" (Decode.nullable Decode.string) Nothing
        |> optional "branch" (Decode.nullable Decode.string) Nothing
        |> optional "environmentId" (Decode.nullable Decode.string) Nothing



encode : PipelinePhase -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> PipelinePhase -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : PipelinePhase -> List (String, Encode.Value)
encodePairs model =
    [ ( "name", Maybe.withDefault Encode.null (Maybe.map Encode.string model.name) )
    , ( "type", encodeType model.type_ )
    , ( "repositoryId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.repositoryId) )
    , ( "branch", Maybe.withDefault Encode.null (Maybe.map Encode.string model.branch) )
    , ( "environmentId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.environmentId) )
    ]



toString : PipelinePhase -> String
toString =
    Encode.encode 0 << encode




typeDecoder : Decoder Type
typeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "VALIDATE" ->
                        Decode.succeed VALIDATE

                    "BUILD" ->
                        Decode.succeed BUILD

                    "DEPLOY" ->
                        Decode.succeed DEPLOY

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeType : Type -> Encode.Value
encodeType model =
    case model of
        VALIDATE ->
            Encode.string "VALIDATE"

        BUILD ->
            Encode.string "BUILD"

        DEPLOY ->
            Encode.string "DEPLOY"




