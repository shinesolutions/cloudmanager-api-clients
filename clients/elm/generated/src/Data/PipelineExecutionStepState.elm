{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.PipelineExecutionStepState exposing (PipelineExecutionStepState, Status(..), decoder, encode, encodeWithTag, toString)

import DateTime exposing (DateTime)
import DateTime exposing (DateTime)
import Data.Object as Object exposing (Object)
import Data.PipelineExecutionStepStateLinks as PipelineExecutionStepStateLinks exposing (PipelineExecutionStepStateLinks)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Describes the status of a particular pipeline execution step for display purposes
-}
type alias PipelineExecutionStepState =
    { id : Maybe (String)
    , stepId : Maybe (String)
    , phaseId : Maybe (String)
    , action : Maybe (String)
    , repository : Maybe (String)
    , branch : Maybe (String)
    , environment : Maybe (String)
    , environmentType : Maybe (String)
    , startedAt : Maybe (DateTime)
    , finishedAt : Maybe (DateTime)
    , details : Maybe ((Dict String Object))
    , status : Maybe (Status)
    , links : Maybe (PipelineExecutionStepStateLinks)
    }


type Status
    = NOTSTARTED
    | RUNNING
    | FINISHED
    | ERROR
    | ROLLINGBACK
    | ROLLEDBACK
    | WAITING
    | CANCELLED
    | FAILED



decoder : Decoder PipelineExecutionStepState
decoder =
    Decode.succeed PipelineExecutionStepState
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "stepId" (Decode.nullable Decode.string) Nothing
        |> optional "phaseId" (Decode.nullable Decode.string) Nothing
        |> optional "action" (Decode.nullable Decode.string) Nothing
        |> optional "repository" (Decode.nullable Decode.string) Nothing
        |> optional "branch" (Decode.nullable Decode.string) Nothing
        |> optional "environment" (Decode.nullable Decode.string) Nothing
        |> optional "environmentType" (Decode.nullable Decode.string) Nothing
        |> optional "startedAt" (Decode.nullable DateTime.decoder) Nothing
        |> optional "finishedAt" (Decode.nullable DateTime.decoder) Nothing
        |> optional "details" (Decode.nullable (Decode.dict Object.decoder)) Nothing
        |> optional "status" (Decode.nullable statusDecoder) Nothing
        |> optional "_links" (Decode.nullable PipelineExecutionStepStateLinks.decoder) Nothing



encode : PipelineExecutionStepState -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> PipelineExecutionStepState -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : PipelineExecutionStepState -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "stepId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.stepId) )
    , ( "phaseId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.phaseId) )
    , ( "action", Maybe.withDefault Encode.null (Maybe.map Encode.string model.action) )
    , ( "repository", Maybe.withDefault Encode.null (Maybe.map Encode.string model.repository) )
    , ( "branch", Maybe.withDefault Encode.null (Maybe.map Encode.string model.branch) )
    , ( "environment", Maybe.withDefault Encode.null (Maybe.map Encode.string model.environment) )
    , ( "environmentType", Maybe.withDefault Encode.null (Maybe.map Encode.string model.environmentType) )
    , ( "startedAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encode model.startedAt) )
    , ( "finishedAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encode model.finishedAt) )
    , ( "details", Maybe.withDefault Encode.null (Maybe.map (Encode.dict identity Object.encode) model.details) )
    , ( "status", Maybe.withDefault Encode.null (Maybe.map encodeStatus model.status) )
    , ( "_links", Maybe.withDefault Encode.null (Maybe.map PipelineExecutionStepStateLinks.encode model.links) )
    ]



toString : PipelineExecutionStepState -> String
toString =
    Encode.encode 0 << encode




statusDecoder : Decoder Status
statusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "NOT_STARTED" ->
                        Decode.succeed NOTSTARTED

                    "RUNNING" ->
                        Decode.succeed RUNNING

                    "FINISHED" ->
                        Decode.succeed FINISHED

                    "ERROR" ->
                        Decode.succeed ERROR

                    "ROLLING_BACK" ->
                        Decode.succeed ROLLINGBACK

                    "ROLLED_BACK" ->
                        Decode.succeed ROLLEDBACK

                    "WAITING" ->
                        Decode.succeed WAITING

                    "CANCELLED" ->
                        Decode.succeed CANCELLED

                    "FAILED" ->
                        Decode.succeed FAILED

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeStatus : Status -> Encode.Value
encodeStatus model =
    case model of
        NOTSTARTED ->
            Encode.string "NOT_STARTED"

        RUNNING ->
            Encode.string "RUNNING"

        FINISHED ->
            Encode.string "FINISHED"

        ERROR ->
            Encode.string "ERROR"

        ROLLINGBACK ->
            Encode.string "ROLLING_BACK"

        ROLLEDBACK ->
            Encode.string "ROLLED_BACK"

        WAITING ->
            Encode.string "WAITING"

        CANCELLED ->
            Encode.string "CANCELLED"

        FAILED ->
            Encode.string "FAILED"




