{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Variable exposing (Variable, Type(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| A named value than can be set on an Environment
-}
type alias Variable =
    { name : Maybe (String)
    , value : Maybe (String)
    , type_ : Maybe (Type)
    }


type Type
    = String
    | SecretString



decoder : Decoder Variable
decoder =
    Decode.succeed Variable
        |> optional "name" (Decode.nullable Decode.string) Nothing
        |> optional "value" (Decode.nullable Decode.string) Nothing
        |> optional "type" (Decode.nullable typeDecoder) Nothing



encode : Variable -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Variable -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Variable -> List (String, Encode.Value)
encodePairs model =
    [ ( "name", Maybe.withDefault Encode.null (Maybe.map Encode.string model.name) )
    , ( "value", Maybe.withDefault Encode.null (Maybe.map Encode.string model.value) )
    , ( "type", Maybe.withDefault Encode.null (Maybe.map encodeType model.type_) )
    ]



toString : Variable -> String
toString =
    Encode.encode 0 << encode




typeDecoder : Decoder Type
typeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "string" ->
                        Decode.succeed String

                    "secretString" ->
                        Decode.succeed SecretString

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeType : Type -> Encode.Value
encodeType model =
    case model of
        String ->
            Encode.string "string"

        SecretString ->
            Encode.string "secretString"




