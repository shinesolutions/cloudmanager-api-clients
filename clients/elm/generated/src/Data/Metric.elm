{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Metric exposing (Metric, Severity(..), Comparator(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Describes a __Metric__
-}
type alias Metric =
    { id : Maybe (String)
    , severity : Maybe (Severity)
    , passed : Maybe (Bool)
    , override : Maybe (Bool)
    , actualValue : Maybe (String)
    , expectedValue : Maybe (String)
    , comparator : Maybe (Comparator)
    , kpi : Maybe (String)
    }


type Severity
    = Critical
    | Important
    | Informational



type Comparator
    = GT
    | GTE
    | LT
    | LTE
    | EQ
    | NEQ



decoder : Decoder Metric
decoder =
    Decode.succeed Metric
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "severity" (Decode.nullable severityDecoder) Nothing
        |> optional "passed" (Decode.nullable Decode.bool) (Just False)
        |> optional "override" (Decode.nullable Decode.bool) (Just False)
        |> optional "actualValue" (Decode.nullable Decode.string) Nothing
        |> optional "expectedValue" (Decode.nullable Decode.string) Nothing
        |> optional "comparator" (Decode.nullable comparatorDecoder) Nothing
        |> optional "kpi" (Decode.nullable Decode.string) Nothing



encode : Metric -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Metric -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Metric -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "severity", Maybe.withDefault Encode.null (Maybe.map encodeSeverity model.severity) )
    , ( "passed", Maybe.withDefault Encode.null (Maybe.map Encode.bool model.passed) )
    , ( "override", Maybe.withDefault Encode.null (Maybe.map Encode.bool model.override) )
    , ( "actualValue", Maybe.withDefault Encode.null (Maybe.map Encode.string model.actualValue) )
    , ( "expectedValue", Maybe.withDefault Encode.null (Maybe.map Encode.string model.expectedValue) )
    , ( "comparator", Maybe.withDefault Encode.null (Maybe.map encodeComparator model.comparator) )
    , ( "kpi", Maybe.withDefault Encode.null (Maybe.map Encode.string model.kpi) )
    ]



toString : Metric -> String
toString =
    Encode.encode 0 << encode




severityDecoder : Decoder Severity
severityDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "critical" ->
                        Decode.succeed Critical

                    "important" ->
                        Decode.succeed Important

                    "informational" ->
                        Decode.succeed Informational

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeSeverity : Severity -> Encode.Value
encodeSeverity model =
    case model of
        Critical ->
            Encode.string "critical"

        Important ->
            Encode.string "important"

        Informational ->
            Encode.string "informational"




comparatorDecoder : Decoder Comparator
comparatorDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "GT" ->
                        Decode.succeed GT

                    "GTE" ->
                        Decode.succeed GTE

                    "LT" ->
                        Decode.succeed LT

                    "LTE" ->
                        Decode.succeed LTE

                    "EQ" ->
                        Decode.succeed EQ

                    "NEQ" ->
                        Decode.succeed NEQ

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeComparator : Comparator -> Encode.Value
encodeComparator model =
    case model of
        GT ->
            Encode.string "GT"

        GTE ->
            Encode.string "GTE"

        LT ->
            Encode.string "LT"

        LTE ->
            Encode.string "LTE"

        EQ ->
            Encode.string "EQ"

        NEQ ->
            Encode.string "NEQ"




