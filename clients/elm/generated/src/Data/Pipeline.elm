{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Pipeline exposing (Pipeline, Trigger(..), Status(..), decoder, encode, encodeWithTag, toString)

import DateTime exposing (DateTime)
import DateTime exposing (DateTime)
import DateTime exposing (DateTime)
import DateTime exposing (DateTime)
import Data.PipelinePhase as PipelinePhase exposing (PipelinePhase)
import Data.PipelineLinks as PipelineLinks exposing (PipelineLinks)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Describes a __CI/CD Pipeline__
-}
type alias Pipeline =
    { id : Maybe (String)
    , programId : Maybe (String)
    , name : String
    , trigger : Maybe (Trigger)
    , status : Maybe (Status)
    , createdAt : Maybe (DateTime)
    , updatedAt : Maybe (DateTime)
    , lastStartedAt : Maybe (DateTime)
    , lastFinishedAt : Maybe (DateTime)
    , phases : (List PipelinePhase)
    , links : Maybe (PipelineLinks)
    }


type Trigger
    = ONCOMMIT
    | MANUAL
    | SCHEDULE



type Status
    = IDLE
    | BUSY
    | WAITING



decoder : Decoder Pipeline
decoder =
    Decode.succeed Pipeline
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "programId" (Decode.nullable Decode.string) Nothing
        |> required "name" Decode.string
        |> optional "trigger" (Decode.nullable triggerDecoder) Nothing
        |> optional "status" (Decode.nullable statusDecoder) Nothing
        |> optional "createdAt" (Decode.nullable DateTime.decoder) Nothing
        |> optional "updatedAt" (Decode.nullable DateTime.decoder) Nothing
        |> optional "lastStartedAt" (Decode.nullable DateTime.decoder) Nothing
        |> optional "lastFinishedAt" (Decode.nullable DateTime.decoder) Nothing
        |> required "phases" (Decode.list PipelinePhase.decoder)
        |> optional "_links" (Decode.nullable PipelineLinks.decoder) Nothing



encode : Pipeline -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Pipeline -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Pipeline -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "programId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.programId) )
    , ( "name", Encode.string model.name )
    , ( "trigger", Maybe.withDefault Encode.null (Maybe.map encodeTrigger model.trigger) )
    , ( "status", Maybe.withDefault Encode.null (Maybe.map encodeStatus model.status) )
    , ( "createdAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encode model.createdAt) )
    , ( "updatedAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encode model.updatedAt) )
    , ( "lastStartedAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encode model.lastStartedAt) )
    , ( "lastFinishedAt", Maybe.withDefault Encode.null (Maybe.map DateTime.encode model.lastFinishedAt) )
    , ( "phases", (Encode.list PipelinePhase.encode) model.phases )
    , ( "_links", Maybe.withDefault Encode.null (Maybe.map PipelineLinks.encode model.links) )
    ]



toString : Pipeline -> String
toString =
    Encode.encode 0 << encode




triggerDecoder : Decoder Trigger
triggerDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "ON_COMMIT" ->
                        Decode.succeed ONCOMMIT

                    "MANUAL" ->
                        Decode.succeed MANUAL

                    "SCHEDULE" ->
                        Decode.succeed SCHEDULE

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeTrigger : Trigger -> Encode.Value
encodeTrigger model =
    case model of
        ONCOMMIT ->
            Encode.string "ON_COMMIT"

        MANUAL ->
            Encode.string "MANUAL"

        SCHEDULE ->
            Encode.string "SCHEDULE"




statusDecoder : Decoder Status
statusDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "IDLE" ->
                        Decode.succeed IDLE

                    "BUSY" ->
                        Decode.succeed BUSY

                    "WAITING" ->
                        Decode.succeed WAITING

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeStatus : Status -> Encode.Value
encodeStatus model =
    case model of
        IDLE ->
            Encode.string "IDLE"

        BUSY ->
            Encode.string "BUSY"

        WAITING ->
            Encode.string "WAITING"




