{-
   Cloud Manager API
   This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.

   The version of the OpenAPI document: 1.0.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Environment exposing (Environment, Type(..), decoder, encode, encodeWithTag, toString)

import Data.EnvironmentLinks as EnvironmentLinks exposing (EnvironmentLinks)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| An Environment that 
-}
type alias Environment =
    { id : Maybe (String)
    , programId : Maybe (String)
    , name : Maybe (String)
    , description : Maybe (String)
    , type_ : Maybe (Type)
    , links : Maybe (EnvironmentLinks)
    }


type Type
    = Dev
    | Stage
    | Prod



decoder : Decoder Environment
decoder =
    Decode.succeed Environment
        |> optional "id" (Decode.nullable Decode.string) Nothing
        |> optional "programId" (Decode.nullable Decode.string) Nothing
        |> optional "name" (Decode.nullable Decode.string) Nothing
        |> optional "description" (Decode.nullable Decode.string) Nothing
        |> optional "type" (Decode.nullable typeDecoder) Nothing
        |> optional "_links" (Decode.nullable EnvironmentLinks.decoder) Nothing



encode : Environment -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Environment -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Environment -> List (String, Encode.Value)
encodePairs model =
    [ ( "id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.id) )
    , ( "programId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.programId) )
    , ( "name", Maybe.withDefault Encode.null (Maybe.map Encode.string model.name) )
    , ( "description", Maybe.withDefault Encode.null (Maybe.map Encode.string model.description) )
    , ( "type", Maybe.withDefault Encode.null (Maybe.map encodeType model.type_) )
    , ( "_links", Maybe.withDefault Encode.null (Maybe.map EnvironmentLinks.encode model.links) )
    ]



toString : Environment -> String
toString =
    Encode.encode 0 << encode




typeDecoder : Decoder Type
typeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "dev" ->
                        Decode.succeed Dev

                    "stage" ->
                        Decode.succeed Stage

                    "prod" ->
                        Decode.succeed Prod

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeType : Type -> Encode.Value
encodeType model =
    case model of
        Dev ->
            Encode.string "dev"

        Stage ->
            Encode.string "stage"

        Prod ->
            Encode.string "prod"




