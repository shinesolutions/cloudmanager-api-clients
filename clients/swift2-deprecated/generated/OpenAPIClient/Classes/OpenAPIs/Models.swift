// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [BadRequestError]
            Decoders.addDecoder(clazz: [BadRequestError].self) { (source: AnyObject) -> [BadRequestError] in
                return Decoders.decode(clazz: [BadRequestError].self, source: source)
            }
            // Decoder for BadRequestError
            Decoders.addDecoder(clazz: BadRequestError.self) { (source: AnyObject) -> BadRequestError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BadRequestError()
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.missingParams = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["missingParams"])
                instance.invalidParams = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["invalidParams"])
                return instance
            }


            // Decoder for [BranchList]
            Decoders.addDecoder(clazz: [BranchList].self) { (source: AnyObject) -> [BranchList] in
                return Decoders.decode(clazz: [BranchList].self, source: source)
            }
            // Decoder for BranchList
            Decoders.addDecoder(clazz: BranchList.self) { (source: AnyObject) -> BranchList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BranchList()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.embedded = Decoders.decodeOptional(clazz: BranchListEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: ProgramListLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [BranchListEmbedded]
            Decoders.addDecoder(clazz: [BranchListEmbedded].self) { (source: AnyObject) -> [BranchListEmbedded] in
                return Decoders.decode(clazz: [BranchListEmbedded].self, source: source)
            }
            // Decoder for BranchListEmbedded
            Decoders.addDecoder(clazz: BranchListEmbedded.self) { (source: AnyObject) -> BranchListEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BranchListEmbedded()
                instance.branches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["branches"])
                return instance
            }


            // Decoder for [EmbeddedProgram]
            Decoders.addDecoder(clazz: [EmbeddedProgram].self) { (source: AnyObject) -> [EmbeddedProgram] in
                return Decoders.decode(clazz: [EmbeddedProgram].self, source: source)
            }
            // Decoder for EmbeddedProgram
            Decoders.addDecoder(clazz: EmbeddedProgram.self) { (source: AnyObject) -> EmbeddedProgram in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmbeddedProgram()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.tenantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tenantId"])
                return instance
            }


            // Decoder for [Environment]
            Decoders.addDecoder(clazz: [Environment].self) { (source: AnyObject) -> [Environment] in
                return Decoders.decode(clazz: [Environment].self, source: source)
            }
            // Decoder for Environment
            Decoders.addDecoder(clazz: Environment.self) { (source: AnyObject) -> Environment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Environment()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.programId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["programId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.type = Environment.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.links = Decoders.decodeOptional(clazz: EnvironmentLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [EnvironmentLinks]
            Decoders.addDecoder(clazz: [EnvironmentLinks].self) { (source: AnyObject) -> [EnvironmentLinks] in
                return Decoders.decode(clazz: [EnvironmentLinks].self, source: source)
            }
            // Decoder for EnvironmentLinks
            Decoders.addDecoder(clazz: EnvironmentLinks.self) { (source: AnyObject) -> EnvironmentLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentLinks()
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance.httpNsAdobeComAdobecloudRelPipeline = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline"])
                instance.httpNsAdobeComAdobecloudRelAuthor = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/author"])
                instance.httpNsAdobeComAdobecloudRelPublish = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/publish"])
                instance.httpNsAdobeComAdobecloudRelDeveloperConsole = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/developerConsole"])
                instance.httpNsAdobeComAdobecloudRelLogs = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/logs"])
                instance.httpNsAdobeComAdobecloudRelVariables = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/variables"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [EnvironmentList]
            Decoders.addDecoder(clazz: [EnvironmentList].self) { (source: AnyObject) -> [EnvironmentList] in
                return Decoders.decode(clazz: [EnvironmentList].self, source: source)
            }
            // Decoder for EnvironmentList
            Decoders.addDecoder(clazz: EnvironmentList.self) { (source: AnyObject) -> EnvironmentList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentList()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.embedded = Decoders.decodeOptional(clazz: EnvironmentListEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: ProgramListLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [EnvironmentListEmbedded]
            Decoders.addDecoder(clazz: [EnvironmentListEmbedded].self) { (source: AnyObject) -> [EnvironmentListEmbedded] in
                return Decoders.decode(clazz: [EnvironmentListEmbedded].self, source: source)
            }
            // Decoder for EnvironmentListEmbedded
            Decoders.addDecoder(clazz: EnvironmentListEmbedded.self) { (source: AnyObject) -> EnvironmentListEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentListEmbedded()
                instance.environments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["environments"])
                return instance
            }


            // Decoder for [EnvironmentLog]
            Decoders.addDecoder(clazz: [EnvironmentLog].self) { (source: AnyObject) -> [EnvironmentLog] in
                return Decoders.decode(clazz: [EnvironmentLog].self, source: source)
            }
            // Decoder for EnvironmentLog
            Decoders.addDecoder(clazz: EnvironmentLog.self) { (source: AnyObject) -> EnvironmentLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentLog()
                instance.service = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                instance.programId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["programId"])
                instance.environmentId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["environmentId"])
                instance.links = Decoders.decodeOptional(clazz: EnvironmentLogLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [EnvironmentLogLinks]
            Decoders.addDecoder(clazz: [EnvironmentLogLinks].self) { (source: AnyObject) -> [EnvironmentLogLinks] in
                return Decoders.decode(clazz: [EnvironmentLogLinks].self, source: source)
            }
            // Decoder for EnvironmentLogLinks
            Decoders.addDecoder(clazz: EnvironmentLogLinks.self) { (source: AnyObject) -> EnvironmentLogLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentLogLinks()
                instance.httpNsAdobeComAdobecloudRelLogsDownload = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/logs/download"])
                instance.httpNsAdobeComAdobecloudRelLogsTail = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/logs/tail"])
                return instance
            }


            // Decoder for [EnvironmentLogs]
            Decoders.addDecoder(clazz: [EnvironmentLogs].self) { (source: AnyObject) -> [EnvironmentLogs] in
                return Decoders.decode(clazz: [EnvironmentLogs].self, source: source)
            }
            // Decoder for EnvironmentLogs
            Decoders.addDecoder(clazz: EnvironmentLogs.self) { (source: AnyObject) -> EnvironmentLogs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentLogs()
                instance.service = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["service"])
                instance.name = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["name"])
                instance.days = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["days"])
                instance.links = Decoders.decodeOptional(clazz: EnvironmentLogsLinks.self, source: sourceDictionary["_links"])
                instance.embedded = Decoders.decodeOptional(clazz: EnvironmentLogsEmbedded.self, source: sourceDictionary["_embedded"])
                return instance
            }


            // Decoder for [EnvironmentLogsEmbedded]
            Decoders.addDecoder(clazz: [EnvironmentLogsEmbedded].self) { (source: AnyObject) -> [EnvironmentLogsEmbedded] in
                return Decoders.decode(clazz: [EnvironmentLogsEmbedded].self, source: source)
            }
            // Decoder for EnvironmentLogsEmbedded
            Decoders.addDecoder(clazz: EnvironmentLogsEmbedded.self) { (source: AnyObject) -> EnvironmentLogsEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentLogsEmbedded()
                instance.downloads = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["downloads"])
                return instance
            }


            // Decoder for [EnvironmentLogsLinks]
            Decoders.addDecoder(clazz: [EnvironmentLogsLinks].self) { (source: AnyObject) -> [EnvironmentLogsLinks] in
                return Decoders.decode(clazz: [EnvironmentLogsLinks].self, source: source)
            }
            // Decoder for EnvironmentLogsLinks
            Decoders.addDecoder(clazz: EnvironmentLogsLinks.self) { (source: AnyObject) -> EnvironmentLogsLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EnvironmentLogsLinks()
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [HalLink]
            Decoders.addDecoder(clazz: [HalLink].self) { (source: AnyObject) -> [HalLink] in
                return Decoders.decode(clazz: [HalLink].self, source: source)
            }
            // Decoder for HalLink
            Decoders.addDecoder(clazz: HalLink.self) { (source: AnyObject) -> HalLink in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HalLink()
                instance.href = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["href"])
                instance.templated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["templated"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.deprecation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deprecation"])
                instance.profile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["profile"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.hreflang = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hreflang"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [InvalidParameter]
            Decoders.addDecoder(clazz: [InvalidParameter].self) { (source: AnyObject) -> [InvalidParameter] in
                return Decoders.decode(clazz: [InvalidParameter].self, source: source)
            }
            // Decoder for InvalidParameter
            Decoders.addDecoder(clazz: InvalidParameter.self) { (source: AnyObject) -> InvalidParameter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InvalidParameter()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }


            // Decoder for [Metric]
            Decoders.addDecoder(clazz: [Metric].self) { (source: AnyObject) -> [Metric] in
                return Decoders.decode(clazz: [Metric].self, source: source)
            }
            // Decoder for Metric
            Decoders.addDecoder(clazz: Metric.self) { (source: AnyObject) -> Metric in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Metric()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.severity = Metric.Severity(rawValue: (sourceDictionary["severity"] as? String) ?? "") 
                instance.passed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["passed"])
                instance._override = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["override"])
                instance.actualValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["actualValue"])
                instance.expectedValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expectedValue"])
                instance.comparator = Metric.Comparator(rawValue: (sourceDictionary["comparator"] as? String) ?? "") 
                instance.kpi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kpi"])
                return instance
            }


            // Decoder for [MissingParameter]
            Decoders.addDecoder(clazz: [MissingParameter].self) { (source: AnyObject) -> [MissingParameter] in
                return Decoders.decode(clazz: [MissingParameter].self, source: source)
            }
            // Decoder for MissingParameter
            Decoders.addDecoder(clazz: MissingParameter.self) { (source: AnyObject) -> MissingParameter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MissingParameter()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [Pipeline]
            Decoders.addDecoder(clazz: [Pipeline].self) { (source: AnyObject) -> [Pipeline] in
                return Decoders.decode(clazz: [Pipeline].self, source: source)
            }
            // Decoder for Pipeline
            Decoders.addDecoder(clazz: Pipeline.self) { (source: AnyObject) -> Pipeline in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pipeline()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.programId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["programId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.trigger = Pipeline.Trigger(rawValue: (sourceDictionary["trigger"] as? String) ?? "") 
                instance.status = Pipeline.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                instance.lastStartedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastStartedAt"])
                instance.lastFinishedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastFinishedAt"])
                instance.phases = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phases"])
                instance.links = Decoders.decodeOptional(clazz: PipelineLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [PipelineExecution]
            Decoders.addDecoder(clazz: [PipelineExecution].self) { (source: AnyObject) -> [PipelineExecution] in
                return Decoders.decode(clazz: [PipelineExecution].self, source: source)
            }
            // Decoder for PipelineExecution
            Decoders.addDecoder(clazz: PipelineExecution.self) { (source: AnyObject) -> PipelineExecution in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecution()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.programId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["programId"])
                instance.pipelineId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipelineId"])
                instance.artifactsVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["artifactsVersion"])
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.status = PipelineExecution.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.trigger = PipelineExecution.Trigger(rawValue: (sourceDictionary["trigger"] as? String) ?? "") 
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.updatedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updatedAt"])
                instance.finishedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["finishedAt"])
                instance.embedded = Decoders.decodeOptional(clazz: PipelineExecutionEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: PipelineExecutionLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [PipelineExecutionEmbedded]
            Decoders.addDecoder(clazz: [PipelineExecutionEmbedded].self) { (source: AnyObject) -> [PipelineExecutionEmbedded] in
                return Decoders.decode(clazz: [PipelineExecutionEmbedded].self, source: source)
            }
            // Decoder for PipelineExecutionEmbedded
            Decoders.addDecoder(clazz: PipelineExecutionEmbedded.self) { (source: AnyObject) -> PipelineExecutionEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionEmbedded()
                instance.stepStates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stepStates"])
                return instance
            }


            // Decoder for [PipelineExecutionLinks]
            Decoders.addDecoder(clazz: [PipelineExecutionLinks].self) { (source: AnyObject) -> [PipelineExecutionLinks] in
                return Decoders.decode(clazz: [PipelineExecutionLinks].self, source: source)
            }
            // Decoder for PipelineExecutionLinks
            Decoders.addDecoder(clazz: PipelineExecutionLinks.self) { (source: AnyObject) -> PipelineExecutionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionLinks()
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance.httpNsAdobeComAdobecloudRelPipeline = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [PipelineExecutionListRepresentation]
            Decoders.addDecoder(clazz: [PipelineExecutionListRepresentation].self) { (source: AnyObject) -> [PipelineExecutionListRepresentation] in
                return Decoders.decode(clazz: [PipelineExecutionListRepresentation].self, source: source)
            }
            // Decoder for PipelineExecutionListRepresentation
            Decoders.addDecoder(clazz: PipelineExecutionListRepresentation.self) { (source: AnyObject) -> PipelineExecutionListRepresentation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionListRepresentation()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.page = Decoders.decodeOptional(clazz: RequestedPageDetails.self, source: sourceDictionary["_page"])
                instance.embedded = Decoders.decodeOptional(clazz: PipelineExecutionListRepresentationEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: PipelineExecutionListRepresentationLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [PipelineExecutionListRepresentationEmbedded]
            Decoders.addDecoder(clazz: [PipelineExecutionListRepresentationEmbedded].self) { (source: AnyObject) -> [PipelineExecutionListRepresentationEmbedded] in
                return Decoders.decode(clazz: [PipelineExecutionListRepresentationEmbedded].self, source: source)
            }
            // Decoder for PipelineExecutionListRepresentationEmbedded
            Decoders.addDecoder(clazz: PipelineExecutionListRepresentationEmbedded.self) { (source: AnyObject) -> PipelineExecutionListRepresentationEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionListRepresentationEmbedded()
                instance.executions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["executions"])
                return instance
            }


            // Decoder for [PipelineExecutionListRepresentationLinks]
            Decoders.addDecoder(clazz: [PipelineExecutionListRepresentationLinks].self) { (source: AnyObject) -> [PipelineExecutionListRepresentationLinks] in
                return Decoders.decode(clazz: [PipelineExecutionListRepresentationLinks].self, source: source)
            }
            // Decoder for PipelineExecutionListRepresentationLinks
            Decoders.addDecoder(clazz: PipelineExecutionListRepresentationLinks.self) { (source: AnyObject) -> PipelineExecutionListRepresentationLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionListRepresentationLinks()
                instance.next = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["next"])
                instance.page = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["page"])
                instance.prev = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["prev"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [PipelineExecutionStepState]
            Decoders.addDecoder(clazz: [PipelineExecutionStepState].self) { (source: AnyObject) -> [PipelineExecutionStepState] in
                return Decoders.decode(clazz: [PipelineExecutionStepState].self, source: source)
            }
            // Decoder for PipelineExecutionStepState
            Decoders.addDecoder(clazz: PipelineExecutionStepState.self) { (source: AnyObject) -> PipelineExecutionStepState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionStepState()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.stepId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stepId"])
                instance.phaseId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phaseId"])
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.repository = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repository"])
                instance.branch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["branch"])
                instance.environment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["environment"])
                instance.environmentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["environmentType"])
                instance.startedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startedAt"])
                instance.finishedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["finishedAt"])
                instance.details = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["details"])
                instance.status = PipelineExecutionStepState.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.links = Decoders.decodeOptional(clazz: PipelineExecutionStepStateLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [PipelineExecutionStepStateLinks]
            Decoders.addDecoder(clazz: [PipelineExecutionStepStateLinks].self) { (source: AnyObject) -> [PipelineExecutionStepStateLinks] in
                return Decoders.decode(clazz: [PipelineExecutionStepStateLinks].self, source: source)
            }
            // Decoder for PipelineExecutionStepStateLinks
            Decoders.addDecoder(clazz: PipelineExecutionStepStateLinks.self) { (source: AnyObject) -> PipelineExecutionStepStateLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineExecutionStepStateLinks()
                instance.httpNsAdobeComAdobecloudRelExecution = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/execution"])
                instance.httpNsAdobeComAdobecloudRelPipeline = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline"])
                instance.httpNsAdobeComAdobecloudRelPipelineLogs = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline/logs"])
                instance.httpNsAdobeComAdobecloudRelPipelineMetrics = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline/metrics"])
                instance.httpNsAdobeComAdobecloudRelPipelineAdvance = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline/advance"])
                instance.httpNsAdobeComAdobecloudRelPipelineCancel = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipeline/cancel"])
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [PipelineLinks]
            Decoders.addDecoder(clazz: [PipelineLinks].self) { (source: AnyObject) -> [PipelineLinks] in
                return Decoders.decode(clazz: [PipelineLinks].self, source: source)
            }
            // Decoder for PipelineLinks
            Decoders.addDecoder(clazz: PipelineLinks.self) { (source: AnyObject) -> PipelineLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineLinks()
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance.httpNsAdobeComAdobecloudRelExecution = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/execution"])
                instance.httpNsAdobeComAdobecloudRelExecutions = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/executions"])
                instance.httpNsAdobeComAdobecloudRelRollbackLastSuccessfulExecution = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/rollbackLastSuccessfulExecution"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [PipelineList]
            Decoders.addDecoder(clazz: [PipelineList].self) { (source: AnyObject) -> [PipelineList] in
                return Decoders.decode(clazz: [PipelineList].self, source: source)
            }
            // Decoder for PipelineList
            Decoders.addDecoder(clazz: PipelineList.self) { (source: AnyObject) -> PipelineList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineList()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.embedded = Decoders.decodeOptional(clazz: PipelineListEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: ProgramListLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [PipelineListEmbedded]
            Decoders.addDecoder(clazz: [PipelineListEmbedded].self) { (source: AnyObject) -> [PipelineListEmbedded] in
                return Decoders.decode(clazz: [PipelineListEmbedded].self, source: source)
            }
            // Decoder for PipelineListEmbedded
            Decoders.addDecoder(clazz: PipelineListEmbedded.self) { (source: AnyObject) -> PipelineListEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineListEmbedded()
                instance.pipelines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pipelines"])
                return instance
            }


            // Decoder for [PipelinePhase]
            Decoders.addDecoder(clazz: [PipelinePhase].self) { (source: AnyObject) -> [PipelinePhase] in
                return Decoders.decode(clazz: [PipelinePhase].self, source: source)
            }
            // Decoder for PipelinePhase
            Decoders.addDecoder(clazz: PipelinePhase.self) { (source: AnyObject) -> PipelinePhase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelinePhase()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = PipelinePhase.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.repositoryId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repositoryId"])
                instance.branch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["branch"])
                instance.environmentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["environmentId"])
                return instance
            }


            // Decoder for [PipelineStepMetrics]
            Decoders.addDecoder(clazz: [PipelineStepMetrics].self) { (source: AnyObject) -> [PipelineStepMetrics] in
                return Decoders.decode(clazz: [PipelineStepMetrics].self, source: source)
            }
            // Decoder for PipelineStepMetrics
            Decoders.addDecoder(clazz: PipelineStepMetrics.self) { (source: AnyObject) -> PipelineStepMetrics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineStepMetrics()
                instance.metrics = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metrics"])
                return instance
            }


            // Decoder for [Program]
            Decoders.addDecoder(clazz: [Program].self) { (source: AnyObject) -> [Program] in
                return Decoders.decode(clazz: [Program].self, source: source)
            }
            // Decoder for Program
            Decoders.addDecoder(clazz: Program.self) { (source: AnyObject) -> Program in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Program()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.tenantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tenantId"])
                instance.imsOrgId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imsOrgId"])
                instance.links = Decoders.decodeOptional(clazz: ProgramLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [ProgramLinks]
            Decoders.addDecoder(clazz: [ProgramLinks].self) { (source: AnyObject) -> [ProgramLinks] in
                return Decoders.decode(clazz: [ProgramLinks].self, source: source)
            }
            // Decoder for ProgramLinks
            Decoders.addDecoder(clazz: ProgramLinks.self) { (source: AnyObject) -> ProgramLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProgramLinks()
                instance.httpNsAdobeComAdobecloudRelPipelines = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/pipelines"])
                instance.httpNsAdobeComAdobecloudRelEnvironments = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/environments"])
                instance.httpNsAdobeComAdobecloudRelRepositories = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/repositories"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [ProgramList]
            Decoders.addDecoder(clazz: [ProgramList].self) { (source: AnyObject) -> [ProgramList] in
                return Decoders.decode(clazz: [ProgramList].self, source: source)
            }
            // Decoder for ProgramList
            Decoders.addDecoder(clazz: ProgramList.self) { (source: AnyObject) -> ProgramList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProgramList()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.embedded = Decoders.decodeOptional(clazz: ProgramListEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: ProgramListLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [ProgramListEmbedded]
            Decoders.addDecoder(clazz: [ProgramListEmbedded].self) { (source: AnyObject) -> [ProgramListEmbedded] in
                return Decoders.decode(clazz: [ProgramListEmbedded].self, source: source)
            }
            // Decoder for ProgramListEmbedded
            Decoders.addDecoder(clazz: ProgramListEmbedded.self) { (source: AnyObject) -> ProgramListEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProgramListEmbedded()
                instance.programs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["programs"])
                return instance
            }


            // Decoder for [ProgramListLinks]
            Decoders.addDecoder(clazz: [ProgramListLinks].self) { (source: AnyObject) -> [ProgramListLinks] in
                return Decoders.decode(clazz: [ProgramListLinks].self, source: source)
            }
            // Decoder for ProgramListLinks
            Decoders.addDecoder(clazz: ProgramListLinks.self) { (source: AnyObject) -> ProgramListLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProgramListLinks()
                instance.next = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["next"])
                instance.prev = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["prev"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [Repository]
            Decoders.addDecoder(clazz: [Repository].self) { (source: AnyObject) -> [Repository] in
                return Decoders.decode(clazz: [Repository].self, source: source)
            }
            // Decoder for Repository
            Decoders.addDecoder(clazz: Repository.self) { (source: AnyObject) -> Repository in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Repository()
                instance.repo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repo"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.links = Decoders.decodeOptional(clazz: RepositoryLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [RepositoryBranch]
            Decoders.addDecoder(clazz: [RepositoryBranch].self) { (source: AnyObject) -> [RepositoryBranch] in
                return Decoders.decode(clazz: [RepositoryBranch].self, source: source)
            }
            // Decoder for RepositoryBranch
            Decoders.addDecoder(clazz: RepositoryBranch.self) { (source: AnyObject) -> RepositoryBranch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RepositoryBranch()
                instance.programId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["programId"])
                instance.repositoryId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["repositoryId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.links = Decoders.decodeOptional(clazz: RepositoryBranchLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [RepositoryBranchLinks]
            Decoders.addDecoder(clazz: [RepositoryBranchLinks].self) { (source: AnyObject) -> [RepositoryBranchLinks] in
                return Decoders.decode(clazz: [RepositoryBranchLinks].self, source: source)
            }
            // Decoder for RepositoryBranchLinks
            Decoders.addDecoder(clazz: RepositoryBranchLinks.self) { (source: AnyObject) -> RepositoryBranchLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RepositoryBranchLinks()
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance.httpNsAdobeComAdobecloudRelRepository = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/repository"])
                return instance
            }


            // Decoder for [RepositoryLinks]
            Decoders.addDecoder(clazz: [RepositoryLinks].self) { (source: AnyObject) -> [RepositoryLinks] in
                return Decoders.decode(clazz: [RepositoryLinks].self, source: source)
            }
            // Decoder for RepositoryLinks
            Decoders.addDecoder(clazz: RepositoryLinks.self) { (source: AnyObject) -> RepositoryLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RepositoryLinks()
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance.httpNsAdobeComAdobecloudRelBranches = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/branches"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }


            // Decoder for [RepositoryList]
            Decoders.addDecoder(clazz: [RepositoryList].self) { (source: AnyObject) -> [RepositoryList] in
                return Decoders.decode(clazz: [RepositoryList].self, source: source)
            }
            // Decoder for RepositoryList
            Decoders.addDecoder(clazz: RepositoryList.self) { (source: AnyObject) -> RepositoryList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RepositoryList()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.embedded = Decoders.decodeOptional(clazz: RepositoryListEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: ProgramListLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [RepositoryListEmbedded]
            Decoders.addDecoder(clazz: [RepositoryListEmbedded].self) { (source: AnyObject) -> [RepositoryListEmbedded] in
                return Decoders.decode(clazz: [RepositoryListEmbedded].self, source: source)
            }
            // Decoder for RepositoryListEmbedded
            Decoders.addDecoder(clazz: RepositoryListEmbedded.self) { (source: AnyObject) -> RepositoryListEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RepositoryListEmbedded()
                instance.repositories = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["repositories"])
                return instance
            }


            // Decoder for [RequestedPageDetails]
            Decoders.addDecoder(clazz: [RequestedPageDetails].self) { (source: AnyObject) -> [RequestedPageDetails] in
                return Decoders.decode(clazz: [RequestedPageDetails].self, source: source)
            }
            // Decoder for RequestedPageDetails
            Decoders.addDecoder(clazz: RequestedPageDetails.self) { (source: AnyObject) -> RequestedPageDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestedPageDetails()
                instance.start = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["start"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.orderBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderBy"])
                instance.property = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["property"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.next = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["next"])
                instance.prev = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["prev"])
                return instance
            }


            // Decoder for [Variable]
            Decoders.addDecoder(clazz: [Variable].self) { (source: AnyObject) -> [Variable] in
                return Decoders.decode(clazz: [Variable].self, source: source)
            }
            // Decoder for Variable
            Decoders.addDecoder(clazz: Variable.self) { (source: AnyObject) -> Variable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Variable()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.type = Variable.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [VariableList]
            Decoders.addDecoder(clazz: [VariableList].self) { (source: AnyObject) -> [VariableList] in
                return Decoders.decode(clazz: [VariableList].self, source: source)
            }
            // Decoder for VariableList
            Decoders.addDecoder(clazz: VariableList.self) { (source: AnyObject) -> VariableList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableList()
                instance.totalNumberOfItems = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_totalNumberOfItems"])
                instance.embedded = Decoders.decodeOptional(clazz: VariableListEmbedded.self, source: sourceDictionary["_embedded"])
                instance.links = Decoders.decodeOptional(clazz: VariableListLinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [VariableListEmbedded]
            Decoders.addDecoder(clazz: [VariableListEmbedded].self) { (source: AnyObject) -> [VariableListEmbedded] in
                return Decoders.decode(clazz: [VariableListEmbedded].self, source: source)
            }
            // Decoder for VariableListEmbedded
            Decoders.addDecoder(clazz: VariableListEmbedded.self) { (source: AnyObject) -> VariableListEmbedded in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableListEmbedded()
                instance.variables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["variables"])
                return instance
            }


            // Decoder for [VariableListLinks]
            Decoders.addDecoder(clazz: [VariableListLinks].self) { (source: AnyObject) -> [VariableListLinks] in
                return Decoders.decode(clazz: [VariableListLinks].self, source: source)
            }
            // Decoder for VariableListLinks
            Decoders.addDecoder(clazz: VariableListLinks.self) { (source: AnyObject) -> VariableListLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableListLinks()
                instance.httpNsAdobeComAdobecloudRelEnvironment = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/environment"])
                instance.httpNsAdobeComAdobecloudRelProgram = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["http://ns.adobe.com/adobecloud/rel/program"])
                instance._self = Decoders.decodeOptional(clazz: HalLink.self, source: sourceDictionary["self"])
                return instance
            }
        }
    }
}
