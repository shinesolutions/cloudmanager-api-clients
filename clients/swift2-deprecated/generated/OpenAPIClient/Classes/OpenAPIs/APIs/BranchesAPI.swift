//
// BranchesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class BranchesAPI: APIBase {
    /**
     List Branches
     
     - parameter programId: (path) Identifier of the program. 
     - parameter repositoryId: (path) Identifier of the repository 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getBranches(programId programId: String, repositoryId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: BranchList?, error: ErrorType?) -> Void)) {
        getBranchesWithRequestBuilder(programId: programId, repositoryId: repositoryId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Branches
     - GET /api/program/{programId}/repository/{repositoryId}/branches
     - Returns the list of branches from a repository     - examples: [{contentType=application/json, example={
  "_totalNumberOfItems" : 0,
  "_embedded" : {
    "branches" : [ {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/repository" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "repositoryId" : 2,
      "name" : "master",
      "programId" : "14"
    }, {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/repository" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "repositoryId" : 2,
      "name" : "master",
      "programId" : "14"
    } ]
  },
  "_links" : {
    "next" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "prev" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  }
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program. 
     - parameter repositoryId: (path) Identifier of the repository 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<BranchList> 
     */
    public class func getBranchesWithRequestBuilder(programId programId: String, repositoryId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<BranchList> {
        var path = "/api/program/{programId}/repository/{repositoryId}/branches"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{repositoryId}", withString: "\(repositoryId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<BranchList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

}
