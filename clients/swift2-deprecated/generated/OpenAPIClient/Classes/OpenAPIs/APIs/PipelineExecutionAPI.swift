//
// PipelineExecutionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class PipelineExecutionAPI: APIBase {
    /**
     Advance
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func advancePipelineExecution(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        advancePipelineExecutionWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Advance
     - PUT /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance
     - Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 

     - returns: RequestBuilder<Void> 
     */
    public class func advancePipelineExecutionWithRequestBuilder(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: AnyObject) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{executionId}", withString: "\(executionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{phaseId}", withString: "\(phaseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stepId}", withString: "\(stepId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey,
            "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Cancel
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cancelPipelineExecutionStep(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        cancelPipelineExecutionStepWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Cancel
     - PUT /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel
     - Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) Input for advance. See documentation for details. 

     - returns: RequestBuilder<Void> 
     */
    public class func cancelPipelineExecutionStepWithRequestBuilder(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: AnyObject) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{executionId}", withString: "\(executionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{phaseId}", withString: "\(phaseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stepId}", withString: "\(stepId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey,
            "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Get current pipeline execution
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCurrentExecution(programId programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: PipelineExecution?, error: ErrorType?) -> Void)) {
        getCurrentExecutionWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get current pipeline execution
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution
     - Returns current pipeline execution if any.     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "artifactsVersion" : "artifactsVersion",
  "_embedded" : {
    "stepStates" : [ {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/execution" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "environmentType" : "environmentType",
      "stepId" : "stepId",
      "phaseId" : "phaseId",
      "startedAt" : "2000-01-23T04:56:07.000+00:00",
      "repository" : "repository",
      "branch" : "branch",
      "finishedAt" : "2000-01-23T04:56:07.000+00:00",
      "environment" : "environment",
      "action" : "build",
      "details" : "scheduled time",
      "id" : "id",
      "status" : "NOT_STARTED"
    }, {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/execution" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "environmentType" : "environmentType",
      "stepId" : "stepId",
      "phaseId" : "phaseId",
      "startedAt" : "2000-01-23T04:56:07.000+00:00",
      "repository" : "repository",
      "branch" : "branch",
      "finishedAt" : "2000-01-23T04:56:07.000+00:00",
      "environment" : "environment",
      "action" : "build",
      "details" : "scheduled time",
      "id" : "id",
      "status" : "NOT_STARTED"
    } ]
  },
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  },
  "id" : "id",
  "trigger" : "ON_COMMIT",
  "user" : "0123456789ABCDE@AdobeID",
  "programId" : "14",
  "pipelineId" : "10",
  "status" : "NOT_STARTED",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00",
  "finishedAt" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<PipelineExecution> 
     */
    public class func getCurrentExecutionWithRequestBuilder(programId programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineExecution> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<PipelineExecution>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Get pipeline execution
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExecution(programId programId: String, pipelineId: String, executionId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: PipelineExecution?, error: ErrorType?) -> Void)) {
        getExecutionWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get pipeline execution
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}
     - Returns a pipeline execution by id     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "artifactsVersion" : "artifactsVersion",
  "_embedded" : {
    "stepStates" : [ {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/execution" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "environmentType" : "environmentType",
      "stepId" : "stepId",
      "phaseId" : "phaseId",
      "startedAt" : "2000-01-23T04:56:07.000+00:00",
      "repository" : "repository",
      "branch" : "branch",
      "finishedAt" : "2000-01-23T04:56:07.000+00:00",
      "environment" : "environment",
      "action" : "build",
      "details" : "scheduled time",
      "id" : "id",
      "status" : "NOT_STARTED"
    }, {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/execution" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "environmentType" : "environmentType",
      "stepId" : "stepId",
      "phaseId" : "phaseId",
      "startedAt" : "2000-01-23T04:56:07.000+00:00",
      "repository" : "repository",
      "branch" : "branch",
      "finishedAt" : "2000-01-23T04:56:07.000+00:00",
      "environment" : "environment",
      "action" : "build",
      "details" : "scheduled time",
      "id" : "id",
      "status" : "NOT_STARTED"
    } ]
  },
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  },
  "id" : "id",
  "trigger" : "ON_COMMIT",
  "user" : "0123456789ABCDE@AdobeID",
  "programId" : "14",
  "pipelineId" : "10",
  "status" : "NOT_STARTED",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00",
  "finishedAt" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<PipelineExecution> 
     */
    public class func getExecutionWithRequestBuilder(programId programId: String, pipelineId: String, executionId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineExecution> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{executionId}", withString: "\(executionId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<PipelineExecution>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     List Executions
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter start: (query) Pagination start parameter (optional)
     - parameter limit: (query) Pagination limit parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getExecutions(programId programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, start: String? = nil, limit: Int32? = nil, completion: ((data: PipelineExecutionListRepresentation?, error: ErrorType?) -> Void)) {
        getExecutionsWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, start: start, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Executions
     - GET /api/program/{programId}/pipeline/{pipelineId}/executions
     - Returns the history of pipeline executions in a newest to oldest order     - examples: [{contentType=application/json, example={
  "_page" : {
    "next" : 5,
    "prev" : 5,
    "start" : 6,
    "limit" : 1,
    "property" : [ "property", "property" ],
    "orderBy" : "orderBy",
    "type" : "type"
  },
  "_totalNumberOfItems" : 0,
  "_embedded" : {
    "executions" : [ {
      "createdAt" : "2000-01-23T04:56:07.000+00:00",
      "artifactsVersion" : "artifactsVersion",
      "_embedded" : {
        "stepStates" : [ {
          "_links" : {
            "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/program" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "self" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/execution" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            }
          },
          "environmentType" : "environmentType",
          "stepId" : "stepId",
          "phaseId" : "phaseId",
          "startedAt" : "2000-01-23T04:56:07.000+00:00",
          "repository" : "repository",
          "branch" : "branch",
          "finishedAt" : "2000-01-23T04:56:07.000+00:00",
          "environment" : "environment",
          "action" : "build",
          "details" : "scheduled time",
          "id" : "id",
          "status" : "NOT_STARTED"
        }, {
          "_links" : {
            "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/program" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "self" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/execution" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            }
          },
          "environmentType" : "environmentType",
          "stepId" : "stepId",
          "phaseId" : "phaseId",
          "startedAt" : "2000-01-23T04:56:07.000+00:00",
          "repository" : "repository",
          "branch" : "branch",
          "finishedAt" : "2000-01-23T04:56:07.000+00:00",
          "environment" : "environment",
          "action" : "build",
          "details" : "scheduled time",
          "id" : "id",
          "status" : "NOT_STARTED"
        } ]
      },
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "id" : "id",
      "trigger" : "ON_COMMIT",
      "user" : "0123456789ABCDE@AdobeID",
      "programId" : "14",
      "pipelineId" : "10",
      "status" : "NOT_STARTED",
      "updatedAt" : "2000-01-23T04:56:07.000+00:00",
      "finishedAt" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "createdAt" : "2000-01-23T04:56:07.000+00:00",
      "artifactsVersion" : "artifactsVersion",
      "_embedded" : {
        "stepStates" : [ {
          "_links" : {
            "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/program" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "self" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/execution" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            }
          },
          "environmentType" : "environmentType",
          "stepId" : "stepId",
          "phaseId" : "phaseId",
          "startedAt" : "2000-01-23T04:56:07.000+00:00",
          "repository" : "repository",
          "branch" : "branch",
          "finishedAt" : "2000-01-23T04:56:07.000+00:00",
          "environment" : "environment",
          "action" : "build",
          "details" : "scheduled time",
          "id" : "id",
          "status" : "NOT_STARTED"
        }, {
          "_links" : {
            "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/program" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "self" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            },
            "http://ns.adobe.com/adobecloud/rel/execution" : {
              "hreflang" : "hreflang",
              "templated" : false,
              "profile" : "profile",
              "name" : "name",
              "href" : "href",
              "type" : "type",
              "deprecation" : "deprecation",
              "title" : "title"
            }
          },
          "environmentType" : "environmentType",
          "stepId" : "stepId",
          "phaseId" : "phaseId",
          "startedAt" : "2000-01-23T04:56:07.000+00:00",
          "repository" : "repository",
          "branch" : "branch",
          "finishedAt" : "2000-01-23T04:56:07.000+00:00",
          "environment" : "environment",
          "action" : "build",
          "details" : "scheduled time",
          "id" : "id",
          "status" : "NOT_STARTED"
        } ]
      },
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "id" : "id",
      "trigger" : "ON_COMMIT",
      "user" : "0123456789ABCDE@AdobeID",
      "programId" : "14",
      "pipelineId" : "10",
      "status" : "NOT_STARTED",
      "updatedAt" : "2000-01-23T04:56:07.000+00:00",
      "finishedAt" : "2000-01-23T04:56:07.000+00:00"
    } ]
  },
  "_links" : {
    "next" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "prev" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "page" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  }
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter start: (query) Pagination start parameter (optional)
     - parameter limit: (query) Pagination limit parameter (optional)

     - returns: RequestBuilder<PipelineExecutionListRepresentation> 
     */
    public class func getExecutionsWithRequestBuilder(programId programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, start: String? = nil, limit: Int32? = nil) -> RequestBuilder<PipelineExecutionListRepresentation> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/executions"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "start": start,
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<PipelineExecutionListRepresentation>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Get logs
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter file: (query) Identifier of the log file (optional)
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getStepLogs(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, file: String? = nil, accept: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        getStepLogsWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, file: file, accept: accept).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get logs
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs
     - Get the logs associated with a step.     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter file: (query) Identifier of the log file (optional)
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getStepLogsWithRequestBuilder(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, file: String? = nil, accept: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{executionId}", withString: "\(executionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{phaseId}", withString: "\(phaseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stepId}", withString: "\(stepId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "file": file
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "Accept": accept,
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Start the pipeline
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func startPipeline(programId programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, completion: ((error: ErrorType?) -> Void)) {
        startPipelineWithRequestBuilder(programId: programId, pipelineId: pipelineId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Start the pipeline
     - PUT /api/program/{programId}/pipeline/{pipelineId}/execution
     - Starts the Pipeline. This works only if the pipeline is not already started.     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 

     - returns: RequestBuilder<Void> 
     */
    public class func startPipelineWithRequestBuilder(programId programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey,
            "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Get step metrics
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func stepMetric(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: PipelineStepMetrics?, error: ErrorType?) -> Void)) {
        stepMetricWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get step metrics
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics     - examples: [{contentType=application/json, example={
  "metrics" : [ {
    "severity" : "critical",
    "comparator" : "GT",
    "kpi" : "kpi",
    "actualValue" : "actualValue",
    "expectedValue" : "expectedValue",
    "id" : "id",
    "passed" : false,
    "override" : false
  }, {
    "severity" : "critical",
    "comparator" : "GT",
    "kpi" : "kpi",
    "actualValue" : "actualValue",
    "expectedValue" : "expectedValue",
    "id" : "id",
    "passed" : false,
    "override" : false
  } ]
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<PipelineStepMetrics> 
     */
    public class func stepMetricWithRequestBuilder(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineStepMetrics> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{executionId}", withString: "\(executionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{phaseId}", withString: "\(phaseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stepId}", withString: "\(stepId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<PipelineStepMetrics>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Get step state
     
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func stepState(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: PipelineExecutionStepState?, error: ErrorType?) -> Void)) {
        stepStateWithRequestBuilder(programId: programId, pipelineId: pipelineId, executionId: executionId, phaseId: phaseId, stepId: stepId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get step state
     - GET /api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}     - examples: [{contentType=application/json, example={
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/pipeline/advance" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline/logs" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline/cancel" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline/metrics" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/execution" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  },
  "environmentType" : "environmentType",
  "stepId" : "stepId",
  "phaseId" : "phaseId",
  "startedAt" : "2000-01-23T04:56:07.000+00:00",
  "repository" : "repository",
  "branch" : "branch",
  "finishedAt" : "2000-01-23T04:56:07.000+00:00",
  "environment" : "environment",
  "action" : "build",
  "details" : "scheduled time",
  "id" : "id",
  "status" : "NOT_STARTED"
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program. 
     - parameter pipelineId: (path) Identifier of the pipeline 
     - parameter executionId: (path) Identifier of the execution 
     - parameter phaseId: (path) Identifier of the phase 
     - parameter stepId: (path) Identifier of the step 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<PipelineExecutionStepState> 
     */
    public class func stepStateWithRequestBuilder(programId programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<PipelineExecutionStepState> {
        var path = "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{pipelineId}", withString: "\(pipelineId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{executionId}", withString: "\(executionId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{phaseId}", withString: "\(phaseId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stepId}", withString: "\(stepId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<PipelineExecutionStepState>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

}
