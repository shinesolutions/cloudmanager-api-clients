//
// EnvironmentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class EnvironmentsAPI: APIBase {
    /**
     DeleteEnvironment
     
     - parameter programId: (path) Identifier of the application 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteEnvironment(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: Environment?, error: ErrorType?) -> Void)) {
        deleteEnvironmentWithRequestBuilder(programId: programId, environmentId: environmentId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     DeleteEnvironment
     - DELETE /api/program/{programId}/environment/{environmentId}
     - Delete environment     - examples: [{contentType=application/json, example={
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/author" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/publish" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/variables" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/developerConsole" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/logs" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  },
  "name" : "AcmeCorp Dev1 Environment",
  "description" : "This is our primary development environment",
  "id" : "id",
  "type" : "dev",
  "programId" : "14"
}, statusCode=201}]
     - parameter programId: (path) Identifier of the application 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<Environment> 
     */
    public class func deleteEnvironmentWithRequestBuilder(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Environment> {
        var path = "/api/program/{programId}/environment/{environmentId}"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{environmentId}", withString: "\(environmentId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Environment>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Download Logs
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter service: (query) Name of service 
     - parameter name: (query) Name of log 
     - parameter date: (query) date for which log is required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func downloadLogs(programId programId: String, environmentId: String, service: String, name: String, date: String, xGwImsOrgId: String, authorization: String, xApiKey: String, accept: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        downloadLogsWithRequestBuilder(programId: programId, environmentId: environmentId, service: service, name: name, date: date, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, accept: accept).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Download Logs
     - GET /api/program/{programId}/environment/{environmentId}/logs/download
     - Download environment logs     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter service: (query) Name of service 
     - parameter name: (query) Name of log 
     - parameter date: (query) date for which log is required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter accept: (header) Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func downloadLogsWithRequestBuilder(programId programId: String, environmentId: String, service: String, name: String, date: String, xGwImsOrgId: String, authorization: String, xApiKey: String, accept: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/program/{programId}/environment/{environmentId}/logs/download"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{environmentId}", withString: "\(environmentId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "service": service,
            "name": name,
            "date": date
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey,
            "Accept": accept
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     Get Environment
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEnvironment(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: Environment?, error: ErrorType?) -> Void)) {
        getEnvironmentWithRequestBuilder(programId: programId, environmentId: environmentId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Environment
     - GET /api/program/{programId}/environment/{environmentId}
     - Returns an environment by its id     - examples: [{contentType=application/json, example={
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/author" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/publish" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/variables" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/pipeline" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/developerConsole" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/logs" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  },
  "name" : "AcmeCorp Dev1 Environment",
  "description" : "This is our primary development environment",
  "id" : "id",
  "type" : "dev",
  "programId" : "14"
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<Environment> 
     */
    public class func getEnvironmentWithRequestBuilder(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<Environment> {
        var path = "/api/program/{programId}/environment/{environmentId}"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{environmentId}", withString: "\(environmentId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<Environment>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Get Environment Logs
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter days: (query) number of days for which logs are required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter service: (query) Names of services (optional)
     - parameter name: (query) Names of log (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEnvironmentLogs(programId programId: String, environmentId: String, days: Int32, xGwImsOrgId: String, authorization: String, xApiKey: String, service: [String]? = nil, name: [String]? = nil, completion: ((data: EnvironmentLogs?, error: ErrorType?) -> Void)) {
        getEnvironmentLogsWithRequestBuilder(programId: programId, environmentId: environmentId, days: days, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, service: service, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Environment Logs
     - GET /api/program/{programId}/environment/{environmentId}/logs
     - List all logs available in environment     - examples: [{contentType=application/json, example={
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  },
  "_embedded" : {
    "downloads" : [ {
      "date" : "2019-04-05",
      "environmentId" : 6,
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/logs/tail" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/logs/download" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "service" : "author",
      "name" : "aemerror",
      "programId" : 0
    }, {
      "date" : "2019-04-05",
      "environmentId" : 6,
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/logs/tail" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/logs/download" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "service" : "author",
      "name" : "aemerror",
      "programId" : 0
    } ]
  },
  "service" : "author",
  "name" : "aemerror",
  "days" : 2
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter days: (query) number of days for which logs are required 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter service: (query) Names of services (optional)
     - parameter name: (query) Names of log (optional)

     - returns: RequestBuilder<EnvironmentLogs> 
     */
    public class func getEnvironmentLogsWithRequestBuilder(programId programId: String, environmentId: String, days: Int32, xGwImsOrgId: String, authorization: String, xApiKey: String, service: [String]? = nil, name: [String]? = nil) -> RequestBuilder<EnvironmentLogs> {
        var path = "/api/program/{programId}/environment/{environmentId}/logs"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{environmentId}", withString: "\(environmentId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "service": service,
            "name": name,
            "days": days.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<EnvironmentLogs>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getEnvironments: String { 
        case Dev = "dev"
        case Stage = "stage"
        case Prod = "prod"
    }

    /**
     List Environments
     
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter type: (query) Type of the environment (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEnvironments(programId programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, type: ModelType_getEnvironments? = nil, completion: ((data: EnvironmentList?, error: ErrorType?) -> Void)) {
        getEnvironmentsWithRequestBuilder(programId: programId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, type: type).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Environments
     - GET /api/program/{programId}/environments
     - Lists all environments in an program     - examples: [{contentType=application/json, example={
  "_totalNumberOfItems" : 0,
  "_embedded" : {
    "environments" : [ {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/author" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/publish" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/variables" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/developerConsole" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/logs" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "name" : "AcmeCorp Dev1 Environment",
      "description" : "This is our primary development environment",
      "id" : "id",
      "type" : "dev",
      "programId" : "14"
    }, {
      "_links" : {
        "http://ns.adobe.com/adobecloud/rel/author" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/publish" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/variables" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/program" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/pipeline" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/developerConsole" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "self" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        },
        "http://ns.adobe.com/adobecloud/rel/logs" : {
          "hreflang" : "hreflang",
          "templated" : false,
          "profile" : "profile",
          "name" : "name",
          "href" : "href",
          "type" : "type",
          "deprecation" : "deprecation",
          "title" : "title"
        }
      },
      "name" : "AcmeCorp Dev1 Environment",
      "description" : "This is our primary development environment",
      "id" : "id",
      "type" : "dev",
      "programId" : "14"
    } ]
  },
  "_links" : {
    "next" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "prev" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  }
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter type: (query) Type of the environment (optional)

     - returns: RequestBuilder<EnvironmentList> 
     */
    public class func getEnvironmentsWithRequestBuilder(programId programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, type: ModelType_getEnvironments? = nil) -> RequestBuilder<EnvironmentList> {
        var path = "/api/program/{programId}/environments"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "type": type?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<EnvironmentList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

}
