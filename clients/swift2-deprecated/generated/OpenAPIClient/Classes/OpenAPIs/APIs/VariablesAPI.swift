//
// VariablesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class VariablesAPI: APIBase {
    /**
     List User Environment Variables
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEnvironmentVariables(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, completion: ((data: VariableList?, error: ErrorType?) -> Void)) {
        getEnvironmentVariablesWithRequestBuilder(programId: programId, environmentId: environmentId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List User Environment Variables
     - GET /api/program/{programId}/environment/{environmentId}/variables
     - List the user defined variables for an environment (Cloud Service only).     - examples: [{contentType=application/json, example={
  "_totalNumberOfItems" : 1,
  "_embedded" : {
    "variables" : "[{ 'name':'variable1Name', 'value':'variable1Value'}, { 'name':'variable2Name', 'type':'secretString', 'value':'variable2SecretValue'}]"
  },
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/environment" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  }
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 

     - returns: RequestBuilder<VariableList> 
     */
    public class func getEnvironmentVariablesWithRequestBuilder(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String) -> RequestBuilder<VariableList> {
        var path = "/api/program/{programId}/environment/{environmentId}/variables"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{environmentId}", withString: "\(environmentId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<VariableList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**
     Patch User Environment Variables
     
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchEnvironmentVariables(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: [Variable], completion: ((data: VariableList?, error: ErrorType?) -> Void)) {
        patchEnvironmentVariablesWithRequestBuilder(programId: programId, environmentId: environmentId, xGwImsOrgId: xGwImsOrgId, authorization: authorization, xApiKey: xApiKey, contentType: contentType, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch User Environment Variables
     - PATCH /api/program/{programId}/environment/{environmentId}/variables
     - Modify multiple environment variables (Cloud Service only). To delete a variable, include it with an empty value.     - examples: [{contentType=application/json, example={
  "_totalNumberOfItems" : 1,
  "_embedded" : {
    "variables" : "[{ 'name':'variable1Name', 'value':'variable1Value'}, { 'name':'variable2Name', 'type':'secretString', 'value':'variable2SecretValue'}]"
  },
  "_links" : {
    "http://ns.adobe.com/adobecloud/rel/program" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "http://ns.adobe.com/adobecloud/rel/environment" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    },
    "self" : {
      "hreflang" : "hreflang",
      "templated" : false,
      "profile" : "profile",
      "name" : "name",
      "href" : "href",
      "type" : "type",
      "deprecation" : "deprecation",
      "title" : "title"
    }
  }
}, statusCode=200}]
     - parameter programId: (path) Identifier of the program 
     - parameter environmentId: (path) Identifier of the environment 
     - parameter xGwImsOrgId: (header) IMS organization ID that the request is being made under. 
     - parameter authorization: (header) Bearer [token] - An access token for the technical account created through integration with Adobe IO 
     - parameter xApiKey: (header) IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
     - parameter contentType: (header) Must always be application/json 
     - parameter body: (body) The list of variables to add, modify, or remove. It is not necessary to send variables here which are not changing. 

     - returns: RequestBuilder<VariableList> 
     */
    public class func patchEnvironmentVariablesWithRequestBuilder(programId programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: [Variable]) -> RequestBuilder<VariableList> {
        var path = "/api/program/{programId}/environment/{environmentId}/variables"
        path = path.stringByReplacingOccurrencesOfString("{programId}", withString: "\(programId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{environmentId}", withString: "\(environmentId)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "x-gw-ims-org-id": xGwImsOrgId,
            "Authorization": authorization,
            "x-api-key": xApiKey,
            "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<VariableList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

}
