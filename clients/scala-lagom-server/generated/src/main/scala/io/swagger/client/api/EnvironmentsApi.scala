/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.swagger.client.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import io.swagger.client.model.BadRequestError
import io.swagger.client.model.Environment
import io.swagger.client.model.EnvironmentList
import io.swagger.client.model.EnvironmentLogs

trait EnvironmentsApi extends Service {


  final override def descriptor = {
    import Service._
    named("EnvironmentsApi").withCalls(
      restCall(Method.DELETE, "/api/program/:programId/environment/:environmentId", deleteEnvironment _), 
      restCall(Method.GET, "/api/program/:programId/environment/:environmentId/logs/download?service&name&date", downloadLogs _), 
      restCall(Method.GET, "/api/program/:programId/environment/:environmentId", getEnvironment _), 
      restCall(Method.GET, "/api/program/:programId/environment/:environmentId/logs?service&name&days", getEnvironmentLogs _), 
      restCall(Method.GET, "/api/program/:programId/environments?`type`", getEnvironments _)
    ).withAutoAcl(true)
  }




  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  /**
    * DeleteEnvironment
    * Delete environment
    *  
    * @param programId Identifier of the application  
    * @param environmentId Identifier of the environment  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
    * @return Environment
    */
  def deleteEnvironment(programId: String, environmentId: String): ServiceCall[NotUsed ,Environment]
        





  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  // accept:String  -- not yet supported heder params
  /**
    * Download Logs
    * Download environment logs
    *  
    * @param programId Identifier of the program  
    * @param environmentId Identifier of the environment  
    * @param service Name of service  
    * @param name Name of log  
    * @param date date for which log is required  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
    * @return void
    */
  def downloadLogs(service:String          ,name:String          ,date:String          programId: String, environmentId: String): ServiceCall[NotUsed ,Done]
  


  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  /**
    * Get Environment
    * Returns an environment by its id
    *  
    * @param programId Identifier of the program  
    * @param environmentId Identifier of the environment  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
    * @return Environment
    */
  def getEnvironment(programId: String, environmentId: String): ServiceCall[NotUsed ,Environment]
        
  // service:Seq[String]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  // name:Seq[String]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      



  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params


  /**
    * Get Environment Logs
    * List all logs available in environment
    *  
    * @param programId Identifier of the program  
    * @param environmentId Identifier of the environment  
    * @param days number of days for which logs are required  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param service Names of services (optional, default to new ListBuffer[String]() ) 
    * @param name Names of log (optional, default to new ListBuffer[String]() )
    * @return EnvironmentLogs
    */
  def getEnvironmentLogs(days:Int          programId: String, environmentId: String): ServiceCall[NotUsed ,EnvironmentLogs]
        

  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params

  /**
    * List Environments
    * Lists all environments in an program
    *  
    * @param programId Identifier of the program  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param `type` Type of the environment (optional)
    * @return EnvironmentList
    */
  def getEnvironments(`type`: Option[EnvironmentsApi&#x60;type&#x60;Enum.EnvironmentsApi&#x60;type&#x60;Enum]programId: String): ServiceCall[NotUsed ,EnvironmentList]
  

        object EnvironmentsApi&#x60;type&#x60;Enum extends Enumeration {
        val   dev, stage, prod = Value     
        type EnvironmentsApi&#x60;type&#x60;Enum = Value
        implicit val format: Format[Value] = Format(Reads.enumNameReads(this), Writes.enumNameWrites[EnvironmentsApi&#x60;type&#x60;Enum.type])
        implicit val pathParamSerializer: PathParamSerializer[EnvironmentsApi&#x60;type&#x60;Enum] = PathParamSerializer.required("EnvironmentsApi&#x60;type&#x60;Enum")(withName)(_.toString)
        }
  }

