/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.swagger.client.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import io.swagger.client.model.PipelineExecution
import io.swagger.client.model.PipelineExecutionListRepresentation
import io.swagger.client.model.PipelineExecutionStepState
import io.swagger.client.model.PipelineStepMetrics

trait PipelineExecutionApi extends Service {


  final override def descriptor = {
    import Service._
    named("PipelineExecutionApi").withCalls(
      restCall(Method.PUT, "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/advance", advancePipelineExecution _), 
      restCall(Method.PUT, "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/cancel", cancelPipelineExecutionStep _), 
      restCall(Method.GET, "/api/program/:programId/pipeline/:pipelineId/execution", getCurrentExecution _), 
      restCall(Method.GET, "/api/program/:programId/pipeline/:pipelineId/execution/:executionId", getExecution _), 
      restCall(Method.GET, "/api/program/:programId/pipeline/:pipelineId/executions?start&limit", getExecutions _), 
      restCall(Method.GET, "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/logs?file", getStepLogs _), 
      restCall(Method.PUT, "/api/program/:programId/pipeline/:pipelineId/execution", startPipeline _), 
      restCall(Method.GET, "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId/metrics", stepMetric _), 
      restCall(Method.GET, "/api/program/:programId/pipeline/:pipelineId/execution/:executionId/phase/:phaseId/step/:stepId", stepState _)
    ).withAutoAcl(true)
  }







  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  // `contentType`:String  -- not yet supported heder params

  /**
    * Advance
    * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param executionId Identifier of the execution  
    * @param phaseId Identifier of the phase  
    * @param stepId Identifier of the step  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param `contentType` Must always be application/json  
    * @return void Body Parameter  Input for advance. See documentation for details. 
    */
  def advancePipelineExecution(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String): ServiceCall[Any ,Done]
  





  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  // `contentType`:String  -- not yet supported heder params

  /**
    * Cancel
    * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param executionId Identifier of the execution  
    * @param phaseId Identifier of the phase  
    * @param stepId Identifier of the step  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param `contentType` Must always be application/json  
    * @return void Body Parameter  Input for advance. See documentation for details. 
    */
  def cancelPipelineExecutionStep(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String): ServiceCall[Any ,Done]
  


  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  /**
    * Get current pipeline execution
    * Returns current pipeline execution if any.
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
    * @return PipelineExecution
    */
  def getCurrentExecution(programId: String, pipelineId: String): ServiceCall[NotUsed ,PipelineExecution]
  



  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  /**
    * Get pipeline execution
    * Returns a pipeline execution by id
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param executionId Identifier of the execution  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
    * @return PipelineExecution
    */
  def getExecution(programId: String, pipelineId: String, executionId: String): ServiceCall[NotUsed ,PipelineExecution]
        


  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params


  /**
    * List Executions
    * Returns the history of pipeline executions in a newest to oldest order
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param start Pagination start parameter (optional) 
    * @param limit Pagination limit parameter (optional)
    * @return PipelineExecutionListRepresentation
    */
  def getExecutions(start:           Option[String] = None,limit:           Option[Int] = NoneprogramId: String, pipelineId: String): ServiceCall[NotUsed ,PipelineExecutionListRepresentation]
        





  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params

  // accept:String  -- not yet supported heder params
  /**
    * Get logs
    * Get the logs associated with a step.
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param executionId Identifier of the execution  
    * @param phaseId Identifier of the phase  
    * @param stepId Identifier of the step  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param file Identifier of the log file (optional) 
    * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header. (optional)
    * @return void
    */
  def getStepLogs(file:           Option[String] = NoneprogramId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String): ServiceCall[NotUsed ,Done]
  


  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  // `contentType`:String  -- not yet supported heder params
  /**
    * Start the pipeline
    * Starts the Pipeline. This works only if the pipeline is not already started.
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io  
    * @param `contentType` Must always be application/json 
    * @return void
    */
  def startPipeline(programId: String, pipelineId: String): ServiceCall[NotUsed ,Done]
  





  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  /**
    * Get step metrics
    * 
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param executionId Identifier of the execution  
    * @param phaseId Identifier of the phase  
    * @param stepId Identifier of the step  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
    * @return PipelineStepMetrics
    */
  def stepMetric(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String): ServiceCall[NotUsed ,PipelineStepMetrics]
  





  // xGwImsOrgId:String  -- not yet supported heder params
  // authorization:String  -- not yet supported heder params
  // xApiKey:String  -- not yet supported heder params
  /**
    * Get step state
    * 
    *  
    * @param programId Identifier of the program.  
    * @param pipelineId Identifier of the pipeline  
    * @param executionId Identifier of the execution  
    * @param phaseId Identifier of the phase  
    * @param stepId Identifier of the step  
    * @param xGwImsOrgId IMS organization ID that the request is being made under.  
    * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO  
    * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io 
    * @return PipelineExecutionStepState
    */
  def stepState(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String): ServiceCall[NotUsed ,PipelineExecutionStepState]
  

  }

