<?php

/**
 * SlimRouter
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\Factory\AppFactory;
use Slim\Interfaces\RouteInterface;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use OpenAPIServer\Middleware\JsonBodyParserMiddleware;
use OpenAPIServer\Mock\OpenApiDataMocker;
use OpenAPIServer\Mock\OpenApiDataMockerMiddleware;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/repository/{repositoryId}/branches',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBranchesApi',
            'userClassname' => 'BranchesApi',
            'operationId' => 'getBranches',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of the list of repository branches',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of the list of repository branches",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/branchList"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environment/{environmentId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEnvironmentsApi',
            'userClassname' => 'EnvironmentsApi',
            'operationId' => 'deleteEnvironment',
            'responses' => [
                'default' => [
                    'code' => 201,
                    'message' => 'Environment deleted',
                    'jsonSchema' => '{
  "description" : "Environment deleted",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Environment"
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Environment deletion in progress',
                    'jsonSchema' => '{
  "description" : "Environment deletion in progress",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/BadRequestError"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Environment not found',
                    'jsonSchema' => '{
  "description" : "Environment not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environment/{environmentId}/logs/download',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEnvironmentsApi',
            'userClassname' => 'EnvironmentsApi',
            'operationId' => 'downloadLogs',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of logs',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of logs",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'invalid parameters',
                    'jsonSchema' => '{
  "description" : "invalid parameters",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/BadRequestError"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Environment not found',
                    'jsonSchema' => '{
  "description" : "Environment not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environment/{environmentId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEnvironmentsApi',
            'userClassname' => 'EnvironmentsApi',
            'operationId' => 'getEnvironment',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Environment"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environment/{environmentId}/logs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEnvironmentsApi',
            'userClassname' => 'EnvironmentsApi',
            'operationId' => 'getEnvironmentLogs',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of logs for an environment',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of logs for an environment",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/EnvironmentLogs"
      }
    }
  }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'invalid parameters',
                    'jsonSchema' => '{
  "description" : "invalid parameters",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/BadRequestError"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Environment not found',
                    'jsonSchema' => '{
  "description" : "Environment not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environments',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractEnvironmentsApi',
            'userClassname' => 'EnvironmentsApi',
            'operationId' => 'getEnvironments',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of environment list',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of environment list",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/environmentList"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Program not found',
                    'jsonSchema' => '{
  "description" : "Program not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'advancePipelineExecution',
            'responses' => [
                'default' => [
                    'code' => 202,
                    'message' => 'Successful resume of pipeline execution',
                    'jsonSchema' => '{
  "description" : "Successful resume of pipeline execution",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Missing permission for user to advance the pipeline execution',
                    'jsonSchema' => '{
  "description" : "Missing permission for user to advance the pipeline execution",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'No pipeline execution exits or unknown pipeline or program',
                    'jsonSchema' => '{
  "description" : "No pipeline execution exits or unknown pipeline or program",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'cancelPipelineExecutionStep',
            'responses' => [
                'default' => [
                    'code' => 202,
                    'message' => 'Successful cancel of pipeline execution',
                    'jsonSchema' => '{
  "description" : "Successful cancel of pipeline execution",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Missing permission for user to cancel the current pipeline execution',
                    'jsonSchema' => '{
  "description" : "Missing permission for user to cancel the current pipeline execution",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'No pipeline execution exits or unknown pipeline or program',
                    'jsonSchema' => '{
  "description" : "No pipeline execution exits or unknown pipeline or program",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'getCurrentExecution',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of current execution',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of current execution",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/pipelineExecution"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'No pipeline execution exits or unknown pipeline or program',
                    'jsonSchema' => '{
  "description" : "No pipeline execution exits or unknown pipeline or program",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'getExecution',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of execution',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of execution",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/pipelineExecution"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'No pipeline execution exits or unknown pipeline or application',
                    'jsonSchema' => '{
  "description" : "No pipeline execution exits or unknown pipeline or application",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/executions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'getExecutions',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of execution history',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of execution history",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PipelineExecutionListRepresentation"
      }
    }
  }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Missing permission for user to read executions',
                    'jsonSchema' => '{
  "description" : "Missing permission for user to read executions",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pipeline does not exist',
                    'jsonSchema' => '{
  "description" : "Pipeline does not exist",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'getStepLogs',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of logs',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of logs",
  "content" : { }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Missing permission for user to read logs',
                    'jsonSchema' => '{
  "description" : "Missing permission for user to read logs",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pipeline execution does not exist',
                    'jsonSchema' => '{
  "description" : "Pipeline execution does not exist",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'startPipeline',
            'responses' => [
                'default' => [
                    'code' => 201,
                    'message' => 'Successful started pipeline execution',
                    'jsonSchema' => '{
  "description" : "Successful started pipeline execution",
  "content" : { }
}',
                ],
                '400' => [
                    'code' => 400,
                    'message' => 'Request conflicts with the expected state of pipeline',
                    'jsonSchema' => '{
  "description" : "Request conflicts with the expected state of pipeline",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'No pipeline execution exits or unknown pipeline or application',
                    'jsonSchema' => '{
  "description" : "No pipeline execution exits or unknown pipeline or application",
  "content" : { }
}',
                ],
                '412' => [
                    'code' => 412,
                    'message' => 'Cannot start execution: programId&#x3D;{programId}, pipelineId&#x3D;{pipelineId} currentExecutionId&#x3D;{executionId}, reason&#x3D;&#39;Execution already in progress.',
                    'jsonSchema' => '{
  "description" : "Cannot start execution: programId={programId}, pipelineId={pipelineId} currentExecutionId={executionId}, reason='Execution already in progress.",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'stepMetric',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of metrics',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of metrics",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/pipelineStepMetrics"
      }
    }
  }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Missing permission for user to read metrics',
                    'jsonSchema' => '{
  "description" : "Missing permission for user to read metrics",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pipeline execution does not exist',
                    'jsonSchema' => '{
  "description" : "Pipeline execution does not exist",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelineExecutionApi',
            'userClassname' => 'PipelineExecutionApi',
            'operationId' => 'stepState',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of step state',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of step state",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/pipelineExecutionStepState"
      }
    }
  }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Missing permission for user to read step',
                    'jsonSchema' => '{
  "description" : "Missing permission for user to read step",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pipeline execution does not exist',
                    'jsonSchema' => '{
  "description" : "Pipeline execution does not exist",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelinesApi',
            'userClassname' => 'PipelinesApi',
            'operationId' => 'deletePipeline',
            'responses' => [
                'default' => [
                    'code' => 0,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelinesApi',
            'userClassname' => 'PipelinesApi',
            'operationId' => 'getPipeline',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of pipeline',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of pipeline",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pipeline"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Pipeline not found',
                    'jsonSchema' => '{
  "description" : "Pipeline not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipelines',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelinesApi',
            'userClassname' => 'PipelinesApi',
            'operationId' => 'getPipelines',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/pipelineList"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/pipeline/{pipelineId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractPipelinesApi',
            'userClassname' => 'PipelinesApi',
            'operationId' => 'patchPipeline',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Pipeline"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/programs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractProgramsApi',
            'userClassname' => 'ProgramsApi',
            'operationId' => 'getPrograms',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/programList"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractProgramsApi',
            'userClassname' => 'ProgramsApi',
            'operationId' => 'deleteProgram',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Program"
      }
    }
  }
}',
                ],
                '202' => [
                    'code' => 202,
                    'message' => 'Delete was successful.',
                    'jsonSchema' => '{
  "description" : "Delete was successful.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Program"
      }
    }
  }
}',
                ],
                '403' => [
                    'code' => 403,
                    'message' => 'Forbidden.',
                    'jsonSchema' => '{
  "description" : "Forbidden.",
  "content" : { }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Program not found.',
                    'jsonSchema' => '{
  "description" : "Program not found.",
  "content" : { }
}',
                ],
                '412' => [
                    'code' => 412,
                    'message' => 'Deletion not supported',
                    'jsonSchema' => '{
  "description" : "Deletion not supported",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractProgramsApi',
            'userClassname' => 'ProgramsApi',
            'operationId' => 'getProgram',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of program',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of program",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Program"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Program not found',
                    'jsonSchema' => '{
  "description" : "Program not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/repositories',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRepositoriesApi',
            'userClassname' => 'RepositoriesApi',
            'operationId' => 'getRepositories',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/repositoryList"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/repository/{repositoryId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRepositoriesApi',
            'userClassname' => 'RepositoriesApi',
            'operationId' => 'getRepository',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'successful operation',
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Repository"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environment/{environmentId}/variables',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractVariablesApi',
            'userClassname' => 'VariablesApi',
            'operationId' => 'getEnvironmentVariables',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful retrieval of environment variables',
                    'jsonSchema' => '{
  "description" : "Successful retrieval of environment variables",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/variableList"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Environment not found',
                    'jsonSchema' => '{
  "description" : "Environment not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/api/program/{programId}/environment/{environmentId}/variables',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractVariablesApi',
            'userClassname' => 'VariablesApi',
            'operationId' => 'patchEnvironmentVariables',
            'responses' => [
                'default' => [
                    'code' => 200,
                    'message' => 'Successful update of environment variables',
                    'jsonSchema' => '{
  "description" : "Successful update of environment variables",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/variableList"
      }
    }
  }
}',
                ],
                '404' => [
                    'code' => 404,
                    'message' => 'Environment not found',
                    'jsonSchema' => '{
  "description" : "Environment not found",
  "content" : { }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws Exception When implementation class doesn't exists
     */
    public function __construct($settings = [])
    {
        if ($settings instanceof ContainerInterface) {
            // Set container to create App with on AppFactory
            AppFactory::setContainer($settings);
        }
        $this->slimApp = AppFactory::create();

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();


        $userOptions = $this->getSetting($settings, 'tokenAuthenticationOptions', null);

        // mocker options
        $mockerOptions = $this->getSetting($settings, 'mockerOptions', null);
        $dataMocker = $mockerOptions['dataMocker'] ?? new OpenApiDataMocker();
        $getMockResponseCallback = $mockerOptions['getMockResponseCallback'] ?? null;
        $mockAfterCallback = $mockerOptions['afterCallback'] ?? null;

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new Exception($message);
                $response->getBody()->write($message);
                return $response->withStatus(501);
            };
            $middlewares = [new JsonBodyParserMiddleware()];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }


            if (is_callable($getMockResponseCallback)) {
                $middlewares[] = new OpenApiDataMockerMiddleware($dataMocker, $operation['responses'], $getMockResponseCallback, $mockAfterCallback);
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $staticOptions Required static options
     * @param array $userOptions   User options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $staticOptions, array $userOptions = null)
    {
        if (is_array($userOptions) === false) {
            return $staticOptions;
        }

        return array_merge($userOptions, $staticOptions);
    }

    /**
     * Returns app setting by name.
     *
     * @param ContainerInterface|array $settings    Either a ContainerInterface or an associative array of app settings
     * @param string                   $settingName Setting name
     * @param mixed                    $default     Default setting value.
     *
     * @return mixed
     */
    private function getSetting($settings, $settingName, $default = null)
    {
        if ($settings instanceof ContainerInterface && $settings->has($settingName)) {
            return $settings->get($settingName);
        } elseif (is_array($settings) && array_key_exists($settingName, $settings)) {
            return $settings[$settingName];
        }

        return $default;
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
