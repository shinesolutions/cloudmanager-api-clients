<?php

/**
 * Pipeline
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 */
namespace OpenAPIServer\Model;

use OpenAPIServer\Interfaces\ModelInterface;

/**
 * Pipeline
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class Pipeline implements ModelInterface
{
    private const MODEL_SCHEMA = <<<'SCHEMA'
{
  "required" : [ "name", "phases" ],
  "type" : "object",
  "properties" : {
    "id" : {
      "type" : "string",
      "description" : "Identifier of the pipeline. Unique within the program.",
      "example" : "29"
    },
    "programId" : {
      "type" : "string",
      "description" : "Identifier of the program. Unique within the space.",
      "example" : "14"
    },
    "name" : {
      "type" : "string",
      "description" : "Name of the pipeline",
      "example" : "AcmeCorp Main Pipeline"
    },
    "trigger" : {
      "type" : "string",
      "description" : "How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}",
      "example" : "MANUAL",
      "enum" : [ "ON_COMMIT", "MANUAL", "SCHEDULE" ]
    },
    "status" : {
      "type" : "string",
      "description" : "Pipeline status",
      "example" : "RUNNING,FAILED",
      "enum" : [ "IDLE", "BUSY", "WAITING" ]
    },
    "createdAt" : {
      "type" : "string",
      "description" : "Create date",
      "format" : "date-time",
      "readOnly" : true
    },
    "updatedAt" : {
      "type" : "string",
      "description" : "Update date",
      "format" : "date-time",
      "readOnly" : true
    },
    "lastStartedAt" : {
      "type" : "string",
      "description" : "Last pipeline execution start",
      "format" : "date-time",
      "readOnly" : true
    },
    "lastFinishedAt" : {
      "type" : "string",
      "description" : "Last pipeline execution end",
      "format" : "date-time",
      "readOnly" : true
    },
    "phases" : {
      "maxItems" : 100,
      "minItems" : 1,
      "type" : "array",
      "description" : "Pipeline phases in execution order",
      "items" : {
        "$ref" : "#/components/schemas/pipelinePhase"
      }
    },
    "_links" : {
      "$ref" : "#/components/schemas/Pipeline__links"
    }
  },
  "description" : "Describes a __CI/CD Pipeline__"
}
SCHEMA;

    /** @var string $id Identifier of the pipeline. Unique within the program.*/
    private $id;

    /** @var string $programId Identifier of the program. Unique within the space.*/
    private $programId;

    /** @var string $name Name of the pipeline*/
    private $name;

    /** @var string $trigger How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}*/
    private $trigger;

    /** @var string $status Pipeline status*/
    private $status;

    /** @var \DateTime $createdAt Create date*/
    private $createdAt;

    /** @var \DateTime $updatedAt Update date*/
    private $updatedAt;

    /** @var \DateTime $lastStartedAt Last pipeline execution start*/
    private $lastStartedAt;

    /** @var \DateTime $lastFinishedAt Last pipeline execution end*/
    private $lastFinishedAt;

    /** @var \OpenAPIServer\Model\PipelinePhase[] $phases Pipeline phases in execution order*/
    private $phases;

    /** @var \OpenAPIServer\Model\PipelineLinks $links */
    private $links;

    /**
     * Returns model schema.
     *
     * @param bool $assoc When TRUE, returned objects will be converted into associative arrays. Default FALSE.
     *
     * @return array
     */
    public static function getOpenApiSchema($assoc = false)
    {
        return json_decode(static::MODEL_SCHEMA, $assoc);
    }
}
