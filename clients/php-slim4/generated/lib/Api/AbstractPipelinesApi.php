<?php

/**
 * AbstractPipelinesApi
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractPipelinesApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractPipelinesApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * DELETE deletePipeline
     * Summary: Delete a Pipeline
     * Notes: Delete a pipeline. All the data is wiped.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function deletePipeline(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $message = "How about implementing deletePipeline as a DELETE method in OpenAPIServer\Api\PipelinesApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getPipeline
     * Summary: Get Pipeline
     * Notes: Returns a pipeline by its id
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipeline(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $message = "How about implementing getPipeline as a GET method in OpenAPIServer\Api\PipelinesApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getPipelines
     * Summary: List Pipelines
     * Notes: Returns all the pipelines that the requesting user has access to in an program
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getPipelines(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $message = "How about implementing getPipelines as a GET method in OpenAPIServer\Api\PipelinesApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * PATCH patchPipeline
     * Summary: Patches Pipeline
     * Notes: Patches a pipeline within an program.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function patchPipeline(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $body = $request->getParsedBody();
        $message = "How about implementing patchPipeline as a PATCH method in OpenAPIServer\Api\PipelinesApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }
}
