<?php

/**
 * AbstractPipelineExecutionApi
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Cloud Manager API
 *
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractPipelineExecutionApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractPipelineExecutionApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * PUT advancePipelineExecution
     * Summary: Advance
     * Notes: Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function advancePipelineExecution(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $executionId = $args['executionId'];
        $phaseId = $args['phaseId'];
        $stepId = $args['stepId'];
        $body = $request->getParsedBody();
        $message = "How about implementing advancePipelineExecution as a PUT method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * PUT cancelPipelineExecutionStep
     * Summary: Cancel
     * Notes: Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function cancelPipelineExecutionStep(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $executionId = $args['executionId'];
        $phaseId = $args['phaseId'];
        $stepId = $args['stepId'];
        $body = $request->getParsedBody();
        $message = "How about implementing cancelPipelineExecutionStep as a PUT method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getCurrentExecution
     * Summary: Get current pipeline execution
     * Notes: Returns current pipeline execution if any.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getCurrentExecution(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $message = "How about implementing getCurrentExecution as a GET method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getExecution
     * Summary: Get pipeline execution
     * Notes: Returns a pipeline execution by id
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getExecution(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $executionId = $args['executionId'];
        $message = "How about implementing getExecution as a GET method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getExecutions
     * Summary: List Executions
     * Notes: Returns the history of pipeline executions in a newest to oldest order
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getExecutions(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $queryParams = $request->getQueryParams();
        $start = (key_exists('start', $queryParams)) ? $queryParams['start'] : null;
        $limit = (key_exists('limit', $queryParams)) ? $queryParams['limit'] : null;
        $message = "How about implementing getExecutions as a GET method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET getStepLogs
     * Summary: Get logs
     * Notes: Get the logs associated with a step.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getStepLogs(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $accept = $request->hasHeader('Accept') ? $headers['Accept'] : null;
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $executionId = $args['executionId'];
        $phaseId = $args['phaseId'];
        $stepId = $args['stepId'];
        $queryParams = $request->getQueryParams();
        $file = (key_exists('file', $queryParams)) ? $queryParams['file'] : null;
        $message = "How about implementing getStepLogs as a GET method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * PUT startPipeline
     * Summary: Start the pipeline
     * Notes: Starts the Pipeline. This works only if the pipeline is not already started.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function startPipeline(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $message = "How about implementing startPipeline as a PUT method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET stepMetric
     * Summary: Get step metrics
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function stepMetric(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $executionId = $args['executionId'];
        $phaseId = $args['phaseId'];
        $stepId = $args['stepId'];
        $message = "How about implementing stepMetric as a GET method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET stepState
     * Summary: Get step state
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function stepState(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $xGwImsOrgId = $request->hasHeader('x-gw-ims-org-id') ? $headers['x-gw-ims-org-id'] : null;
        $authorization = $request->hasHeader('Authorization') ? $headers['Authorization'] : null;
        $xApiKey = $request->hasHeader('x-api-key') ? $headers['x-api-key'] : null;
        $programId = $args['programId'];
        $pipelineId = $args['pipelineId'];
        $executionId = $args['executionId'];
        $phaseId = $args['phaseId'];
        $stepId = $args['stepId'];
        $message = "How about implementing stepState as a GET method in OpenAPIServer\Api\PipelineExecutionApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }
}
