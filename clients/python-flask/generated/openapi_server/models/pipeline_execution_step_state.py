# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.pipeline_execution_step_state_links import PipelineExecutionStepStateLinks
from openapi_server import util

from openapi_server.models.pipeline_execution_step_state_links import PipelineExecutionStepStateLinks  # noqa: E501

class PipelineExecutionStepState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, step_id=None, phase_id=None, action=None, repository=None, branch=None, environment=None, environment_type=None, started_at=None, finished_at=None, details=None, status=None, links=None):  # noqa: E501
        """PipelineExecutionStepState - a model defined in OpenAPI

        :param id: The id of this PipelineExecutionStepState.  # noqa: E501
        :type id: str
        :param step_id: The step_id of this PipelineExecutionStepState.  # noqa: E501
        :type step_id: str
        :param phase_id: The phase_id of this PipelineExecutionStepState.  # noqa: E501
        :type phase_id: str
        :param action: The action of this PipelineExecutionStepState.  # noqa: E501
        :type action: str
        :param repository: The repository of this PipelineExecutionStepState.  # noqa: E501
        :type repository: str
        :param branch: The branch of this PipelineExecutionStepState.  # noqa: E501
        :type branch: str
        :param environment: The environment of this PipelineExecutionStepState.  # noqa: E501
        :type environment: str
        :param environment_type: The environment_type of this PipelineExecutionStepState.  # noqa: E501
        :type environment_type: str
        :param started_at: The started_at of this PipelineExecutionStepState.  # noqa: E501
        :type started_at: datetime
        :param finished_at: The finished_at of this PipelineExecutionStepState.  # noqa: E501
        :type finished_at: datetime
        :param details: The details of this PipelineExecutionStepState.  # noqa: E501
        :type details: Dict[str, object]
        :param status: The status of this PipelineExecutionStepState.  # noqa: E501
        :type status: str
        :param links: The links of this PipelineExecutionStepState.  # noqa: E501
        :type links: PipelineExecutionStepStateLinks
        """
        self.openapi_types = {
            'id': str,
            'step_id': str,
            'phase_id': str,
            'action': str,
            'repository': str,
            'branch': str,
            'environment': str,
            'environment_type': str,
            'started_at': datetime,
            'finished_at': datetime,
            'details': Dict[str, object],
            'status': str,
            'links': PipelineExecutionStepStateLinks
        }

        self.attribute_map = {
            'id': 'id',
            'step_id': 'stepId',
            'phase_id': 'phaseId',
            'action': 'action',
            'repository': 'repository',
            'branch': 'branch',
            'environment': 'environment',
            'environment_type': 'environmentType',
            'started_at': 'startedAt',
            'finished_at': 'finishedAt',
            'details': 'details',
            'status': 'status',
            'links': '_links'
        }

        self._id = id
        self._step_id = step_id
        self._phase_id = phase_id
        self._action = action
        self._repository = repository
        self._branch = branch
        self._environment = environment
        self._environment_type = environment_type
        self._started_at = started_at
        self._finished_at = finished_at
        self._details = details
        self._status = status
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'PipelineExecutionStepState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pipelineExecutionStepState of this PipelineExecutionStepState.  # noqa: E501
        :rtype: PipelineExecutionStepState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PipelineExecutionStepState.


        :return: The id of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineExecutionStepState.


        :param id: The id of this PipelineExecutionStepState.
        :type id: str
        """

        self._id = id

    @property
    def step_id(self):
        """Gets the step_id of this PipelineExecutionStepState.


        :return: The step_id of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this PipelineExecutionStepState.


        :param step_id: The step_id of this PipelineExecutionStepState.
        :type step_id: str
        """

        self._step_id = step_id

    @property
    def phase_id(self):
        """Gets the phase_id of this PipelineExecutionStepState.


        :return: The phase_id of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._phase_id

    @phase_id.setter
    def phase_id(self, phase_id):
        """Sets the phase_id of this PipelineExecutionStepState.


        :param phase_id: The phase_id of this PipelineExecutionStepState.
        :type phase_id: str
        """

        self._phase_id = phase_id

    @property
    def action(self):
        """Gets the action of this PipelineExecutionStepState.

        Name of the action  # noqa: E501

        :return: The action of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PipelineExecutionStepState.

        Name of the action  # noqa: E501

        :param action: The action of this PipelineExecutionStepState.
        :type action: str
        """

        self._action = action

    @property
    def repository(self):
        """Gets the repository of this PipelineExecutionStepState.

        Target repository  # noqa: E501

        :return: The repository of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this PipelineExecutionStepState.

        Target repository  # noqa: E501

        :param repository: The repository of this PipelineExecutionStepState.
        :type repository: str
        """

        self._repository = repository

    @property
    def branch(self):
        """Gets the branch of this PipelineExecutionStepState.

        Target branch  # noqa: E501

        :return: The branch of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this PipelineExecutionStepState.

        Target branch  # noqa: E501

        :param branch: The branch of this PipelineExecutionStepState.
        :type branch: str
        """

        self._branch = branch

    @property
    def environment(self):
        """Gets the environment of this PipelineExecutionStepState.

        Target environment  # noqa: E501

        :return: The environment of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PipelineExecutionStepState.

        Target environment  # noqa: E501

        :param environment: The environment of this PipelineExecutionStepState.
        :type environment: str
        """

        self._environment = environment

    @property
    def environment_type(self):
        """Gets the environment_type of this PipelineExecutionStepState.

        Target environment type  # noqa: E501

        :return: The environment_type of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this PipelineExecutionStepState.

        Target environment type  # noqa: E501

        :param environment_type: The environment_type of this PipelineExecutionStepState.
        :type environment_type: str
        """

        self._environment_type = environment_type

    @property
    def started_at(self):
        """Gets the started_at of this PipelineExecutionStepState.

        Start time  # noqa: E501

        :return: The started_at of this PipelineExecutionStepState.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this PipelineExecutionStepState.

        Start time  # noqa: E501

        :param started_at: The started_at of this PipelineExecutionStepState.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this PipelineExecutionStepState.

        Date the execution reached a final state  # noqa: E501

        :return: The finished_at of this PipelineExecutionStepState.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this PipelineExecutionStepState.

        Date the execution reached a final state  # noqa: E501

        :param finished_at: The finished_at of this PipelineExecutionStepState.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def details(self):
        """Gets the details of this PipelineExecutionStepState.

        Information about step result  # noqa: E501

        :return: The details of this PipelineExecutionStepState.
        :rtype: Dict[str, object]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PipelineExecutionStepState.

        Information about step result  # noqa: E501

        :param details: The details of this PipelineExecutionStepState.
        :type details: Dict[str, object]
        """

        self._details = details

    @property
    def status(self):
        """Gets the status of this PipelineExecutionStepState.

        Action status  # noqa: E501

        :return: The status of this PipelineExecutionStepState.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineExecutionStepState.

        Action status  # noqa: E501

        :param status: The status of this PipelineExecutionStepState.
        :type status: str
        """
        allowed_values = ["NOT_STARTED", "RUNNING", "FINISHED", "ERROR", "ROLLING_BACK", "ROLLED_BACK", "WAITING", "CANCELLED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def links(self):
        """Gets the links of this PipelineExecutionStepState.


        :return: The links of this PipelineExecutionStepState.
        :rtype: PipelineExecutionStepStateLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PipelineExecutionStepState.


        :param links: The links of this PipelineExecutionStepState.
        :type links: PipelineExecutionStepStateLinks
        """

        self._links = links
