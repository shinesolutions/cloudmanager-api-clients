# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.pipeline_links import PipelineLinks
from openapi_server.models.pipeline_phase import PipelinePhase
from openapi_server import util

from openapi_server.models.pipeline_links import PipelineLinks  # noqa: E501
from openapi_server.models.pipeline_phase import PipelinePhase  # noqa: E501

class Pipeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, program_id=None, name=None, trigger=None, status=None, created_at=None, updated_at=None, last_started_at=None, last_finished_at=None, phases=None, links=None):  # noqa: E501
        """Pipeline - a model defined in OpenAPI

        :param id: The id of this Pipeline.  # noqa: E501
        :type id: str
        :param program_id: The program_id of this Pipeline.  # noqa: E501
        :type program_id: str
        :param name: The name of this Pipeline.  # noqa: E501
        :type name: str
        :param trigger: The trigger of this Pipeline.  # noqa: E501
        :type trigger: str
        :param status: The status of this Pipeline.  # noqa: E501
        :type status: str
        :param created_at: The created_at of this Pipeline.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Pipeline.  # noqa: E501
        :type updated_at: datetime
        :param last_started_at: The last_started_at of this Pipeline.  # noqa: E501
        :type last_started_at: datetime
        :param last_finished_at: The last_finished_at of this Pipeline.  # noqa: E501
        :type last_finished_at: datetime
        :param phases: The phases of this Pipeline.  # noqa: E501
        :type phases: List[PipelinePhase]
        :param links: The links of this Pipeline.  # noqa: E501
        :type links: PipelineLinks
        """
        self.openapi_types = {
            'id': str,
            'program_id': str,
            'name': str,
            'trigger': str,
            'status': str,
            'created_at': datetime,
            'updated_at': datetime,
            'last_started_at': datetime,
            'last_finished_at': datetime,
            'phases': List[PipelinePhase],
            'links': PipelineLinks
        }

        self.attribute_map = {
            'id': 'id',
            'program_id': 'programId',
            'name': 'name',
            'trigger': 'trigger',
            'status': 'status',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'last_started_at': 'lastStartedAt',
            'last_finished_at': 'lastFinishedAt',
            'phases': 'phases',
            'links': '_links'
        }

        self._id = id
        self._program_id = program_id
        self._name = name
        self._trigger = trigger
        self._status = status
        self._created_at = created_at
        self._updated_at = updated_at
        self._last_started_at = last_started_at
        self._last_finished_at = last_finished_at
        self._phases = phases
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Pipeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pipeline of this Pipeline.  # noqa: E501
        :rtype: Pipeline
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Pipeline.

        Identifier of the pipeline. Unique within the program.  # noqa: E501

        :return: The id of this Pipeline.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.

        Identifier of the pipeline. Unique within the program.  # noqa: E501

        :param id: The id of this Pipeline.
        :type id: str
        """

        self._id = id

    @property
    def program_id(self):
        """Gets the program_id of this Pipeline.

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The program_id of this Pipeline.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this Pipeline.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param program_id: The program_id of this Pipeline.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def name(self):
        """Gets the name of this Pipeline.

        Name of the pipeline  # noqa: E501

        :return: The name of this Pipeline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.

        Name of the pipeline  # noqa: E501

        :param name: The name of this Pipeline.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def trigger(self):
        """Gets the trigger of this Pipeline.

        How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}  # noqa: E501

        :return: The trigger of this Pipeline.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Pipeline.

        How should the execution be triggered. ON_COMMIT: each time a PR is available and the Pipeline is idle then a execution is triggered. MANUAL: triggerd through UI or API. SCHEDULE: recurring schedule (not yet implemented}  # noqa: E501

        :param trigger: The trigger of this Pipeline.
        :type trigger: str
        """
        allowed_values = ["ON_COMMIT", "MANUAL", "SCHEDULE"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def status(self):
        """Gets the status of this Pipeline.

        Pipeline status  # noqa: E501

        :return: The status of this Pipeline.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pipeline.

        Pipeline status  # noqa: E501

        :param status: The status of this Pipeline.
        :type status: str
        """
        allowed_values = ["IDLE", "BUSY", "WAITING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this Pipeline.

        Create date  # noqa: E501

        :return: The created_at of this Pipeline.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Pipeline.

        Create date  # noqa: E501

        :param created_at: The created_at of this Pipeline.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Pipeline.

        Update date  # noqa: E501

        :return: The updated_at of this Pipeline.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Pipeline.

        Update date  # noqa: E501

        :param updated_at: The updated_at of this Pipeline.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def last_started_at(self):
        """Gets the last_started_at of this Pipeline.

        Last pipeline execution start  # noqa: E501

        :return: The last_started_at of this Pipeline.
        :rtype: datetime
        """
        return self._last_started_at

    @last_started_at.setter
    def last_started_at(self, last_started_at):
        """Sets the last_started_at of this Pipeline.

        Last pipeline execution start  # noqa: E501

        :param last_started_at: The last_started_at of this Pipeline.
        :type last_started_at: datetime
        """

        self._last_started_at = last_started_at

    @property
    def last_finished_at(self):
        """Gets the last_finished_at of this Pipeline.

        Last pipeline execution end  # noqa: E501

        :return: The last_finished_at of this Pipeline.
        :rtype: datetime
        """
        return self._last_finished_at

    @last_finished_at.setter
    def last_finished_at(self, last_finished_at):
        """Sets the last_finished_at of this Pipeline.

        Last pipeline execution end  # noqa: E501

        :param last_finished_at: The last_finished_at of this Pipeline.
        :type last_finished_at: datetime
        """

        self._last_finished_at = last_finished_at

    @property
    def phases(self):
        """Gets the phases of this Pipeline.

        Pipeline phases in execution order  # noqa: E501

        :return: The phases of this Pipeline.
        :rtype: List[PipelinePhase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this Pipeline.

        Pipeline phases in execution order  # noqa: E501

        :param phases: The phases of this Pipeline.
        :type phases: List[PipelinePhase]
        """
        if phases is None:
            raise ValueError("Invalid value for `phases`, must not be `None`")  # noqa: E501

        self._phases = phases

    @property
    def links(self):
        """Gets the links of this Pipeline.


        :return: The links of this Pipeline.
        :rtype: PipelineLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Pipeline.


        :param links: The links of this Pipeline.
        :type links: PipelineLinks
        """

        self._links = links
