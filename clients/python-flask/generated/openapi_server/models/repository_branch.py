# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.repository_branch_links import RepositoryBranchLinks
from openapi_server import util

from openapi_server.models.repository_branch_links import RepositoryBranchLinks  # noqa: E501

class RepositoryBranch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, program_id=None, repository_id=None, name=None, links=None):  # noqa: E501
        """RepositoryBranch - a model defined in OpenAPI

        :param program_id: The program_id of this RepositoryBranch.  # noqa: E501
        :type program_id: str
        :param repository_id: The repository_id of this RepositoryBranch.  # noqa: E501
        :type repository_id: int
        :param name: The name of this RepositoryBranch.  # noqa: E501
        :type name: str
        :param links: The links of this RepositoryBranch.  # noqa: E501
        :type links: RepositoryBranchLinks
        """
        self.openapi_types = {
            'program_id': str,
            'repository_id': int,
            'name': str,
            'links': RepositoryBranchLinks
        }

        self.attribute_map = {
            'program_id': 'programId',
            'repository_id': 'repositoryId',
            'name': 'name',
            'links': '_links'
        }

        self._program_id = program_id
        self._repository_id = repository_id
        self._name = name
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'RepositoryBranch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RepositoryBranch of this RepositoryBranch.  # noqa: E501
        :rtype: RepositoryBranch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def program_id(self):
        """Gets the program_id of this RepositoryBranch.

        Identifier of the program. Unique within the space  # noqa: E501

        :return: The program_id of this RepositoryBranch.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this RepositoryBranch.

        Identifier of the program. Unique within the space  # noqa: E501

        :param program_id: The program_id of this RepositoryBranch.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def repository_id(self):
        """Gets the repository_id of this RepositoryBranch.

        Identifier of the repository  # noqa: E501

        :return: The repository_id of this RepositoryBranch.
        :rtype: int
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this RepositoryBranch.

        Identifier of the repository  # noqa: E501

        :param repository_id: The repository_id of this RepositoryBranch.
        :type repository_id: int
        """

        self._repository_id = repository_id

    @property
    def name(self):
        """Gets the name of this RepositoryBranch.

        Name of the branch  # noqa: E501

        :return: The name of this RepositoryBranch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryBranch.

        Name of the branch  # noqa: E501

        :param name: The name of this RepositoryBranch.
        :type name: str
        """

        self._name = name

    @property
    def links(self):
        """Gets the links of this RepositoryBranch.


        :return: The links of this RepositoryBranch.
        :rtype: RepositoryBranchLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RepositoryBranch.


        :param links: The links of this RepositoryBranch.
        :type links: RepositoryBranchLinks
        """

        self._links = links
