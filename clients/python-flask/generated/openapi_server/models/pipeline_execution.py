# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.pipeline_execution_embedded import PipelineExecutionEmbedded
from openapi_server.models.pipeline_execution_links import PipelineExecutionLinks
from openapi_server import util

from openapi_server.models.pipeline_execution_embedded import PipelineExecutionEmbedded  # noqa: E501
from openapi_server.models.pipeline_execution_links import PipelineExecutionLinks  # noqa: E501

class PipelineExecution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, program_id=None, pipeline_id=None, artifacts_version=None, user=None, status=None, trigger=None, created_at=None, updated_at=None, finished_at=None, embedded=None, links=None):  # noqa: E501
        """PipelineExecution - a model defined in OpenAPI

        :param id: The id of this PipelineExecution.  # noqa: E501
        :type id: str
        :param program_id: The program_id of this PipelineExecution.  # noqa: E501
        :type program_id: str
        :param pipeline_id: The pipeline_id of this PipelineExecution.  # noqa: E501
        :type pipeline_id: str
        :param artifacts_version: The artifacts_version of this PipelineExecution.  # noqa: E501
        :type artifacts_version: str
        :param user: The user of this PipelineExecution.  # noqa: E501
        :type user: str
        :param status: The status of this PipelineExecution.  # noqa: E501
        :type status: str
        :param trigger: The trigger of this PipelineExecution.  # noqa: E501
        :type trigger: str
        :param created_at: The created_at of this PipelineExecution.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this PipelineExecution.  # noqa: E501
        :type updated_at: datetime
        :param finished_at: The finished_at of this PipelineExecution.  # noqa: E501
        :type finished_at: datetime
        :param embedded: The embedded of this PipelineExecution.  # noqa: E501
        :type embedded: PipelineExecutionEmbedded
        :param links: The links of this PipelineExecution.  # noqa: E501
        :type links: PipelineExecutionLinks
        """
        self.openapi_types = {
            'id': str,
            'program_id': str,
            'pipeline_id': str,
            'artifacts_version': str,
            'user': str,
            'status': str,
            'trigger': str,
            'created_at': datetime,
            'updated_at': datetime,
            'finished_at': datetime,
            'embedded': PipelineExecutionEmbedded,
            'links': PipelineExecutionLinks
        }

        self.attribute_map = {
            'id': 'id',
            'program_id': 'programId',
            'pipeline_id': 'pipelineId',
            'artifacts_version': 'artifactsVersion',
            'user': 'user',
            'status': 'status',
            'trigger': 'trigger',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'finished_at': 'finishedAt',
            'embedded': '_embedded',
            'links': '_links'
        }

        self._id = id
        self._program_id = program_id
        self._pipeline_id = pipeline_id
        self._artifacts_version = artifacts_version
        self._user = user
        self._status = status
        self._trigger = trigger
        self._created_at = created_at
        self._updated_at = updated_at
        self._finished_at = finished_at
        self._embedded = embedded
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'PipelineExecution':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pipelineExecution of this PipelineExecution.  # noqa: E501
        :rtype: PipelineExecution
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PipelineExecution.

        Pipeline execution identifier  # noqa: E501

        :return: The id of this PipelineExecution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineExecution.

        Pipeline execution identifier  # noqa: E501

        :param id: The id of this PipelineExecution.
        :type id: str
        """

        self._id = id

    @property
    def program_id(self):
        """Gets the program_id of this PipelineExecution.

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The program_id of this PipelineExecution.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this PipelineExecution.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param program_id: The program_id of this PipelineExecution.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this PipelineExecution.

        Identifier of the pipeline. Unique within the space.  # noqa: E501

        :return: The pipeline_id of this PipelineExecution.
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this PipelineExecution.

        Identifier of the pipeline. Unique within the space.  # noqa: E501

        :param pipeline_id: The pipeline_id of this PipelineExecution.
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def artifacts_version(self):
        """Gets the artifacts_version of this PipelineExecution.

        Version of the artifacts generated during this execution  # noqa: E501

        :return: The artifacts_version of this PipelineExecution.
        :rtype: str
        """
        return self._artifacts_version

    @artifacts_version.setter
    def artifacts_version(self, artifacts_version):
        """Sets the artifacts_version of this PipelineExecution.

        Version of the artifacts generated during this execution  # noqa: E501

        :param artifacts_version: The artifacts_version of this PipelineExecution.
        :type artifacts_version: str
        """

        self._artifacts_version = artifacts_version

    @property
    def user(self):
        """Gets the user of this PipelineExecution.

        AdobeID who started the pipeline. Empty for auto triggered builds  # noqa: E501

        :return: The user of this PipelineExecution.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PipelineExecution.

        AdobeID who started the pipeline. Empty for auto triggered builds  # noqa: E501

        :param user: The user of this PipelineExecution.
        :type user: str
        """

        self._user = user

    @property
    def status(self):
        """Gets the status of this PipelineExecution.

        Status of the execution  # noqa: E501

        :return: The status of this PipelineExecution.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineExecution.

        Status of the execution  # noqa: E501

        :param status: The status of this PipelineExecution.
        :type status: str
        """
        allowed_values = ["NOT_STARTED", "RUNNING", "CANCELLING", "CANCELLED", "FINISHED", "ERROR", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trigger(self):
        """Gets the trigger of this PipelineExecution.

        How the execution was triggered.  # noqa: E501

        :return: The trigger of this PipelineExecution.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this PipelineExecution.

        How the execution was triggered.  # noqa: E501

        :param trigger: The trigger of this PipelineExecution.
        :type trigger: str
        """
        allowed_values = ["ON_COMMIT", "MANUAL", "SCHEDULE", "PUSH_UPGRADES"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def created_at(self):
        """Gets the created_at of this PipelineExecution.

        Start time  # noqa: E501

        :return: The created_at of this PipelineExecution.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PipelineExecution.

        Start time  # noqa: E501

        :param created_at: The created_at of this PipelineExecution.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PipelineExecution.

        Date of last status change  # noqa: E501

        :return: The updated_at of this PipelineExecution.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PipelineExecution.

        Date of last status change  # noqa: E501

        :param updated_at: The updated_at of this PipelineExecution.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def finished_at(self):
        """Gets the finished_at of this PipelineExecution.

        Date the execution reached a final state  # noqa: E501

        :return: The finished_at of this PipelineExecution.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this PipelineExecution.

        Date the execution reached a final state  # noqa: E501

        :param finished_at: The finished_at of this PipelineExecution.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def embedded(self):
        """Gets the embedded of this PipelineExecution.


        :return: The embedded of this PipelineExecution.
        :rtype: PipelineExecutionEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this PipelineExecution.


        :param embedded: The embedded of this PipelineExecution.
        :type embedded: PipelineExecutionEmbedded
        """

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this PipelineExecution.


        :return: The links of this PipelineExecution.
        :rtype: PipelineExecutionLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PipelineExecution.


        :param links: The links of this PipelineExecution.
        :type links: PipelineExecutionLinks
        """

        self._links = links
