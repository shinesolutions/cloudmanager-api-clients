# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PipelinePhase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, type=None, repository_id=None, branch=None, environment_id=None):  # noqa: E501
        """PipelinePhase - a model defined in OpenAPI

        :param name: The name of this PipelinePhase.  # noqa: E501
        :type name: str
        :param type: The type of this PipelinePhase.  # noqa: E501
        :type type: str
        :param repository_id: The repository_id of this PipelinePhase.  # noqa: E501
        :type repository_id: str
        :param branch: The branch of this PipelinePhase.  # noqa: E501
        :type branch: str
        :param environment_id: The environment_id of this PipelinePhase.  # noqa: E501
        :type environment_id: str
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'repository_id': str,
            'branch': str,
            'environment_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'repository_id': 'repositoryId',
            'branch': 'branch',
            'environment_id': 'environmentId'
        }

        self._name = name
        self._type = type
        self._repository_id = repository_id
        self._branch = branch
        self._environment_id = environment_id

    @classmethod
    def from_dict(cls, dikt) -> 'PipelinePhase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pipelinePhase of this PipelinePhase.  # noqa: E501
        :rtype: PipelinePhase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PipelinePhase.

        Name of the phase  # noqa: E501

        :return: The name of this PipelinePhase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelinePhase.

        Name of the phase  # noqa: E501

        :param name: The name of this PipelinePhase.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PipelinePhase.

        Type of the phase  # noqa: E501

        :return: The type of this PipelinePhase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PipelinePhase.

        Type of the phase  # noqa: E501

        :param type: The type of this PipelinePhase.
        :type type: str
        """
        allowed_values = ["VALIDATE", "BUILD", "DEPLOY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def repository_id(self):
        """Gets the repository_id of this PipelinePhase.

        Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD  # noqa: E501

        :return: The repository_id of this PipelinePhase.
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this PipelinePhase.

        Identifier of the source repository. The code from this repository will be build at the start of this phase. Mandatory if type=BUILD  # noqa: E501

        :param repository_id: The repository_id of this PipelinePhase.
        :type repository_id: str
        """

        self._repository_id = repository_id

    @property
    def branch(self):
        """Gets the branch of this PipelinePhase.

        Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.  # noqa: E501

        :return: The branch of this PipelinePhase.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this PipelinePhase.

        Name of the tracked branch or a fully qualified git tag (e.g. refs/tags/v1).  Assumed to be `master` if missing.  # noqa: E501

        :param branch: The branch of this PipelinePhase.
        :type branch: str
        """

        self._branch = branch

    @property
    def environment_id(self):
        """Gets the environment_id of this PipelinePhase.

        Identifier of the target environment. Mandatory if type=DEPLOY  # noqa: E501

        :return: The environment_id of this PipelinePhase.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this PipelinePhase.

        Identifier of the target environment. Mandatory if type=DEPLOY  # noqa: E501

        :param environment_id: The environment_id of this PipelinePhase.
        :type environment_id: str
        """

        self._environment_id = environment_id
