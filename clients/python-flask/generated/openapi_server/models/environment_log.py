# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.environment_log_links import EnvironmentLogLinks
from openapi_server import util

from openapi_server.models.environment_log_links import EnvironmentLogLinks  # noqa: E501

class EnvironmentLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service=None, name=None, date=None, program_id=None, environment_id=None, links=None):  # noqa: E501
        """EnvironmentLog - a model defined in OpenAPI

        :param service: The service of this EnvironmentLog.  # noqa: E501
        :type service: str
        :param name: The name of this EnvironmentLog.  # noqa: E501
        :type name: str
        :param date: The date of this EnvironmentLog.  # noqa: E501
        :type date: str
        :param program_id: The program_id of this EnvironmentLog.  # noqa: E501
        :type program_id: int
        :param environment_id: The environment_id of this EnvironmentLog.  # noqa: E501
        :type environment_id: int
        :param links: The links of this EnvironmentLog.  # noqa: E501
        :type links: EnvironmentLogLinks
        """
        self.openapi_types = {
            'service': str,
            'name': str,
            'date': str,
            'program_id': int,
            'environment_id': int,
            'links': EnvironmentLogLinks
        }

        self.attribute_map = {
            'service': 'service',
            'name': 'name',
            'date': 'date',
            'program_id': 'programId',
            'environment_id': 'environmentId',
            'links': '_links'
        }

        self._service = service
        self._name = name
        self._date = date
        self._program_id = program_id
        self._environment_id = environment_id
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'EnvironmentLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnvironmentLog of this EnvironmentLog.  # noqa: E501
        :rtype: EnvironmentLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this EnvironmentLog.

        Name of the service  # noqa: E501

        :return: The service of this EnvironmentLog.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EnvironmentLog.

        Name of the service  # noqa: E501

        :param service: The service of this EnvironmentLog.
        :type service: str
        """

        self._service = service

    @property
    def name(self):
        """Gets the name of this EnvironmentLog.

        Name of the Log  # noqa: E501

        :return: The name of this EnvironmentLog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentLog.

        Name of the Log  # noqa: E501

        :param name: The name of this EnvironmentLog.
        :type name: str
        """

        self._name = name

    @property
    def date(self):
        """Gets the date of this EnvironmentLog.

        date of the Log  # noqa: E501

        :return: The date of this EnvironmentLog.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this EnvironmentLog.

        date of the Log  # noqa: E501

        :param date: The date of this EnvironmentLog.
        :type date: str
        """

        self._date = date

    @property
    def program_id(self):
        """Gets the program_id of this EnvironmentLog.


        :return: The program_id of this EnvironmentLog.
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this EnvironmentLog.


        :param program_id: The program_id of this EnvironmentLog.
        :type program_id: int
        """

        self._program_id = program_id

    @property
    def environment_id(self):
        """Gets the environment_id of this EnvironmentLog.


        :return: The environment_id of this EnvironmentLog.
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this EnvironmentLog.


        :param environment_id: The environment_id of this EnvironmentLog.
        :type environment_id: int
        """

        self._environment_id = environment_id

    @property
    def links(self):
        """Gets the links of this EnvironmentLog.


        :return: The links of this EnvironmentLog.
        :rtype: EnvironmentLogLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EnvironmentLog.


        :param links: The links of this EnvironmentLog.
        :type links: EnvironmentLogLinks
        """

        self._links = links
