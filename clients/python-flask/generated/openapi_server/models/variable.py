# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Variable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, value=None, type=None):  # noqa: E501
        """Variable - a model defined in OpenAPI

        :param name: The name of this Variable.  # noqa: E501
        :type name: str
        :param value: The value of this Variable.  # noqa: E501
        :type value: str
        :param type: The type of this Variable.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'name': str,
            'value': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'type': 'type'
        }

        self._name = name
        self._value = value
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Variable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variable of this Variable.  # noqa: E501
        :rtype: Variable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Variable.

        Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.  # noqa: E501

        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Variable.

        Name of the variable. Of a-z, A-Z, _ and 0-9 Cannot begin with a number.  # noqa: E501

        :param name: The name of this Variable.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")  # noqa: E501
        if name is not None and not re.search(r'[a-zA-Z_][a-zA-Z_0-9]*', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z_][a-zA-Z_0-9]*/`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this Variable.

        Value of the variable. Read-Write for non-secrets, write-only for secrets.  # noqa: E501

        :return: The value of this Variable.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Variable.

        Value of the variable. Read-Write for non-secrets, write-only for secrets.  # noqa: E501

        :param value: The value of this Variable.
        :type value: str
        """
        if value is not None and len(value) > 2048:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `2048`")  # noqa: E501
        if value is not None and len(value) < 0:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def type(self):
        """Gets the type of this Variable.

        Type of the variable. Default `string` if missing. Cannot be changed after creation.  # noqa: E501

        :return: The type of this Variable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Variable.

        Type of the variable. Default `string` if missing. Cannot be changed after creation.  # noqa: E501

        :param type: The type of this Variable.
        :type type: str
        """
        allowed_values = ["string", "secretString"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
