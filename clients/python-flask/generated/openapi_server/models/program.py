# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.program_links import ProgramLinks
from openapi_server import util

from openapi_server.models.program_links import ProgramLinks  # noqa: E501

class Program(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, enabled=False, tenant_id=None, ims_org_id=None, links=None):  # noqa: E501
        """Program - a model defined in OpenAPI

        :param id: The id of this Program.  # noqa: E501
        :type id: str
        :param name: The name of this Program.  # noqa: E501
        :type name: str
        :param enabled: The enabled of this Program.  # noqa: E501
        :type enabled: bool
        :param tenant_id: The tenant_id of this Program.  # noqa: E501
        :type tenant_id: str
        :param ims_org_id: The ims_org_id of this Program.  # noqa: E501
        :type ims_org_id: str
        :param links: The links of this Program.  # noqa: E501
        :type links: ProgramLinks
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'enabled': bool,
            'tenant_id': str,
            'ims_org_id': str,
            'links': ProgramLinks
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'enabled': 'enabled',
            'tenant_id': 'tenantId',
            'ims_org_id': 'imsOrgId',
            'links': '_links'
        }

        self._id = id
        self._name = name
        self._enabled = enabled
        self._tenant_id = tenant_id
        self._ims_org_id = ims_org_id
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Program':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Program of this Program.  # noqa: E501
        :rtype: Program
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Program.

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The id of this Program.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Program.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param id: The id of this Program.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Program.

        Name of the program  # noqa: E501

        :return: The name of this Program.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Program.

        Name of the program  # noqa: E501

        :param name: The name of this Program.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this Program.

        Whether this Program has been enabled for Cloud Manager usage  # noqa: E501

        :return: The enabled of this Program.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Program.

        Whether this Program has been enabled for Cloud Manager usage  # noqa: E501

        :param enabled: The enabled of this Program.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Program.

        Tenant Id  # noqa: E501

        :return: The tenant_id of this Program.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Program.

        Tenant Id  # noqa: E501

        :param tenant_id: The tenant_id of this Program.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def ims_org_id(self):
        """Gets the ims_org_id of this Program.

        Organisation Id  # noqa: E501

        :return: The ims_org_id of this Program.
        :rtype: str
        """
        return self._ims_org_id

    @ims_org_id.setter
    def ims_org_id(self, ims_org_id):
        """Sets the ims_org_id of this Program.

        Organisation Id  # noqa: E501

        :param ims_org_id: The ims_org_id of this Program.
        :type ims_org_id: str
        """

        self._ims_org_id = ims_org_id

    @property
    def links(self):
        """Gets the links of this Program.


        :return: The links of this Program.
        :rtype: ProgramLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Program.


        :param links: The links of this Program.
        :type links: ProgramLinks
        """

        self._links = links
