# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.environment_links import EnvironmentLinks
from openapi_server import util

from openapi_server.models.environment_links import EnvironmentLinks  # noqa: E501

class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, program_id=None, name=None, description=None, type=None, links=None):  # noqa: E501
        """Environment - a model defined in OpenAPI

        :param id: The id of this Environment.  # noqa: E501
        :type id: str
        :param program_id: The program_id of this Environment.  # noqa: E501
        :type program_id: str
        :param name: The name of this Environment.  # noqa: E501
        :type name: str
        :param description: The description of this Environment.  # noqa: E501
        :type description: str
        :param type: The type of this Environment.  # noqa: E501
        :type type: str
        :param links: The links of this Environment.  # noqa: E501
        :type links: EnvironmentLinks
        """
        self.openapi_types = {
            'id': str,
            'program_id': str,
            'name': str,
            'description': str,
            'type': str,
            'links': EnvironmentLinks
        }

        self.attribute_map = {
            'id': 'id',
            'program_id': 'programId',
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'links': '_links'
        }

        self._id = id
        self._program_id = program_id
        self._name = name
        self._description = description
        self._type = type
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Environment of this Environment.  # noqa: E501
        :rtype: Environment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Environment.

        id  # noqa: E501

        :return: The id of this Environment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.

        id  # noqa: E501

        :param id: The id of this Environment.
        :type id: str
        """

        self._id = id

    @property
    def program_id(self):
        """Gets the program_id of this Environment.

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The program_id of this Environment.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this Environment.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param program_id: The program_id of this Environment.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def name(self):
        """Gets the name of this Environment.

        Name of the environment  # noqa: E501

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.

        Name of the environment  # noqa: E501

        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Environment.

        Description of the environment  # noqa: E501

        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.

        Description of the environment  # noqa: E501

        :param description: The description of this Environment.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Environment.

        Type of the environment  # noqa: E501

        :return: The type of this Environment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Environment.

        Type of the environment  # noqa: E501

        :param type: The type of this Environment.
        :type type: str
        """
        allowed_values = ["dev", "stage", "prod"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def links(self):
        """Gets the links of this Environment.


        :return: The links of this Environment.
        :rtype: EnvironmentLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Environment.


        :param links: The links of this Environment.
        :type links: EnvironmentLinks
        """

        self._links = links
