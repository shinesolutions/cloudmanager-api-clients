# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EmbeddedProgram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, enabled=False, tenant_id=None):  # noqa: E501
        """EmbeddedProgram - a model defined in OpenAPI

        :param id: The id of this EmbeddedProgram.  # noqa: E501
        :type id: str
        :param name: The name of this EmbeddedProgram.  # noqa: E501
        :type name: str
        :param enabled: The enabled of this EmbeddedProgram.  # noqa: E501
        :type enabled: bool
        :param tenant_id: The tenant_id of this EmbeddedProgram.  # noqa: E501
        :type tenant_id: str
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'enabled': bool,
            'tenant_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'enabled': 'enabled',
            'tenant_id': 'tenantId'
        }

        self._id = id
        self._name = name
        self._enabled = enabled
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt) -> 'EmbeddedProgram':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The embeddedProgram of this EmbeddedProgram.  # noqa: E501
        :rtype: EmbeddedProgram
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EmbeddedProgram.

        Identifier of the program. Unique within the space.  # noqa: E501

        :return: The id of this EmbeddedProgram.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmbeddedProgram.

        Identifier of the program. Unique within the space.  # noqa: E501

        :param id: The id of this EmbeddedProgram.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EmbeddedProgram.

        Name of the program  # noqa: E501

        :return: The name of this EmbeddedProgram.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmbeddedProgram.

        Name of the program  # noqa: E501

        :param name: The name of this EmbeddedProgram.
        :type name: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this EmbeddedProgram.

        Whether this Program has been enabled for Cloud Manager usage  # noqa: E501

        :return: The enabled of this EmbeddedProgram.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EmbeddedProgram.

        Whether this Program has been enabled for Cloud Manager usage  # noqa: E501

        :param enabled: The enabled of this EmbeddedProgram.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def tenant_id(self):
        """Gets the tenant_id of this EmbeddedProgram.

        Tenant Id  # noqa: E501

        :return: The tenant_id of this EmbeddedProgram.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this EmbeddedProgram.

        Tenant Id  # noqa: E501

        :param tenant_id: The tenant_id of this EmbeddedProgram.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
