# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.invalid_parameter import InvalidParameter
from openapi_server.models.missing_parameter import MissingParameter
from openapi_server import util

from openapi_server.models.invalid_parameter import InvalidParameter  # noqa: E501
from openapi_server.models.missing_parameter import MissingParameter  # noqa: E501

class BadRequestError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, type=None, title=None, missing_params=None, invalid_params=None):  # noqa: E501
        """BadRequestError - a model defined in OpenAPI

        :param status: The status of this BadRequestError.  # noqa: E501
        :type status: int
        :param type: The type of this BadRequestError.  # noqa: E501
        :type type: str
        :param title: The title of this BadRequestError.  # noqa: E501
        :type title: str
        :param missing_params: The missing_params of this BadRequestError.  # noqa: E501
        :type missing_params: List[MissingParameter]
        :param invalid_params: The invalid_params of this BadRequestError.  # noqa: E501
        :type invalid_params: List[InvalidParameter]
        """
        self.openapi_types = {
            'status': int,
            'type': str,
            'title': str,
            'missing_params': List[MissingParameter],
            'invalid_params': List[InvalidParameter]
        }

        self.attribute_map = {
            'status': 'status',
            'type': 'type',
            'title': 'title',
            'missing_params': 'missingParams',
            'invalid_params': 'invalidParams'
        }

        self._status = status
        self._type = type
        self._title = title
        self._missing_params = missing_params
        self._invalid_params = invalid_params

    @classmethod
    def from_dict(cls, dikt) -> 'BadRequestError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BadRequestError of this BadRequestError.  # noqa: E501
        :rtype: BadRequestError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this BadRequestError.

        HTTP status code of the response.  # noqa: E501

        :return: The status of this BadRequestError.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BadRequestError.

        HTTP status code of the response.  # noqa: E501

        :param status: The status of this BadRequestError.
        :type status: int
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this BadRequestError.

        Error type identifier.  # noqa: E501

        :return: The type of this BadRequestError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BadRequestError.

        Error type identifier.  # noqa: E501

        :param type: The type of this BadRequestError.
        :type type: str
        """

        self._type = type

    @property
    def title(self):
        """Gets the title of this BadRequestError.

        A short summary of the error.  # noqa: E501

        :return: The title of this BadRequestError.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BadRequestError.

        A short summary of the error.  # noqa: E501

        :param title: The title of this BadRequestError.
        :type title: str
        """

        self._title = title

    @property
    def missing_params(self):
        """Gets the missing_params of this BadRequestError.

        Request's missing parameters.  # noqa: E501

        :return: The missing_params of this BadRequestError.
        :rtype: List[MissingParameter]
        """
        return self._missing_params

    @missing_params.setter
    def missing_params(self, missing_params):
        """Sets the missing_params of this BadRequestError.

        Request's missing parameters.  # noqa: E501

        :param missing_params: The missing_params of this BadRequestError.
        :type missing_params: List[MissingParameter]
        """

        self._missing_params = missing_params

    @property
    def invalid_params(self):
        """Gets the invalid_params of this BadRequestError.

        Request's invalid parameters.  # noqa: E501

        :return: The invalid_params of this BadRequestError.
        :rtype: List[InvalidParameter]
        """
        return self._invalid_params

    @invalid_params.setter
    def invalid_params(self, invalid_params):
        """Sets the invalid_params of this BadRequestError.

        Request's invalid parameters.  # noqa: E501

        :param invalid_params: The invalid_params of this BadRequestError.
        :type invalid_params: List[InvalidParameter]
        """

        self._invalid_params = invalid_params
