# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.environment import Environment
from openapi_server import util

from openapi_server.models.environment import Environment  # noqa: E501

class EnvironmentListEmbedded(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environments=None):  # noqa: E501
        """EnvironmentListEmbedded - a model defined in OpenAPI

        :param environments: The environments of this EnvironmentListEmbedded.  # noqa: E501
        :type environments: List[Environment]
        """
        self.openapi_types = {
            'environments': List[Environment]
        }

        self.attribute_map = {
            'environments': 'environments'
        }

        self._environments = environments

    @classmethod
    def from_dict(cls, dikt) -> 'EnvironmentListEmbedded':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The environmentList__embedded of this EnvironmentListEmbedded.  # noqa: E501
        :rtype: EnvironmentListEmbedded
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environments(self):
        """Gets the environments of this EnvironmentListEmbedded.


        :return: The environments of this EnvironmentListEmbedded.
        :rtype: List[Environment]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this EnvironmentListEmbedded.


        :param environments: The environments of this EnvironmentListEmbedded.
        :type environments: List[Environment]
        """

        self._environments = environments
