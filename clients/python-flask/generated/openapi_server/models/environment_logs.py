# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.environment_logs_embedded import EnvironmentLogsEmbedded
from openapi_server.models.environment_logs_links import EnvironmentLogsLinks
from openapi_server import util

from openapi_server.models.environment_logs_embedded import EnvironmentLogsEmbedded  # noqa: E501
from openapi_server.models.environment_logs_links import EnvironmentLogsLinks  # noqa: E501

class EnvironmentLogs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service=None, name=None, days=None, links=None, embedded=None):  # noqa: E501
        """EnvironmentLogs - a model defined in OpenAPI

        :param service: The service of this EnvironmentLogs.  # noqa: E501
        :type service: List[str]
        :param name: The name of this EnvironmentLogs.  # noqa: E501
        :type name: List[str]
        :param days: The days of this EnvironmentLogs.  # noqa: E501
        :type days: int
        :param links: The links of this EnvironmentLogs.  # noqa: E501
        :type links: EnvironmentLogsLinks
        :param embedded: The embedded of this EnvironmentLogs.  # noqa: E501
        :type embedded: EnvironmentLogsEmbedded
        """
        self.openapi_types = {
            'service': List[str],
            'name': List[str],
            'days': int,
            'links': EnvironmentLogsLinks,
            'embedded': EnvironmentLogsEmbedded
        }

        self.attribute_map = {
            'service': 'service',
            'name': 'name',
            'days': 'days',
            'links': '_links',
            'embedded': '_embedded'
        }

        self._service = service
        self._name = name
        self._days = days
        self._links = links
        self._embedded = embedded

    @classmethod
    def from_dict(cls, dikt) -> 'EnvironmentLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnvironmentLogs of this EnvironmentLogs.  # noqa: E501
        :rtype: EnvironmentLogs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service(self):
        """Gets the service of this EnvironmentLogs.

        Name of the service  # noqa: E501

        :return: The service of this EnvironmentLogs.
        :rtype: List[str]
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EnvironmentLogs.

        Name of the service  # noqa: E501

        :param service: The service of this EnvironmentLogs.
        :type service: List[str]
        """

        self._service = service

    @property
    def name(self):
        """Gets the name of this EnvironmentLogs.

        Name of the Log  # noqa: E501

        :return: The name of this EnvironmentLogs.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentLogs.

        Name of the Log  # noqa: E501

        :param name: The name of this EnvironmentLogs.
        :type name: List[str]
        """

        self._name = name

    @property
    def days(self):
        """Gets the days of this EnvironmentLogs.

        Number of days  # noqa: E501

        :return: The days of this EnvironmentLogs.
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this EnvironmentLogs.

        Number of days  # noqa: E501

        :param days: The days of this EnvironmentLogs.
        :type days: int
        """

        self._days = days

    @property
    def links(self):
        """Gets the links of this EnvironmentLogs.


        :return: The links of this EnvironmentLogs.
        :rtype: EnvironmentLogsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EnvironmentLogs.


        :param links: The links of this EnvironmentLogs.
        :type links: EnvironmentLogsLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this EnvironmentLogs.


        :return: The embedded of this EnvironmentLogs.
        :rtype: EnvironmentLogsEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this EnvironmentLogs.


        :param embedded: The embedded of this EnvironmentLogs.
        :type embedded: EnvironmentLogsEmbedded
        """

        self._embedded = embedded
