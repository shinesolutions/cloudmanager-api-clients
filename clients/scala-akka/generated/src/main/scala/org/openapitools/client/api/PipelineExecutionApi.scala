/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.PipelineExecution
import org.openapitools.client.model.PipelineExecutionListRepresentation
import org.openapitools.client.model.PipelineExecutionStepState
import org.openapitools.client.model.PipelineStepMetrics
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object PipelineExecutionApi {

  def apply(baseUrl: String = "https://cloudmanager.adobe.io") = new PipelineExecutionApi(baseUrl)
}

class PipelineExecutionApi(baseUrl: String) {
  
  /**
   * Post to this url in order to advance the current pipeline execution, if paused and waiting for user interaction. Link is present in output only in that case. The input depends on the actual reason for which the pipeline execution stopped.
   * 
   * Expected answers:
   *   code 202 :  (Successful resume of pipeline execution)
   *   code 403 :  (Missing permission for user to advance the pipeline execution)
   *   code 404 :  (No pipeline execution exits or unknown pipeline or program)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   * @param body Input for advance. See documentation for details.
   */
  def advancePipelineExecution(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Any): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/advance", "application/json")
      .withBody(body)
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withPathParam("executionId", executionId)
      .withPathParam("phaseId", phaseId)
      .withPathParam("stepId", stepId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withHeaderParam("Content-Type", contentType)
      .withSuccessResponse[Unit](202)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Post to this url in order to cancel the current pipeline execution. Link is present in output only in that case.
   * 
   * Expected answers:
   *   code 202 :  (Successful cancel of pipeline execution)
   *   code 403 :  (Missing permission for user to cancel the current pipeline execution)
   *   code 404 :  (No pipeline execution exits or unknown pipeline or program)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   * @param body Input for advance. See documentation for details.
   */
  def cancelPipelineExecutionStep(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Any): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/cancel", "application/json")
      .withBody(body)
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withPathParam("executionId", executionId)
      .withPathParam("phaseId", phaseId)
      .withPathParam("stepId", stepId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withHeaderParam("Content-Type", contentType)
      .withSuccessResponse[Unit](202)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Returns current pipeline execution if any.
   * 
   * Expected answers:
   *   code 200 : PipelineExecution (Successful retrieval of current execution)
   *   code 404 :  (No pipeline execution exits or unknown pipeline or program)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def getCurrentExecution(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[PipelineExecution] =
    ApiRequest[PipelineExecution](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[PipelineExecution](200)
      .withErrorResponse[Unit](404)
      

  /**
   * Returns a pipeline execution by id
   * 
   * Expected answers:
   *   code 200 : PipelineExecution (Successful retrieval of execution)
   *   code 404 :  (No pipeline execution exits or unknown pipeline or application)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def getExecution(programId: String, pipelineId: String, executionId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[PipelineExecution] =
    ApiRequest[PipelineExecution](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withPathParam("executionId", executionId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[PipelineExecution](200)
      .withErrorResponse[Unit](404)
      

  /**
   * Returns the history of pipeline executions in a newest to oldest order
   * 
   * Expected answers:
   *   code 200 : PipelineExecutionListRepresentation (Successful retrieval of execution history)
   *   code 403 :  (Missing permission for user to read executions)
   *   code 404 :  (Pipeline does not exist)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param start Pagination start parameter
   * @param limit Pagination limit parameter
   */
  def getExecutions(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, start: Option[String] = None, limit: Option[Int] = None): ApiRequest[PipelineExecutionListRepresentation] =
    ApiRequest[PipelineExecutionListRepresentation](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/executions", "application/json")
      .withQueryParam("start", start)
      .withQueryParam("limit", limit)
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[PipelineExecutionListRepresentation](200)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Get the logs associated with a step.
   * 
   * Expected answers:
   *   code 200 :  (Successful retrieval of logs)
   *   code 403 :  (Missing permission for user to read logs)
   *   code 404 :  (Pipeline execution does not exist)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param file Identifier of the log file
   * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
   */
  def getStepLogs(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, file: Option[String] = None, accept: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/logs", "application/json")
      .withQueryParam("file", file)
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withPathParam("executionId", executionId)
      .withPathParam("phaseId", phaseId)
      .withPathParam("stepId", stepId)
      .withHeaderParam("Accept", accept)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Starts the Pipeline. This works only if the pipeline is not already started.
   * 
   * Expected answers:
   *   code 201 :  (Successful started pipeline execution)
   *   code 400 :  (Request conflicts with the expected state of pipeline)
   *   code 404 :  (No pipeline execution exits or unknown pipeline or application)
   *   code 412 :  (Cannot start execution: programId={programId}, pipelineId={pipelineId} currentExecutionId={executionId}, reason='Execution already in progress.)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   */
  def startPipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withHeaderParam("Content-Type", contentType)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](412)
      

  /**
   * Expected answers:
   *   code 200 : PipelineStepMetrics (Successful retrieval of metrics)
   *   code 403 :  (Missing permission for user to read metrics)
   *   code 404 :  (Pipeline execution does not exist)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def stepMetric(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[PipelineStepMetrics] =
    ApiRequest[PipelineStepMetrics](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}/metrics", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withPathParam("executionId", executionId)
      .withPathParam("phaseId", phaseId)
      .withPathParam("stepId", stepId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[PipelineStepMetrics](200)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Expected answers:
   *   code 200 : PipelineExecutionStepState (Successful retrieval of step state)
   *   code 403 :  (Missing permission for user to read step)
   *   code 404 :  (Pipeline execution does not exist)
   * 
   * @param programId Identifier of the program.
   * @param pipelineId Identifier of the pipeline
   * @param executionId Identifier of the execution
   * @param phaseId Identifier of the phase
   * @param stepId Identifier of the step
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def stepState(programId: String, pipelineId: String, executionId: String, phaseId: String, stepId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[PipelineExecutionStepState] =
    ApiRequest[PipelineExecutionStepState](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}/execution/{executionId}/phase/{phaseId}/step/{stepId}", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withPathParam("executionId", executionId)
      .withPathParam("phaseId", phaseId)
      .withPathParam("stepId", stepId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[PipelineExecutionStepState](200)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      



}

