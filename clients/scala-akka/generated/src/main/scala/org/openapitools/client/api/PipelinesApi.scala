/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Pipeline
import org.openapitools.client.model.PipelineList
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object PipelinesApi {

  def apply(baseUrl: String = "https://cloudmanager.adobe.io") = new PipelinesApi(baseUrl)
}

class PipelinesApi(baseUrl: String) {
  
  /**
   * Delete a pipeline. All the data is wiped.
   * 
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * @param programId Identifier of the program
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def deletePipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withDefaultSuccessResponse[Unit]
      

  /**
   * Returns a pipeline by its id
   * 
   * Expected answers:
   *   code 200 : Pipeline (Successful retrieval of pipeline)
   *   code 404 :  (Pipeline not found)
   * 
   * @param programId Identifier of the program
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def getPipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[Pipeline] =
    ApiRequest[Pipeline](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[Pipeline](200)
      .withErrorResponse[Unit](404)
      

  /**
   * Returns all the pipelines that the requesting user has access to in an program
   * 
   * Expected answers:
   *   code 200 : PipelineList (successful operation)
   * 
   * @param programId Identifier of the program
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def getPipelines(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[PipelineList] =
    ApiRequest[PipelineList](ApiMethods.GET, baseUrl, "/api/program/{programId}/pipelines", "application/json")
      .withPathParam("programId", programId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[PipelineList](200)
      

  /**
   * Patches a pipeline within an program.
   * 
   * Expected answers:
   *   code 200 : Pipeline (successful operation)
   * 
   * @param programId Identifier of the program
   * @param pipelineId Identifier of the pipeline
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param contentType Must always be application/json
   * @param body The updated Pipeline
   */
  def patchPipeline(programId: String, pipelineId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, contentType: String, body: Pipeline): ApiRequest[Pipeline] =
    ApiRequest[Pipeline](ApiMethods.PATCH, baseUrl, "/api/program/{programId}/pipeline/{pipelineId}", "application/json")
      .withBody(body)
      .withPathParam("programId", programId)
      .withPathParam("pipelineId", pipelineId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withHeaderParam("Content-Type", contentType)
      .withSuccessResponse[Pipeline](200)
      



}

