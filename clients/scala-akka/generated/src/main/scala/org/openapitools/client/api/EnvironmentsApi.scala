/**
 * Cloud Manager API
 * This API allows access to Cloud Manager programs, pipelines, and environments by an authorized technical account created through the Adobe I/O Console. The base url for this API is https://cloudmanager.adobe.io, e.g. to get the list of programs for an organization, you would make a GET request to https://cloudmanager.adobe.io/api/programs (with the correct set of headers as described below). This swagger file can be downloaded from https://raw.githubusercontent.com/AdobeDocs/cloudmanager-api-docs/master/swagger-specs/api.yaml.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BadRequestError
import org.openapitools.client.model.Environment
import org.openapitools.client.model.EnvironmentList
import org.openapitools.client.model.EnvironmentLogs
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object EnvironmentsApi {

  def apply(baseUrl: String = "https://cloudmanager.adobe.io") = new EnvironmentsApi(baseUrl)
}

class EnvironmentsApi(baseUrl: String) {
  
  /**
   * Delete environment
   * 
   * Expected answers:
   *   code 201 : Environment (Environment deleted)
   *   code 400 : BadRequestError (Environment deletion in progress)
   *   code 404 :  (Environment not found)
   * 
   * @param programId Identifier of the application
   * @param environmentId Identifier of the environment
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def deleteEnvironment(programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[Environment] =
    ApiRequest[Environment](ApiMethods.DELETE, baseUrl, "/api/program/{programId}/environment/{environmentId}", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("environmentId", environmentId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[Environment](201)
      .withErrorResponse[BadRequestError](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Download environment logs
   * 
   * Expected answers:
   *   code 200 :  (Successful retrieval of logs)
   *   code 400 : BadRequestError (invalid parameters)
   *   code 404 :  (Environment not found)
   * 
   * @param programId Identifier of the program
   * @param environmentId Identifier of the environment
   * @param service Name of service
   * @param name Name of log
   * @param date date for which log is required
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param accept Specify application/json in this header to receive a JSON response. Otherwise, a 307 response code will be returned with a Location header.
   */
  def downloadLogs(programId: String, environmentId: String, service: String, name: String, date: String, xGwImsOrgId: String, authorization: String, xApiKey: String, accept: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/api/program/{programId}/environment/{environmentId}/logs/download", "application/json")
      .withQueryParam("service", service)
      .withQueryParam("name", name)
      .withQueryParam("date", date)
      .withPathParam("programId", programId)
      .withPathParam("environmentId", environmentId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withHeaderParam("Accept", accept)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[BadRequestError](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Returns an environment by its id
   * 
   * Expected answers:
   *   code 200 : Environment (successful operation)
   * 
   * @param programId Identifier of the program
   * @param environmentId Identifier of the environment
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   */
  def getEnvironment(programId: String, environmentId: String, xGwImsOrgId: String, authorization: String, xApiKey: String): ApiRequest[Environment] =
    ApiRequest[Environment](ApiMethods.GET, baseUrl, "/api/program/{programId}/environment/{environmentId}", "application/json")
      .withPathParam("programId", programId)
      .withPathParam("environmentId", environmentId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[Environment](200)
      

  /**
   * List all logs available in environment
   * 
   * Expected answers:
   *   code 200 : EnvironmentLogs (Successful retrieval of logs for an environment)
   *   code 400 : BadRequestError (invalid parameters)
   *   code 404 :  (Environment not found)
   * 
   * @param programId Identifier of the program
   * @param environmentId Identifier of the environment
   * @param days number of days for which logs are required
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param service Names of services
   * @param name Names of log
   */
  def getEnvironmentLogs(programId: String, environmentId: String, days: Int, xGwImsOrgId: String, authorization: String, xApiKey: String, service: Seq[String], name: Seq[String]): ApiRequest[EnvironmentLogs] =
    ApiRequest[EnvironmentLogs](ApiMethods.GET, baseUrl, "/api/program/{programId}/environment/{environmentId}/logs", "application/json")
      .withQueryParam("service", ArrayValues(service, MULTI))
      .withQueryParam("name", ArrayValues(name, MULTI))
      .withQueryParam("days", days)
      .withPathParam("programId", programId)
      .withPathParam("environmentId", environmentId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[EnvironmentLogs](200)
      .withErrorResponse[BadRequestError](400)
      .withErrorResponse[Unit](404)
      

  /**
   * Lists all environments in an program
   * 
   * Expected answers:
   *   code 200 : EnvironmentList (Successful retrieval of environment list)
   *   code 404 :  (Program not found)
   * 
   * @param programId Identifier of the program
   * @param xGwImsOrgId IMS organization ID that the request is being made under.
   * @param authorization Bearer [token] - An access token for the technical account created through integration with Adobe IO
   * @param xApiKey IMS Client ID (API Key) which is subscribed to consume services on console.adobe.io
   * @param `type` Type of the environment
   */
  def getEnvironments(programId: String, xGwImsOrgId: String, authorization: String, xApiKey: String, `type`: Option[String] = None): ApiRequest[EnvironmentList] =
    ApiRequest[EnvironmentList](ApiMethods.GET, baseUrl, "/api/program/{programId}/environments", "application/json")
      .withQueryParam("type", `type`)
      .withPathParam("programId", programId)
      .withHeaderParam("x-gw-ims-org-id", xGwImsOrgId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("x-api-key", xApiKey)
      .withSuccessResponse[EnvironmentList](200)
      .withErrorResponse[Unit](404)
      



}

